{
  "paragraphs": [
    {
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n\n# Importing Data into Your Splice Machine Database\n\nThis notebook shows you how to import data into your Splice Machine database from flat files; we'll walk you through a simple example, after which you'll be able to import your own data into your database. This notebook contains these sections:\n\n* The *Import Data Checklist* summarizes important details about the format of the data you're importing.\n* *Using the `IMPORT_DATA` Command* shows the syntax for importing data using our `IMPORT_DATA` system procedure, and include\n\n>Before starting to work with this notebook, you should already have your data stored in delimited format (such as CSV); if that's not yet true, please review the previous notebook in this class, [*Preparing Data for Import*](/#/notebook/2DX8XQH89), which walks you through getting your data ready to import.\n\n\n## Additional Data Ingestion Information\nIn addition to using our `import_data` procedure to load flat files into a database, Splice Machine provides a number of *advanced* import processes for loading very large datasets into your database, including the use of bulk HFiles, and pre-splitting data for more efficient mapping into HBase regions. These are described, along with examples, in the  <a href=\"https://doc.splicemachine.com/tutorials_import_intro.html\" target=\"_blank\"><em>Importing Data Tutorial</em></a> in our documentation.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:27:50.886",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>Importing Data into Your Splice Machine Database</h1>\n<p>This notebook shows you how to import data into your Splice Machine database from flat files; we&rsquo;ll walk you through a simple example, after which you&rsquo;ll be able to import your own data into your database. This notebook contains these sections:</p>\n<ul>\n  <li>The <em>Import Data Checklist</em> summarizes important details about the format of the data you&rsquo;re importing.</li>\n  <li><em>Using the <code>IMPORT_DATA</code> Command</em> shows the syntax for importing data using our <code>IMPORT_DATA</code> system procedure, and include</li>\n</ul>\n<blockquote>\n  <p>Before starting to work with this notebook, you should already have your data stored in delimited format (such as CSV); if that&rsquo;s not yet true, please review the previous notebook in this class, <a href=\"/#/notebook/2DX8XQH89\"><em>Preparing Data for Import</em></a>, which walks you through getting your data ready to import.</p>\n</blockquote>\n<h2>Additional Data Ingestion Information</h2>\n<p>In addition to using our <code>import_data</code> procedure to load flat files into a database, Splice Machine provides a number of <em>advanced</em> import processes for loading very large datasets into your database, including the use of bulk HFiles, and pre-splitting data for more efficient mapping into HBase regions. These are described, along with examples, in the <a href=\"https://doc.splicemachine.com/tutorials_import_intro.html\" target=\"_blank\"><em>Importing Data Tutorial</em></a> in our documentation.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815328_1646270231",
      "id": "20170907-071238_703539388",
      "dateCreated": "2018-11-19 15:40:15.328",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Import Data Checklist\n\nWhen you import data from flat files into your database, you need to specify a number of details about your data files to get them correctly imported. Before starting this process, please make sure your data formats will work, as defined here:\n\n\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Data File Detail</th>\n            <th>Specific Requirements</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Field delimited?</td>\n            <td>The fields in each row <strong>must</strong> have delimiters between them</td>\n        </tr>\n        <tr>\n            <td>Rows terminated?</td>\n            <td>Each row <strong>must</strong> be terminated with a newline character</td>\n        </tr>\n        <tr>\n            <td>Header row included?</td>\n            <td>Header rows are not allowed; if your data contains one, you <strong>must</strong> remove it.</td>\n        </tr>\n        <tr>\n            <td><code>Date</code>, <code>time</code>, <code>timestamp</code> data types</td>\n            <td> If you are using <code>date</code>, <code>time</code>, and/or <code>timestamp</code> data types in the target table, you need to know how that data is represented in the flat file; your file <strong>must</strong> use a consistent representation, and you must specify that format when using the import command.</td>\n        </tr>\n        <tr>\n            <td><code>Char</code> and <code>Varchar</code> data</td>\n            <td><p>If any of your <code>char</code> or <code>varchar</code> data contains your delimiter character, you <strong>need to use</strong> a special character delimiter.</p>\n                <p>If any of your <code>char</code> or <code>varchar</code> data contains newline characters, you <strong>need to use</strong> the <code>oneLineRecords</code> parameter.</p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n\n<p class=\"noteIcon\">It is a good idea to test your import, delimiting, date formatting, etc., on a small amount of data first before loading all of your data. That's what we'll do in this notebook.</p>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:27:56.100",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Import Data Checklist</h2>\n<p>When you import data from flat files into your database, you need to specify a number of details about your data files to get them correctly imported. Before starting this process, please make sure your data formats will work, as defined here:</p>\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Data File Detail</th>\n            <th>Specific Requirements</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Field delimited?</td>\n            <td>The fields in each row <strong>must</strong> have delimiters between them</td>\n        </tr>\n        <tr>\n            <td>Rows terminated?</td>\n            <td>Each row <strong>must</strong> be terminated with a newline character</td>\n        </tr>\n        <tr>\n            <td>Header row included?</td>\n            <td>Header rows are not allowed; if your data contains one, you <strong>must</strong> remove it.</td>\n        </tr>\n        <tr>\n            <td><code>Date</code>, <code>time</code>, <code>timestamp</code> data types</td>\n            <td> If you are using <code>date</code>, <code>time</code>, and/or <code>timestamp</code> data types in the target table, you need to know how that data is represented in the flat file; your file <strong>must</strong> use a consistent representation, and you must specify that format when using the import command.</td>\n        </tr>\n        <tr>\n            <td><code>Char</code> and <code>Varchar</code> data</td>\n            <td><p>If any of your <code>char</code> or <code>varchar</code> data contains your delimiter character, you <strong>need to use</strong> a special character delimiter.</p>\n                <p>If any of your <code>char</code> or <code>varchar</code> data contains newline characters, you <strong>need to use</strong> the <code>oneLineRecords</code> parameter.</p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<p class=\"noteIcon\">It is a good idea to test your import, delimiting, date formatting, etc., on a small amount of data first before loading all of your data. That's what we'll do in this notebook.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543521850784_1553905963",
      "id": "20181129-200410_267060208",
      "dateCreated": "2018-11-29 20:04:10.784",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Using the IMPORT_DATA Command\n\nSyntax for the `IMPORT_DATA` command looks like this:\n```\ncall SYSCS_UTIL.IMPORT_DATA (\n\tschemaName,\n\ttableName,\n\tinsertColumnList | null,\n\tfileOrDirectoryName,\n\tcolumnDelimiter | null,\n\tcharacterDelimiter | null,\n\ttimestampFormat | null,\n\tdateFormat | null,\n\ttimeFormat | null,\n\tbadRecordsAllowed,\n\tbadRecordDirectory | null,\n\toneLineRecords | null,\n\tcharset | null \n);\n```\nNotice that many of the parameters allow you to apply the default value by specifying `null`.\n\n<p class=\"noteNote\">You can find full details about these parameters, including the default value for each, in <a href=\"https://doc.splicemachine.com/sqlref_sysprocs_importdata.html\" target=\"_blank\">our `IMPORT_DATA` documentation.</a></p>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:28:14.474",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>The IMPORT_DATA Command</h2>\n<p>Syntax for the <code>IMPORT_DATA</code> command looks like this:</p>\n<pre><code>call SYSCS_UTIL.IMPORT_DATA (\n\tschemaName,\n\ttableName,\n\tinsertColumnList | null,\n\tfileOrDirectoryName,\n\tcolumnDelimiter | null,\n\tcharacterDelimiter | null,\n\ttimestampFormat | null,\n\tdateFormat | null,\n\ttimeFormat | null,\n\tbadRecordsAllowed,\n\tbadRecordDirectory | null,\n\toneLineRecords | null,\n\tcharset | null \n);\n</code></pre>\n<p>Notice that many of the parameters allow you to apply the default value by specifying <code>null</code>.</p>\n<p class=\"noteNote\">You can find full details about these parameters, including the default value for each, in <a href=\"https://doc.splicemachine.com/sqlref_sysprocs_importdata.html\" target=\"_blank\">our Importing Data documentation.</a></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815329_855436182",
      "id": "20170907-074507_462416683",
      "dateCreated": "2018-11-19 15:40:15.329",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Step-by-Step Example of Importing Data\n\nThis example allows you to walk through importing data one step at a time, in these steps:\n\n1. *Create our Database Schema and Table*\n2. *Import a Small Data Sample* to make sure our data format is okay\n3. *Make Minor Data Changes and Corresponding Parameter Changes*\n4. *Imported Updated Data*\n4. *Review Parameter Changes*\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:31:55.973",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Step-by-Step Example of Importing Data</h2>\n<p>This example allows you to walk through importing data one step at a time, in these steps:</p>\n<ol>\n  <li><em>Create our Database Schema and Table</em></li>\n  <li><em>Import a Small Data Sample</em> to make sure our data format is okay</li>\n  <li><em>Make Minor Data Changes and Corresponding Parameter Changes</em></li>\n  <li><em>Imported Updated Data</em></li>\n  <li><em>Review Parameter Changes</em></li>\n</ol>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815330_-1563444435",
      "id": "20171012-115333_567951903",
      "dateCreated": "2018-11-19 15:40:15.330",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 1. Create our Database Schema and  Table\n\nYou can get started by clicking the  <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> *Run* button to run the next paragraph in this Notebook, which uses the `%splicemachine` interpreter to:\n\n* Create a new schema named DEV1 in your database\n* Make DEV1 the default schema\n* Create the `import_example` table in your database.",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:35:19.535",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>1. Create our Database Schema and Table</h3>\n<p>You can get started by clicking the <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> <em>Run</em> button to run the next paragraph in this Notebook, which uses the <code>%splicemachine</code> interpreter to:</p>\n<ul>\n  <li>Create a new schema named DEV1 in your database</li>\n  <li>Make DEV1 the default schema</li>\n  <li>Create the <code>import_example</code> table in your database.</li>\n</ul>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543522435568_-1029960094",
      "id": "20181129-201355_405386607",
      "dateCreated": "2018-11-29 20:13:55.569",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Run this step:",
      "text": "%splicemachine\n\ncreate table dev1.import_example (i int, v varchar(20), t timestamp);",
      "user": "anonymous",
      "dateUpdated": "2018-12-03 04:58:35.106",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542670815331_1664761845",
      "id": "20170916-145839_408808168",
      "dateCreated": "2018-11-19 15:40:15.331",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 2. Import a Small Data Sample\n\nNow we'll import a small sample of our data to make sure that we've got our import set up correctly. We've created a sample data file named *example1.csv* that contains these two records:\n\n<pre>100,hello there,2017-01-01 00:00:00\n200,how are you,2017-02-01 00:00:00</pre>\n\nImport the data in this file by clicking the <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> *Run* button to run the next paragraph, which calls our `IMPORT_DATA` function",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:37:09.342",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>2. Import a Small Data Sample</h3>\n<p>Now we&rsquo;ll import a small sample of our data to make sure that we&rsquo;ve got our import set up correctly. We&rsquo;ve created a sample data file named <em>example1.csv</em> that contains these two records:</p>\n<pre>100,hello there,2017-01-01 00:00:00\n200,how are you,2017-02-01 00:00:00</pre>\n<p>Import the data in this file by clicking the <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> <em>Run</em> button to run the next paragraph, which calls our <code>IMPORT_DATA</code> function</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815331_-1729711631",
      "id": "20170916-164024_410953951",
      "dateCreated": "2018-11-19 15:40:15.331",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\ncall SYSCS_UTIL.IMPORT_DATA('DEV1','import_example',null,'s3a://splice-examples/import/example1.csv',null,null,null,null,null,0,null,null,null);",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 18:39:48.562",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 88.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542670815332_1556691646",
      "id": "20170916-164026_68551836",
      "dateCreated": "2018-11-19 15:40:15.332",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n<br />\n\nYou'll notice that after you run the paragraph, you see a short report that indicates how many rows were successfully loaded, and how many failed to load, In this example, all 2 rows were successfully loaded.\n\nYou have probably also noticed that we used default values by specifying `null` for all of the parameters that have defaults; here's what those defaults mean:\n\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>NULL Value Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">insertColumnList</td>\n            <td>Our column list exactly matches the columns and ordering of columns in the table, so there's not need to specify a list.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">columnDelimiter</td>\n            <td>Our data uses the default comma character (<code>,</code>) to delimit columns.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">stringDelimiter</td>\n            <td>None of our data fields contain the comma character, so we don't need a string delimiter character.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timestampFormat</td>\n            <td>Our data matches the default timestamp format, which is <code>yyyy-MM-dd HH:mm:ss</code></td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">dateFormat</td>\n            <td>Our data doesn't contain any date columns, so there's no need to specify a format.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timeFormat</td>\n            <td>Our data doesn't contain any time columns, so there's no need to specify a format.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">badRecordDirectory</td>\n            <td>We left this <code>null</code>, which is allowable, but not considered a good practice. Splice Machine advises specifying a bad record directory so that you can diagnose any record import problems.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">oneLineRecords</td>\n            <td>We were able to leave this as <code>null</code> because our records each fit on one line. If your data contains any newline characters, you must specify <code>false</code> for this parameter, and you must include delimiters around the data.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">charset</td>\n            <td>This parameter is currently ignored; Splice Machine assumes that your data uses utf-8 encoding.</td>\n        </tr>\n    </tbody>\n</table>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:37:04.220",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 513.0,
              "optionOpen": false
            }
          }
        },
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>You&rsquo;ll notice that after you run the paragraph, you see a short report that indicates how many rows were successfully loaded, and how many failed to load, In this example, all 2 rows were successfully loaded.</p>\n<p>You have probably also noticed that we used default values by specifying <code>null</code> for all of the parameters that have defaults; here&rsquo;s what those defaults mean:</p>\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>NULL Value Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">insertColumnList</td>\n            <td>Our column list exactly matches the columns and ordering of columns in the table, so there's not need to specify a list.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">columnDelimiter</td>\n            <td>Our data uses the default comma character (<code>,</code>) to delimit columns.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">stringDelimiter</td>\n            <td>None of our data fields contain the comma character, so we don't need a string delimiter character.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timestampFormat</td>\n            <td>Our data matches the default timestamp format, which is <code>yyyy-MM-dd HH:mm:ss</code></td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">dateFormat</td>\n            <td>Our data doesn't contain any date columns, so there's no need to specify a format.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timeFormat</td>\n            <td>Our data doesn't contain any time columns, so there's no need to specify a format.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">badRecordDirectory</td>\n            <td>We left this <code>null</code>, which is allowable, but not considered a good practice. Splice Machine advises specifying a bad record directory so that you can diagnose any record import problems.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">oneLineRecords</td>\n            <td>We were able to leave this as <code>null</code> because our records each fit on one line. If your data contains any newline characters, you must specify <code>false</code> for this parameter, and you must include delimiters around the data.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">charset</td>\n            <td>This parameter is currently ignored; Splice Machine assumes that your data uses utf-8 encoding.</td>\n        </tr>\n    </tbody>\n</table>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815332_-551680906",
      "id": "20170916-164258_1714730049",
      "dateCreated": "2018-11-19 15:40:15.332",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 3. Make Minor Data Changes and Corresponding Parameter Changes\n\nNow we'll make a few minor changes in our input data to see how that influences our import command. The modified data is stored in a CSV file in an S3 bucket on AWS. \nLet's change the data a bit, and see how that influences the `import_data` command. \n\nThe updated data, stored in *example2.csv*, looks like this:\n\n<pre>\n'hello\nthere'|2017-01-01 00:00:00.123456\n'how, are you'|2017-02-01 00:00:00.123456\n</pre>\n\n### 4. Import the Updated Data\nNow import the data in the example2.csv file by clicking the  <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> *Run* button in the next paragraph, which again uses the *%splicemachine* interpreter:\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 18:40:49.971",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>3. Make Minor Data Changes and Corresponding Parameter Changes</h3>\n<p>Now we&rsquo;ll make a few minor changes in our input data to see how that influences our import command. The modified data is stored in a CSV file in an S3 bucket on AWS.<br/>Let&rsquo;s change the data a bit, and see how that influences the <code>import_data</code> command. </p>\n<p>The updated data, stored in <em>example2.csv</em>, looks like this:</p>\n<pre>\n'hello\nthere'|2017-01-01 00:00:00.123456\n'how, are you'|2017-02-01 00:00:00.123456\n</pre>\n<h3>4. Import the Updated Data</h3>\n<p>Now import the data in the example2.csv file by clicking the <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> <em>Run</em> button in the next paragraph, which again uses the <em>%splicemachine</em> interpreter:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815332_271639112",
      "id": "20170916-182114_1562378772",
      "dateCreated": "2018-11-19 15:40:15.332",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\ncall SYSCS_UTIL.IMPORT_DATA('DEV1','import_example','v,t','s3a://splice-examples/import/example2.csv','|','''','yyyy-MM-dd HH:mm:ss.SSSSSS',null,null,0,null,false,null)",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 18:41:17.474",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542670815333_1411750085",
      "id": "20170916-182305_148259237",
      "dateCreated": "2018-11-19 15:40:15.333",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 5. Review our Parameter Changes\n\nLet's examine the changes in our call to `IMPORT_DATA` due to changes in our data file:\n\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">insertColumnList</td>\n            <td><p>In this case, we only want to import two of the three columns in our input data, so we specify the names of the columns we want imported.</p>\n                <p class=\"noteNote\">The default value (or <code>null</code> if no default value is defined in the database) is inserted for records that don't contain a value in a column being imported.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">columnDelimiter</td>\n            <td>At least one of our records includes a string that contains the default delimiter (comma), so need to use a different delimiter character. Our sample file uses the <code>|</code> character.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">stringDelimiter</td>\n            <td><p>We want to be able to include commas and newlines in our input data fields, so we enclose string data in our input file in single quote (<code>'</code>) characters.</p>\n                <p class=\"noteNote\">You need to escape the single quote character in your parameter values, which is why you see four single quotes (<code>''''</code>).</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timestampFormat</td>\n            <td>Our data now includes microseconds, so we need to change our format specification to <code>yyyy-MM-dd HH:mm:ss.SSSSSS</code>.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">oneLineRecords</td>\n            <td>One of our input records contains a newline, so we must explicitly set this value to <code>false</code>.</td>\n        </tr>\n    </tbody>\n</table>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:37:42.663",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>5. Review our Parameter Changes</h3>\n<p>Let&rsquo;s examine the changes in our call to <code>IMPORT_DATA</code> due to changes in our data file:</p>\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Parameter</th>\n            <th>Details</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">insertColumnList</td>\n            <td><p>In this case, we only want to import two of the three columns in our input data, so we specify the names of the columns we want imported.</p>\n                <p class=\"noteNote\">The default value (or <code>null</code> if no default value is defined in the database) is inserted for records that don't contain a value in a column being imported.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">columnDelimiter</td>\n            <td>At least one of our records includes a string that contains the default delimiter (comma), so need to use a different delimiter character. Our sample file uses the <code>|</code> character.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">stringDelimiter</td>\n            <td><p>We want to be able to include commas and newlines in our input data fields, so we enclose string data in our input file in single quote (<code>'</code>) characters.</p>\n                <p class=\"noteNote\">You need to escape the single quote character in your parameter values, which is why you see four single quotes (<code>''''</code>).</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">timestampFormat</td>\n            <td>Our data now includes microseconds, so we need to change our format specification to <code>yyyy-MM-dd HH:mm:ss.SSSSSS</code>.</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">oneLineRecords</td>\n            <td>One of our input records contains a newline, so we must explicitly set this value to <code>false</code>.</td>\n        </tr>\n    </tbody>\n</table>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815333_-28512832",
      "id": "20170916-183543_1181641403",
      "dateCreated": "2018-11-19 15:40:15.333",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\n\nOnce you have successfully imported your own data, you're ready to run queries. See our next tutorial, [*Running Queries*](/#/notebook/2DUGVN2K2).\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:37:48.410",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>Once you have successfully imported your own data, you&rsquo;re ready to run queries. See our next tutorial, <a href=\"/#/notebook/2DUGVN2K2\"><em>Running Queries</em></a>.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542676116226_1799695660",
      "id": "20181119-170836_461498674",
      "dateCreated": "2018-11-19 17:08:36.226",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Related Documentation\nThe <a href=\"https://doc.splicemachine.com/tutorials_import_intro.html\" target=\"_blank\"><em>Importing Data Tutorial</em></a> in our documentation provides details about and examples of using our different data importation processes.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 03:37:51.857",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Related Documentation</h2>\n<p>The <a href=\"https://doc.splicemachine.com/tutorials_import_intro.html\" target=\"_blank\"><em>Importing Data Tutorial</em></a> in our documentation provides details about and examples of using our different data importation processes.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542670815334_1983767364",
      "id": "20170907-074700_1452777231",
      "dateCreated": "2018-11-19 15:40:15.334",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training/For Developers, Part I - Beginning/d. Importing Data",
  "id": "2DVR1D5BP",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}