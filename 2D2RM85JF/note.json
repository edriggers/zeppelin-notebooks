{
  "paragraphs": [
    {
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n\n# Introduction\nSplice Machine allows for the creation of custom functions and procedures that you can deploy to your database.  Once deployed, these functions and procedures can be called as needed from your SQL.  This notebook will show you how this is done.\n\n(Important note: when creating custom functions and procedures as described here, the code must be in Java.)\n\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:00+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n<h1>Introduction</h1>\n<p>Splice Machine allows for the creation of custom functions and procedures that you can deploy to your database. Once deployed, these functions and procedures can be called as needed from your SQL. This notebook will show you how this is done.</p>\n<p>(Important note: when creating custom functions and procedures as described here, the code must be in Java.)</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817009_176288794",
      "id": "20171130-160641_2246962",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:54+0000",
      "dateFinished": "2018-08-02T15:02:54+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:36707"
    },
    {
      "text": "%md\n## Your Stored Procedure Development Environment\n\nThe \"environment\" in which your stored procedure code is developed may change depending upon your need.  For example, while fleshing out the actual functionality of your custom code, we recommend that you do this on a local (standalone) Splice Machine environment.  You can either build this from our open source code, or download our ready-to-use standalone version.  You can find details on these options at https://www.splicemachine.com/get-started/ \n\nOnce you have refined your code in a local environment and it behaves to your satisfaction, you can then re-deploy the developed code to your target instance. \n\nThis notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment.  At times you will see `<your-file-name>` in the examples shown.  These should be replaced with your specific file name, etc. accordingly - including the removal of the brackets.\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:02+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Your Stored Procedure Development Environment</h2>\n<p>The &ldquo;environment&rdquo; in which your stored procedure code is developed may change depending upon your need. For example, while fleshing out the actual functionality of your custom code, we recommend that you do this on a local (standalone) Splice Machine environment. You can either build this from our open source code, or download our ready-to-use standalone version. You can find details on these options at <a href=\"https://www.splicemachine.com/get-started/\">https://www.splicemachine.com/get-started/</a> </p>\n<p>Once you have refined your code in a local environment and it behaves to your satisfaction, you can then re-deploy the developed code to your target instance. </p>\n<p>This notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment. At times you will see <code>&lt;your-file-name&gt;</code> in the examples shown. These should be replaced with your specific file name, etc. accordingly - including the removal of the brackets.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817015_175519296",
      "id": "20171130-161001_579045840",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:54+0000",
      "dateFinished": "2018-08-02T15:02:54+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36708"
    },
    {
      "text": "%md\n## Local Development of the Custom Code in an IDE\n\nWe highly recommend that the initial development of the custom code is done in your local environment (e.g. Mac or Linux).  This way you can develop and test the code in a quick cycle, testing and tuning as needed, before deploying to a full cluster.  The steps described here will be for a Mac, but the process is generally the same for Linux.\n\nUsing an Integrated Development Environment (IDE) is usually the best approach when developing code, since development is straightforward, as is the generation of the desired output - a JDK 1.8-compatible JAR file.  We'll be using IntelliJ IDEA here but again most IDE's should work as well.\n\n### Setting Up Your Project\n\nInside of IntelliJ IDEA, do the following:\n1. Select File -> New -> Project...\n2. Choose \"Java\" with 1.8 as the Project SDK <Next>\n3. Skip creating from a template unless you prefer to use one <Next>\n4. Give your project a name and location (such as CompanyACustom1)\n5. If desired, create a new package (File -> New -> Package), such as com.splicemachine.companya\n\n### Configuring to output a JAR file\n\nInside of IntelliJ IDEA, do the following:\n1. Select File -> Project Structure...\n2. Select Artifacts, and hit \"+\"\n3. Choose JAR -> From modules with dependencies \n3. Check \"Build on make\" and hit <OK>\n\n### Coding your function or procedure\n\n1. Create a file: right click on your src or package folder and select New -> Java Class\n2. Paste in code like the following:\n\n```\npackage com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con = DriverManager.getConnection(\"jdbc:default:connection\")) {\n\n            String incrementSQL = \"update SPLICE.INCREMENTTEST set i = i + 1\";\n\n            try (PreparedStatement ps = con.prepareStatement(incrementSQL)) {\n                int resultSet = ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n```\n\n### Build your JAR file\n1. Build -> Artifacts... JAR\n2. Using your CLI you can navigate to where the JAR file is being created (e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar)\n\nYou are now ready to deploy your JAR file to test!\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:05+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 8,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Local Development of the Custom Code in an IDE</h2>\n<p>We highly recommend that the initial development of the custom code is done in your local environment (e.g. Mac or Linux). This way you can develop and test the code in a quick cycle, testing and tuning as needed, before deploying to a full cluster. The steps described here will be for a Mac, but the process is generally the same for Linux.</p>\n<p>Using an Integrated Development Environment (IDE) is usually the best approach when developing code, since development is straightforward, as is the generation of the desired output - a JDK 1.8-compatible JAR file. We&rsquo;ll be using IntelliJ IDEA here but again most IDE&rsquo;s should work as well.</p>\n<h3>Setting Up Your Project</h3>\n<p>Inside of IntelliJ IDEA, do the following:<br/>1. Select File -&gt; New -&gt; Project&hellip;<br/>2. Choose &ldquo;Java&rdquo; with 1.8 as the Project SDK <Next><br/>3. Skip creating from a template unless you prefer to use one <Next><br/>4. Give your project a name and location (such as CompanyACustom1)<br/>5. If desired, create a new package (File -&gt; New -&gt; Package), such as com.splicemachine.companya</p>\n<h3>Configuring to output a JAR file</h3>\n<p>Inside of IntelliJ IDEA, do the following:<br/>1. Select File -&gt; Project Structure&hellip;<br/>2. Select Artifacts, and hit &ldquo;+&rdquo;<br/>3. Choose JAR -&gt; From modules with dependencies<br/>3. Check &ldquo;Build on make&rdquo; and hit <OK></p>\n<h3>Coding your function or procedure</h3>\n<ol>\n  <li>Create a file: right click on your src or package folder and select New -&gt; Java Class</li>\n  <li>Paste in code like the following:</li>\n</ol>\n<pre><code>package com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con = DriverManager.getConnection(&quot;jdbc:default:connection&quot;)) {\n\n            String incrementSQL = &quot;update SPLICE.INCREMENTTEST set i = i + 1&quot;;\n\n            try (PreparedStatement ps = con.prepareStatement(incrementSQL)) {\n                int resultSet = ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n</code></pre>\n<h3>Build your JAR file</h3>\n<ol>\n  <li>Build -&gt; Artifacts&hellip; JAR</li>\n  <li>Using your CLI you can navigate to where the JAR file is being created (e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar)</li>\n</ol>\n<p>You are now ready to deploy your JAR file to test!</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817015_175519296",
      "id": "20171130-161030_1002161632",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:54+0000",
      "dateFinished": "2018-08-02T15:02:54+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36709"
    },
    {
      "text": "%md\n## Development Guidelines\nBefore we develop the code and deploy the JAR file, it is worth going through some simple best practices:\n\n1. For code organization it is useful to use a package for the code (e.g. com.splicemachine.yourcompanyname)\n2. Notice you don't need a \"main\" code block in your class - you will be calling the class's specific method directly\n3. This example is a stored procedure, therefore it is not returning any results.  A function would require a return result\n4. You will need to ensure your method throws SQLException if SQL is being executed.  Be sure to use try/catch blocks similar to the example shown here to deal with possible run-time exceptions\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:06+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 4,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Development Guidelines</h2>\n<p>Before we develop the code and deploy the JAR file, it is worth going through some simple best practices:</p>\n<ol>\n  <li>For code organization it is useful to use a package for the code (e.g. com.splicemachine.yourcompanyname)</li>\n  <li>Notice you don&rsquo;t need a &ldquo;main&rdquo; code block in your class - you will be calling the class&rsquo;s specific method directly</li>\n  <li>This example is a stored procedure, therefore it is not returning any results. A function would require a return result</li>\n  <li>You will need to ensure your method throws SQLException if SQL is being executed. Be sure to use try/catch blocks similar to the example shown here to deal with possible run-time exceptions</li>\n</ol>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817016_173595552",
      "id": "20171130-162809_2009777442",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:54+0000",
      "dateFinished": "2018-08-02T15:02:54+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36710"
    },
    {
      "text": "%md\n## Local Deployment of the JAR file\n\nIt's now time to deploy into your development environment.  Make sure it's up and running first.  Then carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:\n\n```\nCALL SQLJ.INSTALL_JAR('<your-full-path-to>/Custom1.jar', 'SPLICE.Custom1', 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY('derby.database.classpath', 'SPLICE.custom1');\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME 'com.splicemachine.companya.Custom1.customIncrement';\n```\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:21+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Local Deployment of the JAR file</h2>\n<p>It&rsquo;s now time to deploy into your development environment. Make sure it&rsquo;s up and running first. Then carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:</p>\n<pre><code>CALL SQLJ.INSTALL_JAR(&#39;&lt;your-full-path-to&gt;/Custom1.jar&#39;, &#39;SPLICE.Custom1&#39;, 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY(&#39;derby.database.classpath&#39;, &#39;SPLICE.custom1&#39;);\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME &#39;com.splicemachine.companya.Custom1.customIncrement&#39;;\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817017_173210803",
      "id": "20171201-001544_2091534540",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:54+0000",
      "dateFinished": "2018-08-02T15:02:54+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36711"
    },
    {
      "text": "%md\n## Locally Set up and test the custom procedure\n\nFirst we set up the table our stored procedure will operate on.  Again for this part we will do this IN YOUR LOCAL ENVIRONMENT:\n```\ncreate table incrementtest (i int);\ninsert into incrementtest values 1;\n```\n\nNow we can see the stored procedure in action:\n\n```\ncall customincrement();\nselect * from incrementtest;\n```\n",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:24+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Locally Set up and test the custom procedure</h2>\n<p>First we set up the table our stored procedure will operate on. Again for this part we will do this IN YOUR LOCAL ENVIRONMENT:</p>\n<pre><code>create table incrementtest (i int);\ninsert into incrementtest values 1;\n</code></pre>\n<p>Now we can see the stored procedure in action:</p>\n<pre><code>call customincrement();\nselect * from incrementtest;\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817017_173210803",
      "id": "20171201-001610_1286108786",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:55+0000",
      "dateFinished": "2018-08-02T15:02:55+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36712"
    },
    {
      "text": "%md\n## Deployment of the JAR file to your Service cluster\nOnce you have confirmed that the code works to your satisfaction, you can now take that same JAR file and deploy it to your Splice Machine cluster on the cloud.  Here are the steps we will follow:\n\n1. Copy the JAR file you already built to S3 - your Service cluster will be able to access it from here\n2. Deploy the JAR file similarly as before\n3. Test and run the custom procedure\n\nThese last two steps can now be run using a splicemachine interpreter in Zeppelin, so you should edit the recommended steps and run them as below",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:27+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Deployment of the JAR file to your Service cluster</h2>\n<p>Once you have confirmed that the code works to your satisfaction, you can now take that same JAR file and deploy it to your Splice Machine cluster on the cloud. Here are the steps we will follow:</p>\n<ol>\n  <li>Copy the JAR file you already built to S3 - your Service cluster will be able to access it from here</li>\n  <li>Deploy the JAR file similarly as before</li>\n  <li>Test and run the custom procedure</li>\n</ol>\n<p>These last two steps can now be run using a splicemachine interpreter in Zeppelin, so you should edit the recommended steps and run them as below</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817017_173210803",
      "id": "20171201-010043_1902163707",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:55+0000",
      "dateFinished": "2018-08-02T15:02:55+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36713"
    },
    {
      "text": "%md\n### Copy the JAR file to S3\n\nFirst make sure the `aws` command tool installed in the local environment where you have your JAR file.  If not, see http://docs.aws.amazon.com/cli/latest/userguide/installing.html\n\nOnce `aws` is installed, you can run the following commands in your local environment:\n\n```\naws s3 cp <your-file-name> s3://<your-bucket-name>/<your-JAR-file-name>\naws s3api put-object-acl --bucket <your-bucket-name> --grant-read emailAddress=\"dbaas@splicemachine.com\"  --key=<your-JAR-file-name> --region us-east-1\n```",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:05:51+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Copy the JAR file to S3</h3>\n<p>First make sure the <code>aws</code> command tool installed in the local environment where you have your JAR file. If not, see <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\">http://docs.aws.amazon.com/cli/latest/userguide/installing.html</a></p>\n<p>Once <code>aws</code> is installed, you can run the following commands in your local environment:</p>\n<pre><code>aws s3 cp &lt;your-file-name&gt; s3://&lt;your-bucket-name&gt;/&lt;your-JAR-file-name&gt;\naws s3api put-object-acl --bucket &lt;your-bucket-name&gt; --grant-read emailAddress=&quot;dbaas@splicemachine.com&quot;  --key=&lt;your-JAR-file-name&gt; --region us-east-1\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817018_174365050",
      "id": "20171203-152143_1212910590",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:05:51+0000",
      "dateFinished": "2018-08-02T15:05:51+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36714"
    },
    {
      "text": "%md\n### Set up the custom procedure on your Service cluster",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:05:47+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Set up the custom procedure on your Service cluster</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817018_174365050",
      "id": "20171203-005131_1351460397",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:05:47+0000",
      "dateFinished": "2018-08-02T15:05:47+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36715"
    },
    {
      "text": "%splicemachine\n-- installing the jar and defining the procedure\n-- edit these steps for your environment\nCALL SQLJ.INSTALL_JAR('S3://<your-bucket-name>/<your-jar-file-name>', 'SPLICE.Custom1', 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY('derby.database.classpath', 'SPLICE.custom1');\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME 'com.splicemachine.companya.Custom1.customIncrement';",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:02:55+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1512344817019_173980301",
      "id": "20171203-005159_1258738745",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:55+0000",
      "dateFinished": "2018-08-02T15:03:00+0000",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36716",
      "errorMessage": ""
    },
    {
      "text": "%md\n### Run the stored procedure on your Service cluster",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:05:27+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Run the stored procedure on your Service cluster</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1512344817019_173980301",
      "id": "20171203-152015_779093141",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:05:27+0000",
      "dateFinished": "2018-08-02T15:05:27+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36717"
    },
    {
      "text": "%splicemachine\ncreate table incrementtest (i int);\ninsert into incremenenttest values 1;\ncall customincrement();\nselect * from incrementtest;",
      "user": "splice",
      "dateUpdated": "2018-08-02T15:03:39+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1512344817020_172056556",
      "id": "20171203-152351_950299020",
      "dateCreated": "2017-12-03T23:46:57+0000",
      "dateStarted": "2018-08-02T15:02:57+0000",
      "dateFinished": "2018-08-02T15:03:05+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:36718"
    }
  ],
  "name": "5. Advanced Tutorials / 1. Creating Custom Stored Procedures",
  "id": "2D2RM85JF",
  "angularObjects": {
    "2DNHZSRUQ:shared_process": [],
    "2DP6VF566:shared_process": [],
    "2DM92W265:shared_process": [],
    "2DPD6828Z:shared_process": [],
    "2DPSBXP2Z:shared_process": [],
    "2DNP2K3KJ:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}