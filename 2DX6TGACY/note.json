{"paragraphs":[{"text":"%md\n\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n# KMeans\n\nKMeans is an unsupervised-learning, clustering algorithm used to determine similarities and trends within a given dataset\nKMeans is an iterative process, where K clusters are created by the user and continualy computed on a given dataset until the data converges and the algorithm ends.\n## Setting up a KMeans\nTo implement KMeans, you will need two things:\n\n* A dataset of structured data. Learn about structured data [here](https://www.quora.com/What-are-Structured-semi-structured-and-unstructured-data-in-Big-Data/answer/Manoj-R-Patil?srid=33JGI)\n* A value for K. K can be computed a number of ways, none of which are necessarily incorrect. It is dependent on the specific dataset you are working with. It is suggested to first plot your data and do trials with multiple values of K. Learn more about choosing a good K [here](https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set)\n\n## Computing KMeans\nA KMeans algorithm is computed in three main steps:\n1. K clusters are created and assigned locations, either randomly generated or randomly taken from K datapoints\n2. For each datapoint in your dataset, the square Euclidian Distance is computed against all clusters until a minimum is found. That datapoint is assigned to the cluster of minimum distance\n3. After all datapoints are assigned, clusters are recomputed and reassigned locations using the mean distance of its assigned datapoints.\n\n#### Steps 2 and 3 are repeated until one of the following:\n* A set number of iterations occurs\n* No datapoints are reassigned to new clusters\n* Minimum distance changes occur within clusters\n\nLearn more about KMeans algorithm [here](https://www.datascience.com/blog/introduction-to-k-means-clustering-algorithm-learn-data-science-tutorials)\nIn-depth KMeans clustering documentation [here](http://scikit-learn.org/stable/modules/clustering.html#k-means)\n\n#### We will now create a simple KMeans example.\nTo follow along with this data, download [here](https://raw.githubusercontent.com/datascienceinc/learn-data-science/master/Introduction-to-K-means-Clustering/Data/data_1024.csv)\nMore KMeans and Scala examples [here](https://github.com/apache/spark/tree/master/examples/src/main/scala/org/apache/spark/examples/mllib)\n\nLearn about Sum of Squares for Errors (used later in algorithm) [here](http://www.wikihow.com/Calculate-the-Sum-of-Squares-for-Error-(SSE))","user":"anonymous","dateUpdated":"2018-11-16T19:59:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{"0":{"graph":{"mode":"table","height":70.375,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>KMeans</h1>\n<p>KMeans is an unsupervised-learning, clustering algorithm used to determine similarities and trends within a given dataset<br/>KMeans is an iterative process, where K clusters are created by the user and continualy computed on a given dataset until the data converges and the algorithm ends.</p>\n<h2>Setting up a KMeans</h2>\n<p>To implement KMeans, you will need two things:</p>\n<ul>\n  <li>A dataset of structured data. Learn about structured data <a href=\"https://www.quora.com/What-are-Structured-semi-structured-and-unstructured-data-in-Big-Data/answer/Manoj-R-Patil?srid=33JGI\">here</a></li>\n  <li>A value for K. K can be computed a number of ways, none of which are necessarily incorrect. It is dependent on the specific dataset you are working with. It is suggested to first plot your data and do trials with multiple values of K. Learn more about choosing a good K <a href=\"https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set\">here</a></li>\n</ul>\n<h2>Computing KMeans</h2>\n<p>A KMeans algorithm is computed in three main steps:<br/>1. K clusters are created and assigned locations, either randomly generated or randomly taken from K datapoints<br/>2. For each datapoint in your dataset, the square Euclidian Distance is computed against all clusters until a minimum is found. That datapoint is assigned to the cluster of minimum distance<br/>3. After all datapoints are assigned, clusters are recomputed and reassigned locations using the mean distance of its assigned datapoints.</p>\n<h4>Steps 2 and 3 are repeated until one of the following:</h4>\n<ul>\n  <li>A set number of iterations occurs</li>\n  <li>No datapoints are reassigned to new clusters</li>\n  <li>Minimum distance changes occur within clusters</li>\n</ul>\n<p>Learn more about KMeans algorithm <a href=\"https://www.datascience.com/blog/introduction-to-k-means-clustering-algorithm-learn-data-science-tutorials\">here</a><br/>In-depth KMeans clustering documentation <a href=\"http://scikit-learn.org/stable/modules/clustering.html#k-means\">here</a></p>\n<h4>We will now create a simple KMeans example.</h4>\n<p>To follow along with this data, download <a href=\"https://raw.githubusercontent.com/datascienceinc/learn-data-science/master/Introduction-to-K-means-Clustering/Data/data_1024.csv\">here</a><br/>More KMeans and Scala examples <a href=\"https://github.com/apache/spark/tree/master/examples/src/main/scala/org/apache/spark/examples/mllib\">here</a></p>\n<p>Learn about Sum of Squares for Errors (used later in algorithm) [here](<a href=\"http://www.wikihow.com/Calculate-the-Sum-of-Squares-for-Error-(SSE)\">http://www.wikihow.com/Calculate-the-Sum-of-Squares-for-Error-(SSE)</a>)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1542398329138_264893937","id":"20170620-100414_1484018649","dateCreated":"2018-11-16T19:58:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:200214","dateFinished":"2018-11-16T19:59:38+0000","dateStarted":"2018-11-16T19:59:38+0000"},{"text":"%spark\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\nimport org.apache.spark.mllib.linalg.Vectors\n\n//Grabbing data and parsing to vectors\n\nval data = sc.textFile(\"/Users/benepstein/Downloads/kmeans_data.csv\")\nval formatted =  data.map(s => s.split(\"\\t\")).map(s => s.drop(1)).collect().drop(1).map(s => s.map(_.toDouble))\nval parsedData = formatted.map(s => Vectors.dense(s))\nval rddData = sc.parallelize(parsedData)\n\n//Clustering data into 3 groups\nval K = 4\nval maxIterations = 5000\nval clusters = KMeans.train(rddData, K, maxIterations)\n\n//Compute cost Within Set Sum of Squared Errors\nval WSSSE = clusters.computeCost(rddData)\nprintln(\"Within Set Sum of Squared Errors: \" + WSSSE)","user":"anonymous","dateUpdated":"2018-11-16T19:58:49+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542398329139_490492218","id":"20170620-100456_224981933","dateCreated":"2018-11-16T19:58:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:200215"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2018-11-16T19:58:49+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542398329139_288790578","id":"20170620-140030_993087114","dateCreated":"2018-11-16T19:58:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:200216"}],"name":"Training/Data Science/j. KMeans","id":"2DX6TGACY","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"splicemachine:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
