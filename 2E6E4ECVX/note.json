{
  "paragraphs": [
    {
      "text": "%md\n<br>\n### Note: This notebook will work properly only if you have configured your cluster for ML Manager.  The Cloud Manager interface will allow you to enable ML Manager for your cluster.",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br>\n<h3>Note: This notebook will work properly only if you have configured your cluster for ML Manager. The Cloud Manager interface will allow you to enable ML Manager for your cluster.</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349916_-1314341821",
      "id": "20190313-170250_1957024203",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:19347"
    },
    {
      "text": "%angular\n<style>\n#s {\n}\nh1, h2, h3, h4, h5, h6, table, button, a, p, blockquote {\nfont-family:Geneva;\n}\n\n.log {\ntransition: all .2s ease-in-out;\n}\n\n.log:hover {\ntransform: scale(1.05);\n}\n</style>\n<div id='s' style='width:100%'>\n<center><img class='log' src='https://www.splicemachine.com/wp-content/themes/SpliceMachine/nhimages/splice-logo.png' width='20%' style='z-index:5'></center>\n<center><h1 class='log' style='font-size:70px; color:black;'>Welcome to Splice Machine MLManager</h1></center>\n<center><h2 class = 'log' style='font-size:40px; color:grey;'>The data platform for intelligent applications</center>\n</div>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:16:16+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<style>\n#s {\n}\nh1, h2, h3, h4, h5, h6, table, button, a, p, blockquote {\nfont-family:Geneva;\n}\n\n.log {\ntransition: all .2s ease-in-out;\n}\n\n.log:hover {\ntransform: scale(1.05);\n}\n</style>\n<div id='s' style='width:100%'>\n<center><img class='log' src='https://www.splicemachine.com/wp-content/themes/SpliceMachine/nhimages/splice-logo.png' width='20%' style='z-index:5'></center>\n<center><h1 class='log' style='font-size:70px; color:black;'>Welcome to Splice Machine MLManager</h1></center>\n<center><h2 class = 'log' style='font-size:40px; color:grey;'>The data platform for intelligent applications</center>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349917_-1151413663",
      "id": "20190221-204006_1471207812",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19348"
    },
    {
      "text": "%angular\n<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Why use Splice Machine ML</span></b><br><br>Splice Machine ML isn't just a machine learning platform, it is a complete machine learning lifecycle management solution, giving you total control of your models, from retrieving data to scalable deployment.  <br><br>\n    <center><img class='log' src='https://s3.amazonaws.com/splice-demo/ML+full+circle.png' width='40%' style='z-index:5'></center>\n    <br><ul><li>Our platform runs directly on Apache Spark, allowing you to complete massive jobs in parallel</li><li>Our native <code>PySpliceContext</code> lets you directly access the data in your database and convert as a Spark DataFrame, no ETL.</li><li><code>MLFlow</code> is integrated directly into all Splice Machine clusters, allowing you to keep track of your entire Data Science workflow</li><li>After you have found the best model for your task, you can easily deploy it live to AWS SageMaker or AzureML to make predictions in real time.</li></ul><br>In this demo we will guide you through the entire MLManager life cycle.<br></p><footer>Your friends at Splice Machine</footer></blockquote>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Why use Splice Machine ML</span></b><br><br>Splice Machine ML isn't just a machine learning platform, it is a complete machine learning lifecycle management solution, giving you total control of your models, from retrieving data to scalable deployment.  <br><br>\n    <center><img class='log' src='https://s3.amazonaws.com/splice-demo/ML+full+circle.png' width='40%' style='z-index:5'></center>\n    <br><ul><li>Our platform runs directly on Apache Spark, allowing you to complete massive jobs in parallel</li><li>Our native <code>PySpliceContext</code> lets you directly access the data in your database and convert as a Spark DataFrame, no ETL.</li><li><code>MLFlow</code> is integrated directly into all Splice Machine clusters, allowing you to keep track of your entire Data Science workflow</li><li>After you have found the best model for your task, you can easily deploy it live to AWS SageMaker or AzureML to make predictions in real time.</li></ul><br>In this demo we will guide you through the entire MLManager life cycle.<br></p><footer>Your friends at Splice Machine</footer></blockquote>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349917_-1295134580",
      "id": "20190221-204122_686619241",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19349"
    },
    {
      "text": "%angular\n<h2 style='font-size:40px;  font-weight:bold'>How does this work?</h1>\n<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Zeppelin</span></b><br><br>Zeppelin notebooks are a simple, easy and intuitive way to do data science, directly in your browser. Any Spark computations you run inside of the notebook are executed right on your cluster's Spark executors.<br><br>Zeppelin notebooks also make machine learning easier. By using Zeppelin intepreters, you can run different languages inside the same notebook. The language you want to run is signified by a % sign followed by an interpreter name at the top of a cell. For example, two of the interpreters you will become very familiar with while using our platform are the %spark.pyspark and %splicemachine interpreters. In the %splicemachine interpreter you can run standard SQL queries and visualize the results in Zeppelin's built in visulaization tools.<br> <br><i>This entire demo was written inside a Zeppelin notebook</i></br><footer>Splice Machine</footer></blockquote><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>MLFlow</span></b><br><br>As a data scientist constantly creating new models and testing new features, it is necessary to effectively track and manage those different ML runs. MLFlow allows you to track entire <code>experiments</code> and individual <code>run</code> parameters and metrics <br>\n     <center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow+ui.png' width='40%' style='z-index:5'></center>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<h2 style='font-size:40px;  font-weight:bold'>How does this work?</h1>\n<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Zeppelin</span></b><br><br>Zeppelin notebooks are a simple, easy and intuitive way to do data science, directly in your browser. Any Spark computations you run inside of the notebook are executed right on your cluster's Spark executors.<br><br>Zeppelin notebooks also make machine learning easier. By using Zeppelin intepreters, you can run different languages inside the same notebook. The language you want to run is signified by a % sign followed by an interpreter name at the top of a cell. For example, two of the interpreters you will become very familiar with while using our platform are the %spark.pyspark and %splicemachine interpreters. In the %splicemachine interpreter you can run standard SQL queries and visualize the results in Zeppelin's built in visulaization tools.<br> <br><i>This entire demo was written inside a Zeppelin notebook</i></br><footer>Splice Machine</footer></blockquote><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>MLFlow</span></b><br><br>As a data scientist constantly creating new models and testing new features, it is necessary to effectively track and manage those different ML runs. MLFlow allows you to track entire <code>experiments</code> and individual <code>run</code> parameters and metrics <br>\n     <center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow+ui.png' width='40%' style='z-index:5'></center>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349918_-617183800",
      "id": "20190221-205016_2016691612",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19350"
    },
    {
      "text": "%md\n<br>\n<center><h1 style='font-size:35px;'>Ready? Let's get started<b style='font-size:35px'>.</b></h1></center>\n## Problem statement:\n### Can we predict the likelihood of fraudulent transactions after training on historical actuals? \n#### We're going to find out using Splice Machine's <code>MLManager</code>\n<br>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br>\n<center><h1 style='font-size:35px;'>Ready? Let's get started<b style='font-size:35px'>.</b></h1></center>\n<h2>Problem statement:</h2>\n<h3>Can we predict the likelihood of fraudulent transactions after training on historical actuals?</h3>\n<h4>We&rsquo;re going to find out using Splice Machine&rsquo;s <code>MLManager</code></h4>\n<br>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349918_2118450320",
      "id": "20190221-205758_1737030690",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19351"
    },
    {
      "text": "%angular\n<h1 style='font-size:30px;font-weight:bold'>Connecting to your database</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:15px'>First, let's establish a connection to your database using Python via our <a href=\"https://www.splicemachine.com/the-splice-machine-native-spark-datasource/\">Native Spark Datasource</a>. We will use the <code>SpliceMLContext</code> to establish our direct connection-- it allows us to do inserts, selects, upserts, updates and many more functions without serialization<footer>Splice Machine</footer></blockquote>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<h1 style='font-size:30px;font-weight:bold'>Connecting to your database</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:15px'>First, let's establish a connection to your database using Python via our <a href=\"https://www.splicemachine.com/the-splice-machine-native-spark-datasource/\">Native Spark Datasource</a>. We will use the <code>SpliceMLContext</code> to establish our direct connection-- it allows us to do inserts, selects, upserts, updates and many more functions without serialization<footer>Splice Machine</footer></blockquote>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349918_1360781608",
      "id": "20190221-210030_1496993386",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19352"
    },
    {
      "title": "Create SpliceMLContext",
      "text": "%spark.pyspark\nfrom splicemachine.spark.context import SpliceMLContext\nsplice = SpliceMLContext(spark)",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1552497349918_767450272",
      "id": "20190221-210148_381545470",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19353"
    },
    {
      "text": "%angular\n<h1 style='font-size:30px;font-weight:bold'>Loading The Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Data Loading</span></b><br><br>Loading data into Splice Machine couldn't be easier, no matter the source. Because we connect directly to our database source, there is no ETL necessary.<footer>Splice Machine</footer></blockquote>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<h1 style='font-size:30px;font-weight:bold'>Loading The Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Data Loading</span></b><br><br>Loading data into Splice Machine couldn't be easier, no matter the source. Because we connect directly to our database source, there is no ETL necessary.<footer>Splice Machine</footer></blockquote>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349919_382348015",
      "id": "20190221-210537_1690726965",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19354"
    },
    {
      "text": "%splicemachine\nset schema cc_fraud;\n\ndrop table if exists cc_fraud_data;\n\ncreate table cc_fraud.cc_fraud_data (\n    time_offset integer,\n    v1 double,\n    v2 double,\n    v3 double,\n    v4 double,\n    v5 double,\n    v6 double,\n    v7 double,\n    v8 double,\n    v9 double,\n    v10 double,\n    v11 double,\n    v12 double,\n    v13 double,\n    v14 double,\n    v15 double,\n    v16 double,\n    v17 double,\n    v18 double,\n    v19 double,\n    v20 double,\n    v21 double,\n    v22 double,\n    v23 double,\n    v24 double,\n    v25 double,\n    v26 double,\n    v27 double,\n    v28 double,\n    amount decimal(10,2),\n    class_result int\n);\n\ncall SYSCS_UTIL.IMPORT_DATA (\n     'cc_fraud',\n     'cc_fraud_data',\n     null,\n     's3a://splice-demo/kaggle-fraud-data/creditcard.csv',\n     ',',\n     null,\n     null,\n     null,\n     null,\n     100000,\n     's3a://splice-demo/kaggle-fraud-data/bad',\n     null, \n     null);\n     \n\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:16:43+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "fontSize": 9,
        "editorHide": false,
        "results": {
          "3": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349919_-848244899",
      "id": "20190221-214247_501044185",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19355"
    },
    {
      "text": "%angular\n<h1 style='font-size:25px;font-weight:bold'>Visualizing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:15px'>Data Visualization</span></b><br><br>Visualizing your data is an extremely important part of machine learning. We can do this in the Splice Machine interpreter via a simple SQL SELECT query. Zeppelin has great built in visualization tools<br><br><i>Helpful Hint: the Splice Machine interpreter can be accessed with %splicemachine. Also ${a=default value} creates an input field in the Splice Machine interpreter.</i> For this demo, we will use a breast cancer dataset which has already been imported into this cluster's Splice Machine Database.<footer>Splice Machine</footer></blockquote>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<h1 style='font-size:25px;font-weight:bold'>Visualizing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:15px'>Data Visualization</span></b><br><br>Visualizing your data is an extremely important part of machine learning. We can do this in the Splice Machine interpreter via a simple SQL SELECT query. Zeppelin has great built in visualization tools<br><br><i>Helpful Hint: the Splice Machine interpreter can be accessed with %splicemachine. Also ${a=default value} creates an input field in the Splice Machine interpreter.</i> For this demo, we will use a breast cancer dataset which has already been imported into this cluster's Splice Machine Database.<footer>Splice Machine</footer></blockquote>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349919_-1905010364",
      "id": "20190221-214509_1072992503",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19356"
    },
    {
      "title": "Huge data imbalance (very little fraud)",
      "text": "%splicemachine\nselect class_result, count(*) from cc_fraud.cc_fraud_data group by class_result",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "colWidth": 4,
        "editorMode": "ace/mode/sql",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "pieChart",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "2": "string",
                      "CLASS_RESULT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349919_-332136255",
      "id": "20190221-215258_31215807",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19357"
    },
    {
      "title": "Fraud txns are on avg more moeny",
      "text": "%splicemachine\nselect class_result, avg(amount) as average from cc_fraud.cc_fraud_data\ngroup by class_result",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:16:01+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 4,
        "editorMode": "ace/mode/sql",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "CLASS_RESULT": "string",
                      "AVERAGE": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "CLASS_RESULT",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "AVERAGE",
                  "index": 1,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349919_2120471231",
      "id": "20190221-215324_1443755169",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19358"
    },
    {
      "title": "Bucketing txn amounts in fraud and non-fraud",
      "text": "%splicemachine\ndrop table if exists cc_fraud.temp;\n\ncreate table cc_fraud.temp as select\nclass_result,\ncase when(amount >= 0 and amount < 100) then 1 end as low,\ncase when(amount >= 100 and amount < 300) then 1 end as middle, \ncase when (amount >= 300) then 1 end as high\nfrom cc_fraud.cc_fraud_data;\n\nselect class_result,\n(cast(count(low) as double))/count(*) as l, \n(cast(count(middle) as double))/count(*) as m, \n(cast(count(high) as double))/count(*) as h \nfrom cc_fraud.temp\ngroup by class_result",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:16:01+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 4,
        "editorMode": "ace/mode/sql",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "2": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "CLASS_RESULT": "string",
                      "L": "string",
                      "M": "string",
                      "H": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": true
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "CLASS_RESULT",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "CLASS_RESULT",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "L",
                  "index": 1,
                  "aggr": "sum"
                },
                {
                  "name": "M",
                  "index": 2,
                  "aggr": "sum"
                },
                {
                  "name": "H",
                  "index": 3,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349920_1330783256",
      "id": "20190221-215557_2017009551",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19359"
    },
    {
      "text": "%angular\n<h1 style='font-size:30px;font-weight:bold'>MLFlow Concepts</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>MLManager</span><br><ul><li>Offers a way to interact with MLFlow directly from your Zeppelin Notebook</li><li>Allows you to use all basic operations to manipulate Experiments and Runs (create, update, delete etc.)</li><li>Accessible from <code>splicemachine.ml.management.MLManager</code></li></ul><br>\n<span style='font-size:20px'>Experiments</span><br><ul><li>MLflow allows you to group runs under experiments, which can be useful for comparing runs intended to tackle a particular task.</li><li>You can use the MLManager class in the Splice Machine Python Package to manipulate experiments</li><li>They are visible in the left sidebar of the MLFlow Tracking UI (visible on port 5001)</li></ul><br>\n<spatn style='font-size:20px'>Runs</span><br><ul><li>MLflow Tracking is organized around the concept of <em>runs</em>, which are executions of some piece of data science code. Each run can record the following information <ul><li>Metrics: model output metrics-- F1 score, AUC, Precision, Recall, R^2 etc. These map strings (\"F1\") to doubles (0.85)</li><li>Parameters: model parameters-- Num Trees, Preprocessing Steps, Regularization etc. These map strings (\"classifier\") to strings (\"DecisionTree\")</li><li>Models: fitted pipelines or models-- you can log models to deploy them to SageMaker later</li><li>Tags: pieces of information association of runs-- project, version, deployable. Maps strings (\"deployable\") to strings (\"true\")</li></ul></li></ul>\n\n<footer>Splice Machine</footer></blockquote>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "<h1 style='font-size:30px;font-weight:bold'>MLFlow Concepts</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>MLManager</span><br><ul><li>Offers a way to interact with MLFlow directly from your Zeppelin Notebook</li><li>Allows you to use all basic operations to manipulate Experiments and Runs (create, update, delete etc.)</li><li>Accessible from <code>splicemachine.ml.management.MLManager</code></li></ul><br>\n<span style='font-size:20px'>Experiments</span><br><ul><li>MLflow allows you to group runs under experiments, which can be useful for comparing runs intended to tackle a particular task.</li><li>You can use the MLManager class in the Splice Machine Python Package to manipulate experiments</li><li>They are visible in the left sidebar of the MLFlow Tracking UI (visible on port 5001)</li></ul><br>\n<spatn style='font-size:20px'>Runs</span><br><ul><li>MLflow Tracking is organized around the concept of <em>runs</em>, which are executions of some piece of data science code. Each run can record the following information <ul><li>Metrics: model output metrics-- F1 score, AUC, Precision, Recall, R^2 etc. These map strings (\"F1\") to doubles (0.85)</li><li>Parameters: model parameters-- Num Trees, Preprocessing Steps, Regularization etc. These map strings (\"classifier\") to strings (\"DecisionTree\")</li><li>Models: fitted pipelines or models-- you can log models to deploy them to SageMaker later</li><li>Tags: pieces of information association of runs-- project, version, deployable. Maps strings (\"deployable\") to strings (\"true\")</li></ul></li></ul>\n\n<footer>Splice Machine</footer></blockquote>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349920_661538675",
      "id": "20190221-220244_233467404",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19360"
    },
    {
      "text": "%md\n### Let's create our <code>MLManager</code>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:17:28+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Let&rsquo;s create our <code>MLManager</code></h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349920_628391233",
      "id": "20190221-220338_1272123413",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19361"
    },
    {
      "text": "%spark.pyspark\nfrom splicemachine.ml.management import MLManager\nmanager = MLManager()\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:18:09+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349920_215099655",
      "id": "20190221-220403_35522277",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19362"
    },
    {
      "text": "%md\n### Let's import our data into a Spark DataFrame using our <code>SpliceMLContext</code>\n#### Now is also a good time to create our MLFlow <code>Experiment</code> which we will call fraud_demo\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Let&rsquo;s import our data into a Spark DataFrame using our <code>SpliceMLContext</code></h3>\n<h4>Now is also a good time to create our MLFlow <code>Experiment</code> which we will call fraud_demo</h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349920_-554285043",
      "id": "20190221-215904_402754027",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19363"
    },
    {
      "title": "Import data and start experiment",
      "text": "%spark.pyspark\n#create our MLFlow experiment\nmanager.create_experiment('fraud-demo')\nmanager.set_active_experiment('fraud-demo')\ndf = splice.df(\"SELECT * FROM cc_fraud.cc_fraud_data\")\ndf = df.withColumnRenamed('CLASS_RESULT', 'label')\nz.show(df)",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:18:28+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TIME_OFFSET": "string",
                      "V1": "string",
                      "V2": "string",
                      "V3": "string",
                      "V4": "string",
                      "V5": "string",
                      "V6": "string",
                      "V7": "string",
                      "V8": "string",
                      "V9": "string",
                      "V10": "string",
                      "V11": "string",
                      "V12": "string",
                      "V13": "string",
                      "V14": "string",
                      "V15": "string",
                      "V16": "string",
                      "V17": "string",
                      "V18": "string",
                      "V19": "string",
                      "V20": "string",
                      "V21": "string",
                      "V22": "string",
                      "V23": "string",
                      "V24": "string",
                      "V25": "string",
                      "V26": "string",
                      "V27": "string",
                      "V28": "string",
                      "AMOUNT": "string",
                      "label": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349921_-817556866",
      "id": "20190221-220151_1696199585",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19364"
    },
    {
      "title": "View experiment in the MLFlow UI",
      "text": "%md\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_UI_fraud.png' width='60%' style='z-index:5'></center>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_UI_fraud.png' width='60%' style='z-index:5'></center>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349922_625854026",
      "id": "20190224-235733_347087097",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19365"
    },
    {
      "text": "%md\n# Ben's run\n### Ben, our first Data Scientist, has an idea for the steps to build this model. He will create a <code>run</code> and log his name as to keep track of what he did\n#### <code>manager.create_new_run(user_id='Ben')</code>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Ben&rsquo;s run</h1>\n<h3>Ben, our first Data Scientist, has an idea for the steps to build this model. He will create a <code>run</code> and log his name as to keep track of what he did</h3>\n<h4><code>manager.create_new_run(user_id=&lsquo;Ben&rsquo;)</code></h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349922_1994474382",
      "id": "20190222-175425_1826150761",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19366"
    },
    {
      "text": "%md\n### If you navigate to port <code>5001</code> you will now see the fraud-demo experiment, but there is nothing in that experiment yet. Let's start our first <code>run</code> and track our progress\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>If you navigate to port <code>5001</code> you will now see the fraud-demo experiment, but there is nothing in that experiment yet. Let&rsquo;s start our first <code>run</code> and track our progress</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349923_1782513378",
      "id": "20190221-220916_1914446989",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19367"
    },
    {
      "text": "%md\n### Because we have so few fraud examples, we need to oversample our fraudulent transactions and undersample the non-fraud transactions",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Because we have so few fraud examples, we need to oversample our fraudulent transactions and undersample the non-fraud transactions</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349923_-1933306877",
      "id": "20190221-221315_2131975866",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19368"
    },
    {
      "title": "First run (oversample data)",
      "text": "%spark.pyspark\n#start our first MLFlow run\nmanager.create_new_run(user_id='Ben')\n#oversample fraud data 2X\nfraud_data = df.filter('label=1')\nprint('fraud data has {} rows'.format(fraud_data.count()))\nfraud_data = fraud_data.unionAll(fraud_data)\nprint('fraud data has {} rows'.format(fraud_data.count()))\n#log oversample rate\nmanager.log_param('oversample','2X')\n\n#undersample non-fraud data 1:1\nnon_fraud_df = df.filter('label=0')\n\nratio = float(fraud_data.count())/float(df.count())\nsampled_non_fraud = non_fraud_df.sample(withReplacement=False,fraction=ratio)\n\nfinal_df = fraud_data.unionAll(sampled_non_fraud)\n#log undersample ratio\nmanager.log_param('undersample', '1:1')\nz.show(final_df)",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TIME_OFFSET": "string",
                      "V1": "string",
                      "V2": "string",
                      "V3": "string",
                      "V4": "string",
                      "V5": "string",
                      "V6": "string",
                      "V7": "string",
                      "V8": "string",
                      "V9": "string",
                      "V10": "string",
                      "V11": "string",
                      "V12": "string",
                      "V13": "string",
                      "V14": "string",
                      "V15": "string",
                      "V16": "string",
                      "V17": "string",
                      "V18": "string",
                      "V19": "string",
                      "V20": "string",
                      "V21": "string",
                      "V22": "string",
                      "V23": "string",
                      "V24": "string",
                      "V25": "string",
                      "V26": "string",
                      "V27": "string",
                      "V28": "string",
                      "AMOUNT": "string",
                      "label": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349923_1278489956",
      "id": "20190221-221248_1914455157",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19369"
    },
    {
      "text": "%md\n## Continuing through our feature engineering Pipeline:\n### Now we create a <code>Pipeline</code> to normalize our continuous features using the <code>StandardScaler</code> and create our feature vector with the <code>VectorAssembler</code>\n#### We can be sure to log the steps we use in our preprocessing steps\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Continuing through our feature engineering Pipeline:</h2>\n<h3>Now we create a <code>Pipeline</code> to normalize our continuous features using the <code>StandardScaler</code> and create our feature vector with the <code>VectorAssembler</code></h3>\n<h4>We can be sure to log the steps we use in our preprocessing steps</h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349925_-857472976",
      "id": "20190221-221607_550639120",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19370"
    },
    {
      "title": "Scale features and create feature-vector",
      "text": "%spark.pyspark\nfrom pyspark.ml.feature import StandardScaler, VectorAssembler\nfrom pyspark.ml import Pipeline,PipelineModel\nfeature_cols = df.columns\nfeature_cols.remove(\"label\")\nfeature_cols.remove('TIME_OFFSET')\nprint(\"Features: \" + str(feature_cols))\n\nassembler = VectorAssembler(inputCols=feature_cols, outputCol='features')\nscaler = StandardScaler(inputCol=\"features\", outputCol='scaledFeatures')\nstages = [assembler, scaler]\n#log preprocessing steps\nmanager.log_param('preprocessing','Pipeline[VectorAssembler, StandardScaler]')\n#log features that we will use\nmanager.log_param('features',str(feature_cols))\npipeline = Pipeline(stages=stages)\nz.show(pipeline.fit(df).transform(df))",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TIME_OFFSET": "string",
                      "V1": "string",
                      "V2": "string",
                      "V3": "string",
                      "V4": "string",
                      "V5": "string",
                      "V6": "string",
                      "V7": "string",
                      "V8": "string",
                      "V9": "string",
                      "V10": "string",
                      "V11": "string",
                      "V12": "string",
                      "V13": "string",
                      "V14": "string",
                      "V15": "string",
                      "V16": "string",
                      "V17": "string",
                      "V18": "string",
                      "V19": "string",
                      "V20": "string",
                      "V21": "string",
                      "V22": "string",
                      "V23": "string",
                      "V24": "string",
                      "V25": "string",
                      "V26": "string",
                      "V27": "string",
                      "V28": "string",
                      "AMOUNT": "string",
                      "label": "string",
                      "features": "string",
                      "scaledFeatures": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349925_-1431465159",
      "id": "20190222-174854_426132548",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19371"
    },
    {
      "text": "%md\n### Now Ben can train and run his model and view the results using our <code>SpliceBinaryClassificationEvaluator</code> and log the results to MLFlow\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Now Ben can train and run his model and view the results using our <code>SpliceBinaryClassificationEvaluator</code> and log the results to MLFlow</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349926_-1205289368",
      "id": "20190222-175320_413991391",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19372"
    },
    {
      "text": "%spark.pyspark\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom splicemachine.ml.utilities import SpliceBinaryClassificationEvaluator\nimport time\n\nevaluator = SpliceBinaryClassificationEvaluator(spark)\nfirst = len(feature_cols)\nhidden = first/2\noutput = 2\nlayers = [first,hidden,output]\nnn = MultilayerPerceptronClassifier(maxIter=100, layers=layers, blockSize=64, seed=5724, featuresCol='scaledFeatures')\nmanager.log_param('classifier', 'neural network')\nmanager.log_param('maxIter', '100')\nmanager.log_param('layers', '[{first}, {hidden}, 2]'.format(first=first,hidden=hidden))\nmanager.log_param('blockSize', '64')\n\ndf = df.repartition(50)\ntrain, test = df.randomSplit([0.8,0.2])\nt0 = time.time()\nstages.append(nn)\nfull_pipeline = Pipeline(stages=stages)\nmodel = full_pipeline.fit(train)\ntime_taken = time.time() - t0\nprint(\"Model took: \" + str(time_taken) + \" seconds to train\")\n#make predictions\npredictions = model.transform(test)\n\nevaluator.input(predictions)\nz.show(evaluator.get_results())\n\n#log how long the model took\nmanager.log_metric('time',time_taken)\n#log metrics for reference\nvals = evaluator.get_results('dict')\nfor key in vals:\n    manager.log_metric(key, vals[key])\n    ",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TPR": "string",
                      "SPC": "string",
                      "PPV": "string",
                      "NPV": "string",
                      "FPR": "string",
                      "FDR": "string",
                      "FNR": "string",
                      "ACC": "string",
                      "F1": "string",
                      "MCC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "TPR",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "SPC",
                  "index": 1,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349926_-1571120818",
      "id": "20190222-175754_821442579",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19373"
    },
    {
      "title": "View run and metrics in UI",
      "text": "%md\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_ben_run.png' width='60%' style='z-index:5'></center>",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_ben_run.png' width='60%' style='z-index:5'></center>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349927_-1727005719",
      "id": "20190224-235325_264072324",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19374"
    },
    {
      "text": "%md\n### That model looks pretty accurate. Before moving forward, though, it's important to make sure that the model is generalizable to unbalanced data since it was trained on balanced data\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>That model looks pretty accurate. Before moving forward, though, it&rsquo;s important to make sure that the model is generalizable to unbalanced data since it was trained on balanced data</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349927_-1005263803",
      "id": "20190222-181155_2101609971",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19375"
    },
    {
      "title": "Test on unbalanced data",
      "text": "%spark.pyspark\n#pull in full dataset\nnew_df = splice.df('select * from cc_fraud.cc_fraud_data')\nnew_df = new_df.withColumnRenamed('CLASS_RESULT', 'label')\n\n#transform and run model on new dataframe\nnew_predictions = model.transform(new_df)\n\nnew_eval = SpliceBinaryClassificationEvaluator(spark)\nnew_eval.input(new_predictions)\nz.show(new_eval.get_results())",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TPR": "string",
                      "SPC": "string",
                      "PPV": "string",
                      "NPV": "string",
                      "FPR": "string",
                      "FDR": "string",
                      "FNR": "string",
                      "ACC": "string",
                      "F1": "string",
                      "MCC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349927_1517893216",
      "id": "20190222-181323_1348786976",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19376"
    },
    {
      "text": "%md\n## Great! Now we know that our model is not overfit and can be used in the future.\n### Let's save the model to both s3 and as an MLFlow artifact, which we can later deploy to SageMaker for realtime use\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Great! Now we know that our model is not overfit and can be used in the future.</h2>\n<h3>Let&rsquo;s save the model to both s3 and as an MLFlow artifact, which we can later deploy to SageMaker for realtime use</h3>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349927_2121787245",
      "id": "20190222-183932_1053861426",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19377"
    },
    {
      "title": "Save pipeline and model",
      "text": "%spark.pyspark\n#save the pipeline and model to s3\nmodel.save('s3a://splice-demo/fraudDemoPipelineModel')\n#save model to mlflow for deployment\nmanager.log_spark_model(model)",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:20:45+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1552497349928_1550514210",
      "id": "20190222-184613_100010380",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19378"
    },
    {
      "text": "%md\n## Amy's run\n### Ben's run is saved in S3 and MLFlow and ready to be used, but Amy thinks she can build a stronger, quicker model. Amy will reimport the data and create a new Pipeline, by oversampling at a <code>1.5X</code> rate and using a <code>LogisticRegression</code> model. \n#### She will start a new <code>run</code> with her name and keep track of her steps as well\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Amy&rsquo;s run</h2>\n<h3>Ben&rsquo;s run is saved in S3 and MLFlow and ready to be used, but Amy thinks she can build a stronger, quicker model. Amy will reimport the data and create a new Pipeline, by oversampling at a <code>1.5X</code> rate and using a <code>LogisticRegression</code> model.</h3>\n<h4>She will start a new <code>run</code> with her name and keep track of her steps as well</h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349928_1480320843",
      "id": "20190222-193241_1803857899",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19379"
    },
    {
      "title": "Import data and under/over sample",
      "text": "%spark.pyspark\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.feature import StandardScaler, VectorAssembler\nfrom pyspark.ml import Pipeline,PipelineModel\n\n#create new run\nmanager.create_new_run(user_id='Amy')\ndf = splice.df(\"SELECT * FROM cc_fraud.cc_fraud_data\")\ndf = df.withColumnRenamed('CLASS_RESULT', 'label')\n\n\n#oversample fraud data 1.5X\nfraud_data = df.filter('label=1')\nprint('fraud data has {} rows'.format(fraud_data.count()))\n#sample half the data\nfraud_ratio = 0.5\nhalf_fraud_data = fraud_data.sample(withReplacement=False,fraction=fraud_ratio)\n#1.5X as many rows\nfraud_data = fraud_data.unionAll(half_fraud_data)\nprint('fraud data has {} rows'.format(fraud_data.count()))\n#log oversample rate\nmanager.log_param('oversample','1.5X')\n\n#undersample non-fraud data 1:1\nnon_fraud_df = df.filter('label=0')\n\nratio = float(fraud_data.count())/float(df.count())\nsampled_non_fraud = non_fraud_df.sample(withReplacement=False,fraction=ratio)\n\nfinal_df = fraud_data.unionAll(sampled_non_fraud)\n#log undersample ratio\nmanager.log_param('undersample', '1:1')",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "fraud data has 492 rows\nfraud data has 731 rows\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349928_-1089419295",
      "id": "20190222-193632_1641399055",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19380"
    },
    {
      "title": "Scale and vectorize features",
      "text": "%spark.pyspark\n#feature engineering\nfeature_cols = df.columns\nfeature_cols.remove(\"label\")\nprint(\"Features: \" + str(feature_cols))\n\n#feature vector and scale features\nassembler = VectorAssembler(inputCols=feature_cols, outputCol='features')\nscaler = StandardScaler(inputCol=\"features\", outputCol='scaledFeatures')\nstages = [assembler, scaler]\n#log preprocessing steps\nmanager.log_param('preprocessing','Pipeline[VectorAssembler, StandardScaler]')\n#log features that we will use\nfor feature,i in zip(feature_cols,range(len(feature_cols))):\n    manager.log_param('feature {}'.format(i),feature)",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Features: ['TIME_OFFSET', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'AMOUNT']\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349928_1696011071",
      "id": "20190222-210406_38974439",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19381"
    },
    {
      "title": "Model training and testing",
      "text": "%spark.pyspark\n#build and evaluate model\nevaluator = SpliceBinaryClassificationEvaluator(spark)\nlr = LogisticRegression(featuresCol='scaledFeatures')\nmanager.log_param('classifier', 'logistic regression')\nstages.append(lr)\n\ndf = df.repartition(50)\ntrain, test = df.randomSplit([0.8,0.2])\nt0 = time.time()\nfull_pipeline = Pipeline(stages=stages)\nmodel = full_pipeline.fit(train)\ntime_taken = time.time() - t0\nprint(\"Model took: \" + str(time_taken) + \" seconds to train\")\n#make predictions\npredictions = model.transform(test)\n\nevaluator.input(predictions)\nz.show(evaluator.get_results())\n\n#log how long the model took\nmanager.log_metric('time',time_taken)\n#log metrics for reference\nvals = evaluator.get_results('dict')\nfor key in vals:\n    manager.log_metric(key, vals[key])",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TPR": "string",
                      "SPC": "string",
                      "PPV": "string",
                      "NPV": "string",
                      "FPR": "string",
                      "FDR": "string",
                      "FNR": "string",
                      "ACC": "string",
                      "F1": "string",
                      "MCC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349928_2046147164",
      "id": "20190222-205749_1956591460",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19382"
    },
    {
      "title": "Test on unbalanced data",
      "text": "%spark.pyspark\n#pull in full dataset\nnew_df = splice.df('select * from cc_fraud.cc_fraud_data')\nnew_df = new_df.withColumnRenamed('CLASS_RESULT', 'label')\n\n#transform and run model on new dataframe\nnew_predictions = model.transform(new_df)\n\nnew_eval = SpliceBinaryClassificationEvaluator(spark)\nnew_eval.input(new_predictions)\nz.show(new_eval.get_results())",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TPR": "string",
                      "SPC": "string",
                      "PPV": "string",
                      "NPV": "string",
                      "FPR": "string",
                      "FDR": "string",
                      "FNR": "string",
                      "ACC": "string",
                      "F1": "string",
                      "MCC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349929_2125863111",
      "id": "20190222-210934_1084541625",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19383"
    },
    {
      "text": "%md\n## Amy can now go to the MLFlow UI and compare her results to Ben's\n### Amy's run _was_ faster, but the accuracy didn't hold up and the False Positive Rate (FPR) was too high for fraud prediction\n#### Amy will save her run to S3 for future testing, but won't log it to MLFlow (yet)\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_both_runs.png' width='60%' style='z-index:5'></center>\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Amy can now go to the MLFlow UI and compare her results to Ben&rsquo;s</h2>\n<h3>Amy&rsquo;s run <em>was</em> faster, but the accuracy didn&rsquo;t hold up and the False Positive Rate (FPR) was too high for fraud prediction</h3>\n<h4>Amy will save her run to S3 for future testing, but won&rsquo;t log it to MLFlow (yet)</h4>\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_both_runs.png' width='60%' style='z-index:5'></center>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349929_-486775130",
      "id": "20190222-211416_1988660609",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19384"
    },
    {
      "text": "%md\n## You can also compare multiple runs side by side\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_metrics_compare.png' width='60%' style='z-index:5'></center>\n\n\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>You can also compare multiple runs side by side</h2>\n<center><img class='log' src='https://s3.amazonaws.com/splice-demo/mlflow_ui_metrics_compare.png' width='60%' style='z-index:5'></center>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349929_-2091913763",
      "id": "20190225-000336_853892566",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19385"
    },
    {
      "title": "Save model to S3",
      "text": "%spark.pyspark\nmodel.save('s3a://splice-demo/fraudDemoPipelineLogisticRegression')",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1552497349929_-864420619",
      "id": "20190222-211359_942881898",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19386"
    },
    {
      "text": "%md\n### A few days later, more labeled data comes in\n#### Ben or Amy can easily pull the model in from S3 and run the new data through it to test for sustained accuracy\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>A few days later, more labeled data comes in</h3>\n<h4>Ben or Amy can easily pull the model in from S3 and run the new data through it to test for sustained accuracy</h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349929_-354978732",
      "id": "20190222-211817_1781331947",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19387"
    },
    {
      "text": "%spark.pyspark\n#load the fraud data from splicemachine\nnew_data = splice.df('select * from cc_fraud.cc_fraud_data')\n#load NN model from s3\nmod = PipelineModel.load('s3a://splice-demo/fraudDemoPipelineModel')\nnew_data = new_data.withColumnRenamed('CLASS_RESULT', 'label')\n\nprint('running model...')\npreds = mod.transform(new_data)\neval = SpliceBinaryClassificationEvaluator(spark)\neval.input(preds)\nz.show(eval.get_results())",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "editorHide": false,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TPR": "string",
                      "SPC": "string",
                      "PPV": "string",
                      "NPV": "string",
                      "FPR": "string",
                      "FDR": "string",
                      "FNR": "string",
                      "ACC": "string",
                      "F1": "string",
                      "MCC": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1552497349930_-1980704921",
      "id": "20190222-211919_279501003",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19388"
    },
    {
      "text": "%md\n## Model looks good! We can keep using it without fear of fraud\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Model looks good! We can keep using it without fear of fraud</h2>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349930_1140697334",
      "id": "20190222-212726_95732512",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19389"
    },
    {
      "text": "%md\n### Just like that, multiple users can create runs, test their code and compare results.\n#### For more information on Splice Machine and what we offer, feel free to read more [here](www.splicemachine.com)\n",
      "user": "splice",
      "dateUpdated": "2019-03-13T17:15:49+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Just like that, multiple users can create runs, test their code and compare results.</h3>\n<h4>For more information on Splice Machine and what we offer, feel free to read more <a href=\"www.splicemachine.com\">here</a></h4>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1552497349930_-1285797528",
      "id": "20190222-211633_1619328176",
      "dateCreated": "2019-03-13T17:15:49+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:19390"
    }
  ],
  "name": "ML Manager / ML Manager Example",
  "id": "2E6E4ECVX",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": [],
    "angular:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}
