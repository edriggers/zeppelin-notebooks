{
  "paragraphs": [
    {
      "title": "Transactions ",
      "text": "%md\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\n# Transactions with Spark and JDBC\nThis notebook introduces using Spark and Scala to programmatically interact with Splice Machine via a JDBC connection. In this notebook, we\u0027ll:\n\n1. *Run setup code to create our variables and define a simple Spark procedure named `checkBalance`.*\n2. *Use JDBC calls to set and check values from the database.*\n3. *Show the use of `commit` and `rollback` to control transactional persistence of our updates.*\n\u003cbr /\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:08:58.775",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "title": false,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003ch1\u003eTransactions with Spark and JDBC\u003c/h1\u003e\n\u003cp\u003eThis notebook introduces using Spark and Scala to programmatically interact with Splice Machine via a JDBC connection. In this notebook, we\u0026rsquo;ll:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cem\u003eRun setup code to create our variables and define a simple Spark procedure named \u003ccode\u003echeckBalance\u003c/code\u003e.\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eUse JDBC calls to set and check values from the database.\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eShow the use of \u003ccode\u003ecommit\u003c/code\u003e and \u003ccode\u003erollback\u003c/code\u003e to control transactional persistence of our updates.\u003c/em\u003e\u003cbr/\u003e\u003cbr /\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395325471_793238414",
      "id": "20180115-164647_1759951771",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Run Setup Code and Define our Procedure\n\nFirst, we configure the JDBC URL we\u0027ll use to connect to your Splice Machine database:",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:08:55.914",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eRun Setup Code and Define our Procedure\u003c/h2\u003e\n\u003cp\u003eFirst, we configure the JDBC URL we\u0026rsquo;ll use to connect to your Splice Machine database:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542850708004_-1697364192",
      "id": "20181121-173828_564206103",
      "dateCreated": "2018-11-21 17:38:28.004",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nval localJDBCURL \u003d \"\"\"jdbc:splice://localhost:1527/splicedb;user\u003dsplice;password\u003dadmin\"\"\"\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:23:36.665",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395325471_1357966940",
      "id": "20180828-115218_491973685",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cbr /\u003e\nNext, we define a simple procedure, `checkBalance` that checks and *pretty-prints* the current balance for a supplier:",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:09:05.591",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr /\u003e\n\u003cp\u003eNext, we define a simple procedure, \u003ccode\u003echeckBalance\u003c/code\u003e that checks and \u003cem\u003epretty-prints\u003c/em\u003e the current balance for a supplier:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542850779698_-1175907831",
      "id": "20181121-173939_1123275261",
      "dateCreated": "2018-11-21 17:39:39.699",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Simple Function to Pretty Print Balance",
      "text": "%spark\nimport java.sql.{DriverManager,Connection}\nvar conn \u003d DriverManager.getConnection(localJDBCURL)\nconn.setAutoCommit(false)\nvar statement \u003d conn.createStatement()\n\ndef checkBalance(suppKey: Integer) : Unit \u003d {\n    var resSet \u003d statement.executeQuery(\"SELECT S_ACCTBAL FROM DEV2.SUPPLIER WHERE S_SUPPKEY \u003d \" + suppKey.toString())\n    while ( resSet.next() ) {\n        var bl \u003d resSet.getString(\"S_ACCTBAL\")\n        println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current account balance: \" + bl + \" \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    }\n}\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:23:39.694",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "fontSize": 9.0,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395325472_1190484058",
      "id": "20180115-164841_170157787",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNow we can check the balance easily at any time with the checkBalance call, passing in the supply key as a parameter:",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:09:13.903",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow we can check the balance easily at any time with the checkBalance call, passing in the supply key as a parameter:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395325472_1299881130",
      "id": "20180115-165029_1635005335",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\ncheckBalance(6517)",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:23:48.794",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 88.0,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395325473_-1870806278",
      "id": "20180115-165115_1164524303",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nOur setup code created two useful variables we can now employ:\n\n\u003ctable class\u003d\"splicezepNoBorder\"\u003e\n   \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd class\u003d\"CodeFont\"\u003estatement\u003c/td\u003e\n          \u003ctd\u003eThe standard JDBC Statement object, on which we run functions such as `executeUpdate`.\n      \u003c/tr\u003e\n      \u003ctr style\u003d\"background-color: transparent;\"\u003e\n          \u003ctd class\u003d\"CodeFont\"\u003econn\u003c/td\u003e\n          \u003ctd style\u003d\"background-color: transparent;\" \u003eA standard JDBC Connection object, on which run `commit` and `rollback`.\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\nThe first example shows an update statement which, upon committing, retains the value to which it is set.\n\n## Committing a Transaction",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:10:39.621",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eOur setup code created two useful variables we can now employ:\u003c/p\u003e\n\u003ctable class\u003d\"splicezepNoBorder\"\u003e\n   \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd class\u003d\"CodeFont\"\u003estatement\u003c/td\u003e\n          \u003ctd\u003eThe standard JDBC Statement object, on which we run functions such as `executeUpdate`.\n      \u003c/tr\u003e\n      \u003ctr style\u003d\"background-color: transparent;\"\u003e\n          \u003ctd class\u003d\"CodeFont\"\u003econn\u003c/td\u003e\n          \u003ctd style\u003d\"background-color: transparent;\" \u003eA standard JDBC Connection object, on which run `commit` and `rollback`.\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe first example shows an update statement which, upon committing, retains the value to which it is set.\u003c/p\u003e\n\u003ch2\u003eCommitting a Transaction\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395325473_-1804326062",
      "id": "20180115-165133_1245971625",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Transaction Commit Example",
      "text": "%spark\nstatement.executeUpdate(\"update DEV2.SUPPLIER SET S_ACCTBAL \u003d 10000 WHERE S_SUPPKEY \u003d 6517\");\ncheckBalance(6517);\nconn.commit();\ncheckBalance(6517);",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:23:56.923",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": false,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395325474_808184951",
      "id": "20180115-165153_163460075",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\u003cbr /\u003e\nBut if we choose to do a rollback, the value returns to the previous value before the transactional context, as shown in the next example.\n\n## Rolling Back a Transaction",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:10:05.466",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr /\u003e\n\u003cp\u003eBut if we choose to do a rollback, the value returns to the previous value before the transactional context, as shown in the next example.\u003c/p\u003e\n\u003ch2\u003eRolling Back a Transaction\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395325474_1936619764",
      "id": "20180115-165208_1601331583",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Transaction Rollback Example",
      "text": "%spark\nstatement.executeUpdate(\"update DEV2.SUPPLIER SET S_ACCTBAL \u003d 0 WHERE S_SUPPKEY \u003d 6517\")\ncheckBalance(6517);\nconn.rollback();\ncheckBalance(6517);\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:24:10.365",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": false,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395325474_1159942425",
      "id": "20180115-165244_2028152757",
      "dateCreated": "2018-11-16 11:08:45.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\nThis was a simple demonstration of transactional commit and rollback, even from within Scala code.  Later on we\u0027ll get more involved with Spark libraries using the Native Spark Datasource.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 17:24:15.496",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis was a simple demonstration of transactional commit and rollback, even from within Scala code. Later on we\u0026rsquo;ll get more involved with Spark libraries using the Native Spark Datasource.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543771216564_1664455240",
      "id": "20181202-172016_778467171",
      "dateCreated": "2018-12-02 17:20:16.564",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\n\nThe next notebook in this class introduces you to [*Using our Native Spark DataSource*](/#/notebook/2DW6E5Z1X) to work with your database.",
      "user": "anonymous",
      "dateUpdated": "2018-12-06 22:33:12.967",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eThe next notebook in this class introduces you to \u003ca href\u003d\"/#/notebook/2DW6E5Z1X\"\u003e\u003cem\u003eUsing our Native Spark DataSource\u003c/em\u003e\u003c/a\u003e to work with your database.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395325475_-533431393",
      "id": "20180122-173624_509126525",
      "dateCreated": "2018-11-16 11:08:45.000",
      "dateStarted": "2018-12-06 22:33:04.703",
      "dateFinished": "2018-12-06 22:33:08.196",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training / For Developers, Part II / f. Transactions with Spark and JDBC",
  "id": "2DUKWWK84",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}
