{
  "paragraphs": [
    {
      "title": "Tutorial Data Schema - TPC-H",
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n# The Life of a Query\n\nThis notebook walks you through running and optimizing a query in Splice Machine, using the TPC-H benchmarking data that we imported into your database at the beginning of this class. We explore these topics:\n\n* *Examining a Query Execution Plan*\n* *Informing the Optimizer*\n* *Adding Indexes to the Database*\n* *A Glimpse at Splice Machine Benchmark Results*\n* *Running Queries*\n\nNote - this notebook assumes that you have already loaded the TPCH-1 data with the earlier notebook run.\n\n<p class=\"noteIcon\">The code paragraphs in this notebook use the <em>%splicemachine</em> interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.</p>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:32:54.276",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>The Life of a Query</h1>\n<p>This notebook walks you through running and optimizing a query in Splice Machine, using the TPC-H benchmarking data that we imported into your database at the beginning of this class. We explore these topics:</p>\n<ul>\n  <li><em>Examining a Query Execution Plan</em></li>\n  <li><em>Informing the Optimizer</em></li>\n  <li><em>Adding Indexes to the Database</em></li>\n  <li><em>A Glimpse at Splice Machine Benchmark Results</em></li>\n  <li><em>Running Queries</em></li>\n</ul>\n<p>Note - this notebook assumes that you have already loaded the TPCH-1 data with the earlier notebook run.</p>\n<p class=\"noteIcon\">The code paragraphs in this notebook use the <em>%splicemachine</em> interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076251_1367215274",
      "id": "20180113-213553_290656873",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Order Priority Checking Query (Q4)",
      "text": "%md\n## Examining a Query Execution Plan\n\nIn the next few sections of this notebook, we'll examine execution plans for TPC-H Query 4, which is known as the <em>Order Priority Checking Query</em>. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.\n\nSplice Machine generates an execution plan prior to running your query. You can use the `explain` command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries. \n<p class=\"noteIcon\">The <a href=\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target=\"_blank\">Reading Explain Plans</a> topic in our documentation describes how to read explain plans.</p>\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 04:56:33.152",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Examining a Query Execution Plan</h2>\n<p>In the next few sections of this notebook, we&rsquo;ll examine execution plans for TPC-H Query 4, which is known as the <em>Order Priority Checking Query</em>. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.</p>\n<p>Splice Machine generates an execution plan prior to running your query. You can use the <code>explain</code> command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries.<br/><p class=\"noteIcon\">The <a href=\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target=\"_blank\">Reading Explain Plans</a> topic in our documentation describes how to read explain plans.</p></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076257_382300291",
      "id": "20180122-173257_1568071437",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Dropping Statistics\n\nYou'll recall we collected statistics when we loaded the TPCH-1 data.  But what if we hadn't?  We can see the effect of this by first dropping the statistics:",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:32:58.948",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Dropping Statistics</h3>\n<p>You&rsquo;ll recall we collected statistics when we loaded the TPCH-1 data. But what if we hadn&rsquo;t? We can see the effect of this by first dropping the statistics:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543766382806_321064611",
      "id": "20181202-155942_923562859",
      "dateCreated": "2018-12-02 15:59:42.806",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCALL SYSCS_UTIL.DROP_SCHEMA_STATISTICS('DEV2');",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:32:45.025",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1543766154524_1140754655",
      "id": "20181202-155554_1611635049",
      "dateCreated": "2018-12-02 15:55:54.524",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNow when we run explain on Query 4, we'll see that the row counts are back to approximated estimates \n\n(for example, recall that the LINEITEM table has about 6M rows - compare that to the bottom scannedRows count in the explain output):\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:33:02.145",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Now when we run explain on Query 4, we&rsquo;ll see that the row counts are back to approximated estimates </p>\n<p>(for example, recall that the LINEITEM table has about 6M rows - compare that to the bottom scannedRows count in the explain output):</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543766455817_-433475846",
      "id": "20181202-160055_419066069",
      "dateCreated": "2018-12-02 16:00:55.817",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain  select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tDEV2.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tDEV2.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:33:11.013",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "fontSize": 9.0,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076257_-893719305",
      "id": "20180201-123806_1712783827",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Splice Machine Optimizer",
      "text": "%md\n## Optimizing Query Performance\n\nIn this section we'll look at optimizing the execution plan for TPCH Query 4. We'll:\n\n* Collect Statistics to Inform the Optimizer\n* Add Indexes to Further Optimize the Plan\n* Compare Execution Plans\n\nWhen creating a plan for a query, our optimizer performs a number of important and valuable actions, including:\n\n* It creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.\n* When joining tables, the optimizer evaluates the best *join order* and the *join strategy* to use.\n* The optimizer unrolls subqueries to reduce processing time\n\nSince there often are different options available (whether or not to use an index, which join order, etc.), we evaluate the different possibilities, score them, then choose the best we find.  Of course coming up with good scores requires good knowledge about your database, and that's where the statistics collection comes in.\n\nYou use our `analyze` command to collect statistics from your database, which the optimizer uses when planning the execution of a query.\n\n<p class=\"noteIcon\">Cost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.</p>\n\nCollecting these metrics can be extremely expensive but if approximate results are acceptable (which is typically the case with query optimization), there is a class of specialized algorithms, called streaming algorithms, or *sketches*, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the <a href=\"https://datasketches.github.io/docs/TheChallenge.html\" target=\"_blank\">Yahoo Sketches Library</a> for its statistics gathering. \n\n### Collect Statistics\nOur first optimization is to collect statistics to inform the optimizer about our database. We use our `analyze` command to collect statistics on a schema (or table). This process requires a couple minutes.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:37:10.654",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Optimizing Query Performance</h2>\n<p>In this section we&rsquo;ll look at optimizing the execution plan for TPCH Query 4. We&rsquo;ll:</p>\n<ul>\n  <li>Collect Statistics to Inform the Optimizer</li>\n  <li>Add Indexes to Further Optimize the Plan</li>\n  <li>Compare Execution Plans</li>\n</ul>\n<p>When creating a plan for a query, our optimizer performs a number of important and valuable actions, including:</p>\n<ul>\n  <li>It creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.</li>\n  <li>When joining tables, the optimizer evaluates the best <em>join order</em> and the <em>join strategy</em> to use.</li>\n  <li>The optimizer unrolls subqueries to reduce processing time</li>\n</ul>\n<p>Since there often are different options available (whether or not to use an index, which join order, etc.), we evaluate the different possibilities, score them, then choose the best we find. Of course coming up with good scores requires good knowledge about your database, and that&rsquo;s where the statistics collection comes in.</p>\n<p>You use our <code>analyze</code> command to collect statistics from your database, which the optimizer uses when planning the execution of a query.</p>\n<p class=\"noteIcon\">Cost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.</p>\n<p>Collecting these metrics can be extremely expensive but if approximate results are acceptable (which is typically the case with query optimization), there is a class of specialized algorithms, called streaming algorithms, or <em>sketches</em>, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the <a href=\"https://datasketches.github.io/docs/TheChallenge.html\" target=\"_blank\">Yahoo Sketches Library</a> for its statistics gathering. </p>\n<h3>Collect Statistics</h3>\n<p>Our first optimization is to collect statistics to inform the optimizer about our database. We use our <code>analyze</code> command to collect statistics on a schema (or table). This process requires a couple minutes.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_2094574479",
      "id": "20180115-053838_672371514",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Collect Statistics",
      "text": "%splicemachine\nanalyze schema DEV2;\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:33:24.707",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_2086275353",
      "id": "20180115-053719_1393443514",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Rerun the Explain Plan After Collecting Statistics\n\nNow let's re-run the `explain` plan for Query 4 and see how the optimizer changed the plan after gathering statistics. LINEITEM's scannedRows estimate is appropriately at 6M rows, etc:\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:38:55.391",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Rerun the Explain Plan After Collecting Statistics</h3>\n<p>Now let&rsquo;s re-run the <code>explain</code> plan for Query 4 and see how the optimizer changed the plan after gathering statistics. LINEITEM&rsquo;s scannedRows estimate is appropriately at 6M rows, etc:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_1375056611",
      "id": "20180201-160453_2099057216",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tDEV2.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tDEV2.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:33:38.150",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076259_1233915627",
      "id": "20180115-071650_158099310",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Compare Execution Plans After Analyzing the Database\n\nNow let's compare the plans to see what changed. At a quick glance, you'll notice that a very large difference in the `totalCost` numbers for every operation in the plan.  (Note \nthat your exact costs will vary slightly from what we show here, depending on your system):\n\n#### After Collecting Statistics\n```\nPlan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```\n\n#### Before Collecting Statistics\n```\nPlan\nCursor(n=13,rows=36753750,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=1576165.614,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n    ->  OrderBy(n=11,totalCost=838921.423,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=400696.835,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n        ->  GroupBy(n=9,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=75629,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=75629,scannedRows=37812500,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=6717.476,outputRows=45375000,outputHeapSize=129.819 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=275004,scannedRows=137500000,outputRows=137500000,outputHeapSize=129.819 MB,partitions=41)\n```\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:33:42.871",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Compare Execution Plans After Analyzing the Database</h3>\n<p>Now let&rsquo;s compare the plans to see what changed. At a quick glance, you&rsquo;ll notice that a very large difference in the <code>totalCost</code> numbers for every operation in the plan. (Note<br/>that your exact costs will vary slightly from what we show here, depending on your system):</p>\n<h4>After Collecting Statistics</h4>\n<pre><code>Plan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n<h4>Before Collecting Statistics</h4>\n<pre><code>Plan\nCursor(n=13,rows=36753750,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=1576165.614,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=838921.423,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=400696.835,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=75629,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=75629,scannedRows=37812500,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=6717.476,outputRows=45375000,outputHeapSize=129.819 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=275004,scannedRows=137500000,outputRows=137500000,outputHeapSize=129.819 MB,partitions=41)\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076260_-1133795227",
      "id": "20180201-160712_2000693903",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Indexes",
      "text": "%md\n\n### Optimize by Adding Indexes\n\nSplice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.\n\n<div class=\"noteNote\" style=\"max-width:40%;\">The primary key is not optimal for all queries.</div>\n\nUnlike HBase and other key-value stores, Splice Machine can use *secondary indexes* to improve the performance of data manipulation statements. In addition, `UNIQUE` indexes provide a form of data integrity checking.\n\nIn Splice Machine, an index is just another HBase table, keyed on the index itself.\n\n### Adding an index on ORDERS\n\nNote that in the explain for this query, we are scanning the entire ORDERS table, even though we only will require a subset of the data?  Adding an index on O_ORDERDATE should help.  BUT it's important to know\nthat the plan is telling us even if we use an index, we still will be returning many rows to the next step (outputRows>400K).  So we should be careful to avoid the IndexLookup problem discussed previously, and\nadd other columns we'll need as well.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:43:53.485",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Optimize by Adding Indexes</h3>\n<p>Splice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.</p>\n<div class=\"noteNote\" style=\"max-width:40%;\">The primary key is not optimal for all queries.</div>\n<p>Unlike HBase and other key-value stores, Splice Machine can use <em>secondary indexes</em> to improve the performance of data manipulation statements. In addition, <code>UNIQUE</code> indexes provide a form of data integrity checking.</p>\n<p>In Splice Machine, an index is just another HBase table, keyed on the index itself.</p>\n<h3>Adding an index on ORDERS</h3>\n<p>Note that in the explain for this query, we are scanning the entire ORDERS table, even though we only will require a subset of the data? Adding an index on O_ORDERDATE should help. BUT it&rsquo;s important to know<br/>that the plan is telling us even if we use an index, we still will be returning many rows to the next step (outputRows&gt;400K). So we should be careful to avoid the IndexLookup problem discussed previously, and<br/>add other columns we&rsquo;ll need as well.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076261_-456101360",
      "id": "20180115-055551_1473914744",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create Indexes",
      "text": "%splicemachine\n\ncreate index DEV2.O_DATE_PRI_KEY_IDX on DEV2.ORDERS(\n O_ORDERDATE,\n O_ORDERPRIORITY,\n O_ORDERKEY\n );\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:45:02.939",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "tableHide": false,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076262_-1758413344",
      "id": "20180115-055326_1726784632",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nHere's the query again on which to rerun explain, so we can compare plans.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:47:27.056",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Here&rsquo;s the query again on which to rerun explain, so we can compare plans.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1543768452491_-1098357107",
      "id": "20181202-163412_872074749",
      "dateCreated": "2018-12-02 16:34:12.491",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tDEV2.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tDEV2.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 16:27:57.679",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076264_805638871",
      "id": "20180115-064548_1062136708",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plan Comparison After Indexes",
      "text": "%md\n### Compare Updated Execution Plans\n\nWe can now compare how the query will execute with indexing in place versus without indexes. You'll again notice that, among other differences, the `totalCost` values are lower for most operations because the optimizer was able to take advantage of the indexes we added.\n\n#### Query Plan After Indexing\n```\nPlan\nCursor(n=14,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=13,totalCost=15353.855,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=12,totalCost=15353.753,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=11,totalCost=14988.138,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=10,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=9,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=8,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  ProjectRestrict(n=7,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n                ->  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n=6,totalCost=1547.029,scannedRows=1160172,outputRows=435332,outputHeapSize=39.081 MB,partitions=41,baseTable=ORDERS(1616),preds=[(O_ORDERDATE[5:1] < dataTypeServices: DATE ),(O_ORDERDATE[5:1] >= 1993-07-01)])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```\n\n#### Query Plan Before Indexing\n```\nPlan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 23:48:38.018",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Compare Updated Execution Plans</h3>\n<p>We can now compare how the query will execute with indexing in place versus without indexes. You&rsquo;ll again notice that, among other differences, the <code>totalCost</code> values are lower for most operations because the optimizer was able to take advantage of the indexes we added.</p>\n<h4>Query Plan After Indexing</h4>\n<pre><code>Plan\nCursor(n=14,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=13,totalCost=15353.855,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=12,totalCost=15353.753,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=11,totalCost=14988.138,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=10,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=9,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=8,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  ProjectRestrict(n=7,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n                -&gt;  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n=6,totalCost=1547.029,scannedRows=1160172,outputRows=435332,outputHeapSize=39.081 MB,partitions=41,baseTable=ORDERS(1616),preds=[(O_ORDERDATE[5:1] &lt; dataTypeServices: DATE ),(O_ORDERDATE[5:1] &gt;= 1993-07-01)])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n<h4>Query Plan Before Indexing</h4>\n<pre><code>Plan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076265_-954317795",
      "id": "20180115-164324_663989920",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Running Query 4\n\nNow go ahead and run TPC-H Query 4.  Again feel free to use `localhost:4040` to monitor while it runs.",
      "user": "anonymous",
      "dateUpdated": "2018-12-03 07:47:30.109",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Running Query 4</h3>\n<p>Now go ahead and run TPC-H Query 4. Again feel free to use <code>localhost:4040</code> to monitor while it runs.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076267_541205424",
      "id": "20180125-204204_1935879463",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Representative Micro-Benchmarks",
      "text": "%md\n## A Glimpse at Splice Machine Benchmark Results\n\nHere are some micro-benchmark results from Splice Machine running TPC-H and other benchmarks:\n\n- 2ms single record lookups on primary keys at petabyte scale\n- 20ms single record updates at petabyte scale\n- 40-way OLTP indexed joins return in <100ms\n- 150-way OLAP style joins execute in under 2 minutes\n- 440-way join executes where others can\u2019t parse\n- Ingestion at 80MB/sec/node\n- Can run TPC-C and TPC-H simultaneously\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-03 07:47:38.519",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>A Glimpse at Splice Machine Benchmark Results</h2>\n<p>Here are some micro-benchmark results from Splice Machine running TPC-H and other benchmarks:</p>\n<ul>\n  <li>2ms single record lookups on primary keys at petabyte scale</li>\n  <li>20ms single record updates at petabyte scale</li>\n  <li>40-way OLTP indexed joins return in &lt;100ms</li>\n  <li>150-way OLAP style joins execute in under 2 minutes</li>\n  <li>440-way join executes where others can\u2019t parse</li>\n  <li>Ingestion at 80MB/sec/node</li>\n  <li>Can run TPC-C and TPC-H simultaneously</li>\n</ul>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076266_349602136",
      "id": "20180118-022657_414327443",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\n\nThe next notebook in this class shows you how you can [*Visualize Results with Zeppelin*](/#/notebook/2DY6YKEVA).",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 05:00:13.255",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>The next notebook in this class shows you how you can <a href=\"/#/notebook/2DY6YKEVA\"><em>Visualize Results with Zeppelin</em></a>.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076268_736091995",
      "id": "20180122-173624_509126525",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training / For Developers, Part II - Intermediate / d. The Life of a Query",
  "id": "2DWS5FM39",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}
