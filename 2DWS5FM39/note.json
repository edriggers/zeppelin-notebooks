{
  "paragraphs": [
    {
      "title": "Tutorial Data Schema - TPC-H",
      "text": "%md\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n# The Life of a Query\n\nThis notebook walks you through using Splice Machine to create, populate, and query a sample database. We\u0027ll use the TPC-H benchmarking data as our sample dataset.\n\nTPC-H is a decision support benchmark. It consists of a suite of business-oriented ad hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions.\n\nWe demonstrate running and optimizing queries in Splice Machine, in these sections:\n\n\u003cul class\u003d\"italic\"\u003e\n    \u003cli\u003eCreating our Database in Splice Machine\u003c/li\u003e\n    \u003cli\u003eExamining a Query Execution Plan\u003c/li\u003e\n    \u003cli\u003eInforming the Optimizer\u003c/li\u003e\n    \u003cli\u003eAdding Indexes to the Database\u003c/li\u003e\n    \u003cli\u003eA Glimpse at Splice Machine Benchmark Results\u003c/li\u003e\n    \u003cli\u003eRunning Queries\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp class\u003d\"noteIcon\"\u003eThe code paragraphs in this notebook use the \u003cem\u003e%splicemachine\u003c/em\u003e interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.\u003c/p\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:55.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003ch1\u003eThe Life of a Query\u003c/h1\u003e\n\u003cp\u003eThis notebook walks you through using Splice Machine to create, populate, and query a sample database. We\u0026rsquo;ll use the TPC-H benchmarking data as our sample dataset.\u003c/p\u003e\n\u003cp\u003eTPC-H is a decision support benchmark. It consists of a suite of business-oriented ad hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions.\u003c/p\u003e\n\u003cp\u003eWe demonstrate running and optimizing queries in Splice Machine, in these sections:\u003c/p\u003e\n\u003cul class\u003d\"italic\"\u003e\n    \u003cli\u003eCreating our Database in Splice Machine\u003c/li\u003e\n    \u003cli\u003eExamining a Query Execution Plan\u003c/li\u003e\n    \u003cli\u003eInforming the Optimizer\u003c/li\u003e\n    \u003cli\u003eAdding Indexes to the Database\u003c/li\u003e\n    \u003cli\u003eA Glimpse at Splice Machine Benchmark Results\u003c/li\u003e\n    \u003cli\u003eRunning Queries\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp class\u003d\"noteIcon\"\u003eThe code paragraphs in this notebook use the \u003cem\u003e%splicemachine\u003c/em\u003e interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076251_1367215274",
      "id": "20180113-213553_290656873",
      "dateCreated": "2018-11-16 11:04:36.000",
      "dateStarted": "2018-11-16 11:04:55.000",
      "dateFinished": "2018-11-16 11:04:55.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Creating our Database in Splice Machine\n\nNow we\u0027ll create our database in Splice Machine, in the following steps\n\n1. Create the Schema\n2. Create the Tables\n3. Import the Data\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-21 17:36:42.995",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCreating our Database in Splice Machine\u003c/h2\u003e\n\u003cp\u003eNow we\u0026rsquo;ll create our database in Splice Machine, in the following steps\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eCreate the Schema\u003c/li\u003e\n  \u003cli\u003eCreate the Tables\u003c/li\u003e\n  \u003cli\u003eImport the Data\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076252_-2092882093",
      "id": "20180125-195425_1198649470",
      "dateCreated": "2018-11-16 11:04:36.000",
      "dateStarted": "2018-11-21 17:36:42.996",
      "dateFinished": "2018-11-21 17:36:43.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 1. Create the Schema\n\nFirst, we\u0027ll create the TPC-H schema in Splice Machine.",
      "user": "anonymous",
      "dateUpdated": "2018-11-21 17:36:51.325",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e1. Create the Schema\u003c/h3\u003e\n\u003cp\u003eFirst, we\u0026rsquo;ll create the TPC-H schema in Splice Machine.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542824092679_-725564269",
      "id": "20181121-101452_164319993",
      "dateCreated": "2018-11-21 10:14:52.679",
      "dateStarted": "2018-11-21 17:36:51.326",
      "dateFinished": "2018-11-21 17:36:51.328",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\nCREATE SCHEMA TPCH1;",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "java.sql.SQLException: Schema \u0027TPCH1\u0027 already exists.\n\tat com.splicemachine.db.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:103)\n\tat com.splicemachine.db.client.am.SqlException.getSQLException(SqlException.java:368)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:905)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:580)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:692)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:95)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:490)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: com.splicemachine.db.client.am.SqlException: Schema \u0027TPCH1\u0027 already exists.\n\tat com.splicemachine.db.client.am.Statement.completeSqlca(Statement.java:1845)\n\tat com.splicemachine.db.client.am.Statement.completeExecuteImmediate(Statement.java:1433)\n\tat com.splicemachine.db.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:210)\n\tat com.splicemachine.db.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:61)\n\tat com.splicemachine.db.client.net.StatementReply.readExecuteImmediate(StatementReply.java:49)\n\tat com.splicemachine.db.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:128)\n\tat com.splicemachine.db.client.am.Statement.readExecuteImmediate(Statement.java:1429)\n\tat com.splicemachine.db.client.am.Statement.flowExecute(Statement.java:2153)\n\tat com.splicemachine.db.client.am.Statement.executeX(Statement.java:910)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:896)\n\t... 15 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076252_-32654486",
      "id": "20180115-053038_1611909604",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Overview of the TPC-H Schema\n\nHere\u0027s a view of the TPC-H schema:\n\n\u003cimg class\u003d\"fit3qtrwidth\" src\u003d\"https://s3.amazonaws.com/splice-examples/images/tutorials/sample-data-tpch-schema.png\"\u003e\n\n### 2. Create the Tables\n\nWe\u0027ll now create the TPCH tables in our schema. In case we\u0027re working on a database in which we may have already imported TPCH data, we\u0027ll first conditionally drop the tables we want to create:",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eOverview of the TPC-H Schema\u003c/h4\u003e\n\u003cp\u003eHere\u0026rsquo;s a view of the TPC-H schema:\u003c/p\u003e\n\u003cimg class\u003d\"fit3qtrwidth\" src\u003d\"https://s3.amazonaws.com/splice-examples/images/tutorials/sample-data-tpch-schema.png\"\u003e\n\u003ch3\u003e2. Create the Tables\u003c/h3\u003e\n\u003cp\u003eWe\u0026rsquo;ll now create the TPCH tables in our schema. In case we\u0026rsquo;re working on a database in which we may have already imported TPCH data, we\u0026rsquo;ll first conditionally drop the tables we want to create:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076253_-943912353",
      "id": "20180125-201218_1888148548",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\nDROP TABLE IF EXISTS TPCH1.LINEITEM;\nDROP TABLE IF EXISTS TPCH1.ORDERS;\nDROP TABLE IF EXISTS TPCH1.CUSTOMER;\nDROP TABLE IF EXISTS TPCH1.PARTSUPP;\nDROP TABLE IF EXISTS TPCH1.SUPPLIER;\nDROP TABLE IF EXISTS TPCH1.PART;\nDROP TABLE IF EXISTS TPCH1.REGION;\nDROP TABLE IF EXISTS TPCH1.NATION;",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076254_-1715193114",
      "id": "20180115-013106_1425678081",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\nCREATE TABLE TPCH1.LINEITEM (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n );\n \n CREATE TABLE TPCH1.ORDERS (\n O_ORDERKEY BIGINT NOT NULL PRIMARY KEY,\n O_CUSTKEY INTEGER,\n O_ORDERSTATUS VARCHAR(1),\n O_TOTALPRICE DECIMAL(15,2),\n O_ORDERDATE DATE,\n O_ORDERPRIORITY VARCHAR(15),\n O_CLERK VARCHAR(15),\n O_SHIPPRIORITY INTEGER ,\n O_COMMENT VARCHAR(79)\n );\n \n CREATE TABLE TPCH1.CUSTOMER (\n C_CUSTKEY INTEGER NOT NULL PRIMARY KEY,\n C_NAME VARCHAR(25),\n C_ADDRESS VARCHAR(40),\n C_NATIONKEY INTEGER NOT NULL,\n C_PHONE VARCHAR(15),\n C_ACCTBAL DECIMAL(15,2),\n C_MKTSEGMENT VARCHAR(10),\n C_COMMENT VARCHAR(117)\n );\n \n CREATE TABLE TPCH1.PARTSUPP (\n PS_PARTKEY INTEGER NOT NULL ,\n PS_SUPPKEY INTEGER NOT NULL , \n PS_AVAILQTY INTEGER,\n PS_SUPPLYCOST DECIMAL(15,2),\n PS_COMMENT VARCHAR(199),\n PRIMARY KEY(PS_PARTKEY,PS_SUPPKEY) \n );\n \n CREATE TABLE TPCH1.SUPPLIER (\n S_SUPPKEY INTEGER NOT NULL PRIMARY KEY,\n S_NAME VARCHAR(25) ,\n S_ADDRESS VARCHAR(40) ,\n S_NATIONKEY INTEGER ,\n S_PHONE VARCHAR(15) ,\n S_ACCTBAL DECIMAL(15,2),\n S_COMMENT VARCHAR(101)\n );\n \n CREATE TABLE TPCH1.PART (\n P_PARTKEY INTEGER NOT NULL PRIMARY KEY,\n P_NAME VARCHAR(55) ,\n P_MFGR VARCHAR(25) ,\n P_BRAND VARCHAR(10) ,\n P_TYPE VARCHAR(25) ,\n P_SIZE INTEGER ,\n P_CONTAINER VARCHAR(10) ,\n P_RETAILPRICE DECIMAL(15,2),\n P_COMMENT VARCHAR(23)\n );\n \n CREATE TABLE TPCH1.REGION (\n R_REGIONKEY INTEGER NOT NULL PRIMARY KEY,\n R_NAME VARCHAR(25),\n R_COMMENT VARCHAR(152)\n );\n \n CREATE TABLE TPCH1.NATION (\n N_NATIONKEY INTEGER NOT NULL,\n N_NAME VARCHAR(25),\n N_REGIONKEY INTEGER NOT NULL,\n N_COMMENT VARCHAR(152),\n PRIMARY KEY (N_NATIONKEY)\n );",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "java.sql.SQLException: table \u0027ORDERS\u0027 already exists in schema \u0027TPCH1\u0027.\n\tat com.splicemachine.db.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:103)\n\tat com.splicemachine.db.client.am.SqlException.getSQLException(SqlException.java:368)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:905)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:580)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:692)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:95)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:490)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: com.splicemachine.db.client.am.SqlException: table \u0027ORDERS\u0027 already exists in schema \u0027TPCH1\u0027.\n\tat com.splicemachine.db.client.am.Statement.completeSqlca(Statement.java:1845)\n\tat com.splicemachine.db.client.am.Statement.completeExecuteImmediate(Statement.java:1433)\n\tat com.splicemachine.db.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:210)\n\tat com.splicemachine.db.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:61)\n\tat com.splicemachine.db.client.net.StatementReply.readExecuteImmediate(StatementReply.java:49)\n\tat com.splicemachine.db.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:128)\n\tat com.splicemachine.db.client.am.Statement.readExecuteImmediate(Statement.java:1429)\n\tat com.splicemachine.db.client.am.Statement.flowExecute(Statement.java:2153)\n\tat com.splicemachine.db.client.am.Statement.executeX(Statement.java:910)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:896)\n\t... 15 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076254_-685358748",
      "id": "20180129-104639_365354120",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 3. Import the Data\n\nWe have pre-loaded flat files with the TPCH data into an S3 bucket to facilitate importing the data. All we need to do is run an `IMPORT` statement for each table.\n\n\u003cp class\u003d\"noteNote\"\u003eImporting this much data can take a few minutes; you\u0027ll see the result of each import displayed below the \u003ccode\u003eIMPORT\u003c/code\u003e statements as they complete.\u003c/p\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e3. Import the Data\u003c/h3\u003e\n\u003cp\u003eWe have pre-loaded flat files with the TPCH data into an S3 bucket to facilitate importing the data. All we need to do is run an \u003ccode\u003eIMPORT\u003c/code\u003e statement for each table.\u003c/p\u003e\n\u003cp class\u003d\"noteNote\"\u003eImporting this much data can take a few minutes; you\u0027ll see the result of each import displayed below the \u003ccode\u003eIMPORT\u003c/code\u003e statements as they complete.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076255_-542444921",
      "id": "20180125-201815_611540808",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076255_-1860272277",
      "id": "20180403-195450_1901236835",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Import Data",
      "text": "%splicemachine\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027LINEITEM\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/lineitem\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027ORDERS\u0027,   null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/orders\u0027,   \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027CUSTOMER\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/customer\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027PARTSUPP\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/partsupp\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027SUPPLIER\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/supplier\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027PART\u0027,     null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/part\u0027,     \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027REGION\u0027,   null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/region\u0027,   \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027TPCH1\u0027, \u0027NATION\u0027,   null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/nation\u0027,   \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-21 17:36:45.813",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 96.946,
              "optionOpen": false
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "2": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "3": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "4": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "5": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "6": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "7": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n6001215\t0\t1\t759863287\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n1500000\t0\t1\t171952161\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n150000\t0\t1\t24346144\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n800000\t0\t1\t118984616\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n10000\t0\t1\t1409184\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n200000\t0\t1\t24135125\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n5\t0\t1\t389\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n25\t0\t1\t2224\tNONE\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076256_-2081378855",
      "id": "20180115-012619_1984460020",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Order Priority Checking Query (Q4)",
      "text": "%md\n## Examining a Query Execution Plan\n\nIn the next few sections of this notebook, we\u0027ll examine execution plans for TPC-H Query 4, which is known as the \u003cem\u003eOrder Priority Checking Query\u003c/em\u003e. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.\n\nSplice Machine generates an execution plan prior to running your query. You can use the `explain` command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries. \n\u003cp class\u003d\"noteIcon\"\u003eThe \u003ca href\u003d\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target\u003d\"_blank\"\u003eReading Explain Plans\u003c/a\u003e topic in our documentation describes how to read explain plans.\u003c/p\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExamining a Query Execution Plan\u003c/h2\u003e\n\u003cp\u003eIn the next few sections of this notebook, we\u0026rsquo;ll examine execution plans for TPC-H Query 4, which is known as the \u003cem\u003eOrder Priority Checking Query\u003c/em\u003e. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.\u003c/p\u003e\n\u003cp\u003eSplice Machine generates an execution plan prior to running your query. You can use the \u003ccode\u003eexplain\u003c/code\u003e command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries.\u003cbr/\u003e\u003cp class\u003d\"noteIcon\"\u003eThe \u003ca href\u003d\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target\u003d\"_blank\"\u003eReading Explain Plans\u003c/a\u003e topic in our documentation describes how to read explain plans.\u003c/p\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076257_382300291",
      "id": "20180122-173257_1568071437",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain  select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate \u003e\u003d date(\u00271993-07-01\u0027)\n\tand o_orderdate \u003c add_months(\u00271993-07-01\u0027,3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey \u003d o_orderkey\n\t\t\tand l_commitdate \u003c l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d13,rows\u003d1179878,updateMode\u003d,engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d12,totalCost\u003d137993.043,outputRows\u003d1179878,outputHeapSize\u003d4.425 MB,partitions\u003d2)\n    -\u003e  OrderBy(n\u003d11,totalCost\u003d114310.259,outputRows\u003d1179878,outputHeapSize\u003d4.425 MB,partitions\u003d2)\n      -\u003e  ProjectRestrict(n\u003d10,totalCost\u003d34156.295,outputRows\u003d1179878,outputHeapSize\u003d4.425 MB,partitions\u003d2)\n        -\u003e  GroupBy(n\u003d9,totalCost\u003d6031.233,outputRows\u003d1179878,outputHeapSize\u003d4.425 MB,partitions\u003d2)\n          -\u003e  ProjectRestrict(n\u003d8,totalCost\u003d2347.75,outputRows\u003d366874,outputHeapSize\u003d4.425 MB,partitions\u003d2)\n            -\u003e  BroadcastJoin(n\u003d7,totalCost\u003d6031.233,outputRows\u003d1179878,outputHeapSize\u003d4.425 MB,partitions\u003d2,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  TableScan[ORDERS(7136)](n\u003d6,totalCost\u003d2347.75,scannedRows\u003d1171875,outputRows\u003d366874,outputHeapSize\u003d4.425 MB,partitions\u003d2,preds\u003d[(O_ORDERDATE[5:2] \u003e\u003d 1993-07-01),(O_ORDERDATE[5:2] \u003c dataTypeServices: DATE )])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d8845.366,outputRows\u003d1456640,outputHeapSize\u003d4.167 MB,partitions\u003d2)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d4422.683,outputRows\u003d1456640,outputHeapSize\u003d4.167 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d8845.366,outputRows\u003d1456640,outputHeapSize\u003d4.167 MB,partitions\u003d2)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d8845.366,outputRows\u003d1456640,outputHeapSize\u003d4.167 MB,partitions\u003d2,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(7120)](n\u003d1,totalCost\u003d8832.124,scannedRows\u003d4414062,outputRows\u003d4414062,outputHeapSize\u003d4.167 MB,partitions\u003d2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076257_-893719305",
      "id": "20180201-123806_1712783827",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Splice Machine Optimizer",
      "text": "%md\n## Optimizing Query Performance\n\nIn this section we\u0027ll look at optimizing the execution plan for TPCH Query 4. We\u0027ll:\n\n* Collect Statistics to Inform the Optimizer\n* Add Indexes to Further Optimize the Plan\n* Compare Execution Plans\n\nThe *Splice Machine Optimizer* is a cost-based optimizer that generates optimal execution plans for database queries. You use our `analyze` command to collect statistics from your database, which the optimizer uses when planning the execution of a query.\n\n\u003cp class\u003d\"noteIcon\"\u003eCost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.\u003c/p\u003e\n\nWhen creating a plan for a query, our optimizer performs a number of important and valuable actions, including:\n\n* It creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.\n* When joining tables, the optimizer evaluates the best *join order* and the *join strategy* to use.\n* The optimizer unrolls subqueries to reduce processing time\n\nThese metrics are usually extremely expensive but if approximate results are acceptable, there is a class of specialized algorithms, called streaming algorithms, or *sketches*, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the [Yahoo Sketches Library](https://datasketches.github.io/docs/TheChallenge.html) for its statistics gathering. \n\n### Collect Statistics\nOur first optimization is to collect statistics to inform the optimizer about our database. We use our `analyze` command to collect statistics on a schema (or table). This process requires a couple minutes.\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eOptimizing Query Performance\u003c/h2\u003e\n\u003cp\u003eIn this section we\u0026rsquo;ll look at optimizing the execution plan for TPCH Query 4. We\u0026rsquo;ll:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCollect Statistics to Inform the Optimizer\u003c/li\u003e\n  \u003cli\u003eAdd Indexes to Further Optimize the Plan\u003c/li\u003e\n  \u003cli\u003eCompare Execution Plans\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003cem\u003eSplice Machine Optimizer\u003c/em\u003e is a cost-based optimizer that generates optimal execution plans for database queries. You use our \u003ccode\u003eanalyze\u003c/code\u003e command to collect statistics from your database, which the optimizer uses when planning the execution of a query.\u003c/p\u003e\n\u003cp class\u003d\"noteIcon\"\u003eCost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.\u003c/p\u003e\n\u003cp\u003eWhen creating a plan for a query, our optimizer performs a number of important and valuable actions, including:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIt creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.\u003c/li\u003e\n  \u003cli\u003eWhen joining tables, the optimizer evaluates the best \u003cem\u003ejoin order\u003c/em\u003e and the \u003cem\u003ejoin strategy\u003c/em\u003e to use.\u003c/li\u003e\n  \u003cli\u003eThe optimizer unrolls subqueries to reduce processing time\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese metrics are usually extremely expensive but if approximate results are acceptable, there is a class of specialized algorithms, called streaming algorithms, or \u003cem\u003esketches\u003c/em\u003e, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the \u003ca href\u003d\"https://datasketches.github.io/docs/TheChallenge.html\"\u003eYahoo Sketches Library\u003c/a\u003e for its statistics gathering. \u003c/p\u003e\n\u003ch3\u003eCollect Statistics\u003c/h3\u003e\n\u003cp\u003eOur first optimization is to collect statistics to inform the optimizer about our database. We use our \u003ccode\u003eanalyze\u003c/code\u003e command to collect statistics on a schema (or table). This process requires a couple minutes.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_2094574479",
      "id": "20180115-053838_672371514",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Collect Statistics",
      "text": "%splicemachine\nanalyze schema TPCH1;\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:54.000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nTPCH1\tLINEITEM\t-All-\t6001215\t528106920\t2\t2\t0.0\nTPCH1\tORDERS\t-All-\t1500000\t150000000\t1\t2\t0.0\nTPCH1\tCUSTOMER\t-All-\t150000\t22950000\t1\t2\t0.0\nTPCH1\tPARTSUPP\t-All-\t800000\t112000000\t1\t2\t0.0\nTPCH1\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\nTPCH1\tPART\t-All-\t200000\t22000000\t1\t2\t0.0\nTPCH1\tREGION\t-All-\t5\t380\t1\t2\t0.0\nTPCH1\tNATION\t-All-\t25\t2225\t1\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_2086275353",
      "id": "20180115-053719_1393443514",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Rerun the Explain Plan After Collecting Statistics\n\nNow let\u0027s re-run the `explain` plan for Query 4 and see how the optimizer changed the plan after gathering statistics.\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRerun the Explain Plan After Collecting Statistics\u003c/h3\u003e\n\u003cp\u003eNow let\u0026rsquo;s re-run the \u003ccode\u003eexplain\u003c/code\u003e plan for Query 4 and see how the optimizer changed the plan after gathering statistics.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076258_1375056611",
      "id": "20180201-160453_2099057216",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate \u003e\u003d date(\u00271993-07-01\u0027)\n\tand o_orderdate \u003c add_months(\u00271993-07-01\u0027,3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey \u003d o_orderkey\n\t\t\tand l_commitdate \u003c l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d13,rows\u003d5,updateMode\u003d,engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d12,totalCost\u003d67142.113,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d2)\n    -\u003e  OrderBy(n\u003d11,totalCost\u003d67142.01,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d2)\n      -\u003e  ProjectRestrict(n\u003d10,totalCost\u003d44761.166,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d2)\n        -\u003e  GroupBy(n\u003d9,totalCost\u003d7495.089,outputRows\u003d1604125,outputHeapSize\u003d39.056 MB,partitions\u003d2)\n          -\u003e  ProjectRestrict(n\u003d8,totalCost\u003d3004,outputRows\u003d434563,outputHeapSize\u003d39.056 MB,partitions\u003d2)\n            -\u003e  BroadcastJoin(n\u003d7,totalCost\u003d7495.089,outputRows\u003d1604125,outputHeapSize\u003d39.056 MB,partitions\u003d2,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  TableScan[ORDERS(7136)](n\u003d6,totalCost\u003d3004,scannedRows\u003d1500000,outputRows\u003d434563,outputHeapSize\u003d39.056 MB,partitions\u003d2,preds\u003d[(O_ORDERDATE[5:2] \u003e\u003d 1993-07-01),(O_ORDERDATE[5:2] \u003c dataTypeServices: DATE )])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d5692.652,outputRows\u003d1557719,outputHeapSize\u003d24.512 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(7120)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076259_1233915627",
      "id": "20180115-071650_158099310",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Compare Execution Plans After Analyzing the Database\n\nNow let\u0027s compare the plans to see what changed. At a quick glance, you\u0027ll notice that a very large difference in the `totalCost` numbers for every operation in the plan:\n\n#### After Collecting Statistics\n```\nPlan\nCursor(n\u003d13,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d12,totalCost\u003d16920.058,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u003e  OrderBy(n\u003d11,totalCost\u003d16919.956,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u003e  ProjectRestrict(n\u003d10,totalCost\u003d16517.046,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u003e  GroupBy(n\u003d9,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u003e  ProjectRestrict(n\u003d8,totalCost\u003d3004,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u003e  MergeSortJoin(n\u003d7,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d3004,scannedRows\u003d1500000,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u003e\u003d 1993-07-01),(O_ORDERDATE[5:2] \u003c dataTypeServices: DATE )])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n```\n\n#### Before Collecting Statistics\n```\nPlan\nCursor(n\u003d13,rows\u003d36753750,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d12,totalCost\u003d1576165.614,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n    -\u003e  OrderBy(n\u003d11,totalCost\u003d838921.423,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n      -\u003e  ProjectRestrict(n\u003d10,totalCost\u003d400696.835,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n        -\u003e  GroupBy(n\u003d9,totalCost\u003d98186.501,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n          -\u003e  ProjectRestrict(n\u003d8,totalCost\u003d75629,outputRows\u003d11837789,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n            -\u003e  MergeSortJoin(n\u003d7,totalCost\u003d98186.501,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d75629,scannedRows\u003d37812500,outputRows\u003d11837789,outputHeapSize\u003d139.022 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u003e\u003d 1993-07-01),(O_ORDERDATE[5:2] \u003c dataTypeServices: DATE )])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d6717.476,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d275004,scannedRows\u003d137500000,outputRows\u003d137500000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n```\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCompare Execution Plans After Analyzing the Database\u003c/h3\u003e\n\u003cp\u003eNow let\u0026rsquo;s compare the plans to see what changed. At a quick glance, you\u0026rsquo;ll notice that a very large difference in the \u003ccode\u003etotalCost\u003c/code\u003e numbers for every operation in the plan:\u003c/p\u003e\n\u003ch4\u003eAfter Collecting Statistics\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ePlan\nCursor(n\u003d13,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u0026gt;  ScrollInsensitive(n\u003d12,totalCost\u003d16920.058,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u0026gt;  OrderBy(n\u003d11,totalCost\u003d16919.956,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u0026gt;  ProjectRestrict(n\u003d10,totalCost\u003d16517.046,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u0026gt;  GroupBy(n\u003d9,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u0026gt;  ProjectRestrict(n\u003d8,totalCost\u003d3004,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u0026gt;  MergeSortJoin(n\u003d7,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u0026gt;  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d3004,scannedRows\u003d1500000,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u0026gt;\u003d 1993-07-01),(O_ORDERDATE[5:2] \u0026lt; dataTypeServices: DATE )])\n              -\u0026gt;  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u0026gt;  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u0026gt;  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u0026gt;  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u0026lt; L_RECEIPTDATE[0:3])])\n                      -\u0026gt;  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eBefore Collecting Statistics\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ePlan\nCursor(n\u003d13,rows\u003d36753750,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u0026gt;  ScrollInsensitive(n\u003d12,totalCost\u003d1576165.614,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n    -\u0026gt;  OrderBy(n\u003d11,totalCost\u003d838921.423,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n      -\u0026gt;  ProjectRestrict(n\u003d10,totalCost\u003d400696.835,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n        -\u0026gt;  GroupBy(n\u003d9,totalCost\u003d98186.501,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n          -\u0026gt;  ProjectRestrict(n\u003d8,totalCost\u003d75629,outputRows\u003d11837789,outputHeapSize\u003d139.022 MB,partitions\u003d41)\n            -\u0026gt;  MergeSortJoin(n\u003d7,totalCost\u003d98186.501,outputRows\u003d36753750,outputHeapSize\u003d139.022 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u0026gt;  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d75629,scannedRows\u003d37812500,outputRows\u003d11837789,outputHeapSize\u003d139.022 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u0026gt;\u003d 1993-07-01),(O_ORDERDATE[5:2] \u0026lt; dataTypeServices: DATE )])\n              -\u0026gt;  ProjectRestrict(n\u003d5,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n                -\u0026gt;  Distinct(n\u003d4,totalCost\u003d6717.476,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d1)\n                  -\u0026gt;  ProjectRestrict(n\u003d3,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n                    -\u0026gt;  ProjectRestrict(n\u003d2,totalCost\u003d275416.5,outputRows\u003d45375000,outputHeapSize\u003d129.819 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u0026lt; L_RECEIPTDATE[0:3])])\n                      -\u0026gt;  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d275004,scannedRows\u003d137500000,outputRows\u003d137500000,outputHeapSize\u003d129.819 MB,partitions\u003d41)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076260_-1133795227",
      "id": "20180201-160712_2000693903",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Indexes",
      "text": "%md\n\n### Optimize by Adding Indexes\n\nSplice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.\n\n\u003cdiv class\u003d\"noteNote\" style\u003d\"max-width:40%;\"\u003eThe primary key is not optimal for all queries.\u003c/div\u003e\n\nUnlike HBase and other key-value stores, Splice Machine can use *secondary indexes* to improve the performance of data manipulation statements. In addition, `UNIQUE` indexes provide a form of data integrity checking.\n\nJust as we did when creating new tables, we\u0027ll first drop the indexes we\u0027re going to create, in case they already exist.\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-20 15:59:04.380",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eOptimize by Adding Indexes\u003c/h3\u003e\n\u003cp\u003eSplice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.\u003c/p\u003e\n\u003cdiv class\u003d\"noteNote\" style\u003d\"max-width:40%;\"\u003eThe primary key is not optimal for all queries.\u003c/div\u003e\n\u003cp\u003eUnlike HBase and other key-value stores, Splice Machine can use \u003cem\u003esecondary indexes\u003c/em\u003e to improve the performance of data manipulation statements. In addition, \u003ccode\u003eUNIQUE\u003c/code\u003e indexes provide a form of data integrity checking.\u003c/p\u003e\n\u003cp\u003eJust as we did when creating new tables, we\u0026rsquo;ll first drop the indexes we\u0026rsquo;re going to create, in case they already exist.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076261_-456101360",
      "id": "20180115-055551_1473914744",
      "dateCreated": "2018-11-16 11:04:36.000",
      "dateStarted": "2018-11-20 15:59:04.380",
      "dateFinished": "2018-11-20 15:59:04.386",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\ndrop index TPCH1.O_CUST_IDX;\ndrop index TPCH1.O_DATE_PRI_KEY_IDX;\ndrop index TPCH1.L_SHIPDATE_IDX;\ndrop index TPCH1.L_PART_IDX;",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076261_1890088763",
      "id": "20180115-074728_655442192",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create Indexes",
      "text": "%splicemachine\ncreate index TPCH1.O_CUST_IDX on TPCH1.ORDERS(\n O_CUSTKEY,\n O_ORDERKEY\n );\n \n create index TPCH1.O_DATE_PRI_KEY_IDX on TPCH1.ORDERS(\n O_ORDERDATE,\n O_ORDERPRIORITY,\n O_ORDERKEY\n );\n \n create index TPCH1.L_SHIPDATE_IDX on TPCH1.LINEITEM(\n L_SHIPDATE,\n L_PARTKEY,\n L_EXTENDEDPRICE,\n L_DISCOUNT\n );\n \n create index TPCH1.L_PART_IDX on TPCH1.LINEITEM(\n L_PARTKEY,\n L_ORDERKEY,\n L_SUPPKEY,\n L_SHIPDATE,\n L_EXTENDEDPRICE,\n L_DISCOUNT,\n L_QUANTITY,\n L_SHIPMODE,\n L_SHIPINSTRUCT\n );",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076262_-1758413344",
      "id": "20180115-055326_1726784632",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Re-analze and Re-run the Explain Plan After Indexing\n\nNow that we\u0027ve added indexes to our database, let\u0027s re-analyze the database and then re-run the `explain` plan for Query 4 one more time to see how indexing has affected our execution plan.\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRe-analze and Re-run the Explain Plan After Indexing\u003c/h3\u003e\n\u003cp\u003eNow that we\u0026rsquo;ve added indexes to our database, let\u0026rsquo;s re-analyze the database and then re-run the \u003ccode\u003eexplain\u003c/code\u003e plan for Query 4 one more time to see how indexing has affected our execution plan.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076263_-1057463671",
      "id": "20180125-203451_1030911184",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\nanalyze schema TPCH1;",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:54.000",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nTPCH1\tLINEITEM\t-All-\t6001215\t528106920\t2\t2\t0.0\nTPCH1\tORDERS\t-All-\t1500000\t150000000\t1\t2\t0.0\nTPCH1\tCUSTOMER\t-All-\t150000\t22950000\t1\t2\t0.0\nTPCH1\tPARTSUPP\t-All-\t800000\t112000000\t1\t2\t0.0\nTPCH1\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\nTPCH1\tPART\t-All-\t200000\t22000000\t1\t2\t0.0\nTPCH1\tREGION\t-All-\t5\t380\t1\t2\t0.0\nTPCH1\tNATION\t-All-\t25\t2225\t1\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076263_840107085",
      "id": "20180115-075331_1211951910",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate \u003e\u003d date(\u00271993-07-01\u0027)\n\tand o_orderdate \u003c add_months(\u00271993-07-01\u0027,3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey \u003d o_orderkey\n\t\t\tand l_commitdate \u003c l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d14,rows\u003d5,updateMode\u003d,engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d13,totalCost\u003d63851.66,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d2)\n    -\u003e  OrderBy(n\u003d12,totalCost\u003d63851.557,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d2)\n      -\u003e  ProjectRestrict(n\u003d11,totalCost\u003d42567.538,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d2)\n        -\u003e  GroupBy(n\u003d10,totalCost\u003d6032.67,outputRows\u003d1604125,outputHeapSize\u003d39.056 MB,partitions\u003d2)\n          -\u003e  ProjectRestrict(n\u003d9,totalCost\u003d6001884,outputRows\u003d434563,outputHeapSize\u003d39.056 MB,partitions\u003d2)\n            -\u003e  BroadcastJoin(n\u003d8,totalCost\u003d6032.67,outputRows\u003d1604125,outputHeapSize\u003d39.056 MB,partitions\u003d2,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  ProjectRestrict(n\u003d7,totalCost\u003d6001884,outputRows\u003d434563,outputHeapSize\u003d39.056 MB,partitions\u003d2)\n                -\u003e  IndexScan[O_DATE_PRI_KEY_IDX(7265)](n\u003d6,totalCost\u003d1541.581,scannedRows\u003d1156076,outputRows\u003d434563,outputHeapSize\u003d39.056 MB,partitions\u003d2,baseTable\u003dORDERS(7136),preds\u003d[(O_ORDERDATE[5:1] \u003c dataTypeServices: DATE ),(O_ORDERDATE[5:1] \u003e\u003d 1993-07-01)])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d5692.652,outputRows\u003d1557719,outputHeapSize\u003d24.512 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d2,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(7120)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076264_805638871",
      "id": "20180115-064548_1062136708",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Plan Comparison After Indexes",
      "text": "%md\n### Compare Execution Plans\n\nWe can now compare how the query will execute with indexing in place versus without indexes. You\u0027ll again notice that, among other differences, the `totalCost` values are lower for most operations because the optimizer was able to take advantage of the indexes we added.\n\n#### Query Plan After Indexing\n```\nPlan\nCursor(n\u003d14,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d13,totalCost\u003d15353.855,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u003e  OrderBy(n\u003d12,totalCost\u003d15353.753,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u003e  ProjectRestrict(n\u003d11,totalCost\u003d14988.138,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u003e  GroupBy(n\u003d10,totalCost\u003d2463.089,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u003e  ProjectRestrict(n\u003d9,totalCost\u003d6001884,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u003e  MergeSortJoin(n\u003d8,totalCost\u003d2463.089,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  ProjectRestrict(n\u003d7,totalCost\u003d6001884,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n                -\u003e  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n\u003d6,totalCost\u003d1547.029,scannedRows\u003d1160172,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41,baseTable\u003dORDERS(1616),preds\u003d[(O_ORDERDATE[5:1] \u003c dataTypeServices: DATE ),(O_ORDERDATE[5:1] \u003e\u003d 1993-07-01)])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n```\n\n#### Query Plan Before Indexing\n```\nPlan\nCursor(n\u003d13,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d12,totalCost\u003d16920.058,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u003e  OrderBy(n\u003d11,totalCost\u003d16919.956,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u003e  ProjectRestrict(n\u003d10,totalCost\u003d16517.046,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u003e  GroupBy(n\u003d9,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u003e  ProjectRestrict(n\u003d8,totalCost\u003d3004,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u003e  MergeSortJoin(n\u003d7,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u003e  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d3004,scannedRows\u003d1500000,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u003e\u003d 1993-07-01),(O_ORDERDATE[5:2] \u003c dataTypeServices: DATE )])\n              -\u003e  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u003e  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u003e  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u003e  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u003c L_RECEIPTDATE[0:3])])\n                      -\u003e  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n```",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCompare Execution Plans\u003c/h3\u003e\n\u003cp\u003eWe can now compare how the query will execute with indexing in place versus without indexes. You\u0026rsquo;ll again notice that, among other differences, the \u003ccode\u003etotalCost\u003c/code\u003e values are lower for most operations because the optimizer was able to take advantage of the indexes we added.\u003c/p\u003e\n\u003ch4\u003eQuery Plan After Indexing\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ePlan\nCursor(n\u003d14,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u0026gt;  ScrollInsensitive(n\u003d13,totalCost\u003d15353.855,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u0026gt;  OrderBy(n\u003d12,totalCost\u003d15353.753,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u0026gt;  ProjectRestrict(n\u003d11,totalCost\u003d14988.138,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u0026gt;  GroupBy(n\u003d10,totalCost\u003d2463.089,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u0026gt;  ProjectRestrict(n\u003d9,totalCost\u003d6001884,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u0026gt;  MergeSortJoin(n\u003d8,totalCost\u003d2463.089,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u0026gt;  ProjectRestrict(n\u003d7,totalCost\u003d6001884,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n                -\u0026gt;  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n\u003d6,totalCost\u003d1547.029,scannedRows\u003d1160172,outputRows\u003d435332,outputHeapSize\u003d39.081 MB,partitions\u003d41,baseTable\u003dORDERS(1616),preds\u003d[(O_ORDERDATE[5:1] \u0026lt; dataTypeServices: DATE ),(O_ORDERDATE[5:1] \u0026gt;\u003d 1993-07-01)])\n              -\u0026gt;  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u0026gt;  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u0026gt;  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u0026gt;  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u0026lt; L_RECEIPTDATE[0:3])])\n                      -\u0026gt;  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eQuery Plan Before Indexing\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ePlan\nCursor(n\u003d13,rows\u003d5,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u0026gt;  ScrollInsensitive(n\u003d12,totalCost\u003d16920.058,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n    -\u0026gt;  OrderBy(n\u003d11,totalCost\u003d16919.956,outputRows\u003d5,outputHeapSize\u003d127 B,partitions\u003d41)\n      -\u0026gt;  ProjectRestrict(n\u003d10,totalCost\u003d16517.046,outputRows\u003d1604125,outputHeapSize\u003d127 B,partitions\u003d41)\n        -\u0026gt;  GroupBy(n\u003d9,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n          -\u0026gt;  ProjectRestrict(n\u003d8,totalCost\u003d3004,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41)\n            -\u0026gt;  MergeSortJoin(n\u003d7,totalCost\u003d3955.595,outputRows\u003d1604125,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] \u003d O_ORDERKEY[7:2])])\n              -\u0026gt;  TableScan[ORDERS(1616)](n\u003d6,totalCost\u003d3004,scannedRows\u003d1500000,outputRows\u003d435327,outputHeapSize\u003d39.081 MB,partitions\u003d41,preds\u003d[(O_ORDERDATE[5:2] \u0026gt;\u003d 1993-07-01),(O_ORDERDATE[5:2] \u0026lt; dataTypeServices: DATE )])\n              -\u0026gt;  ProjectRestrict(n\u003d5,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                -\u0026gt;  Distinct(n\u003d4,totalCost\u003d277.69,outputRows\u003d1501009,outputHeapSize\u003d23.619 MB,partitions\u003d1)\n                  -\u0026gt;  ProjectRestrict(n\u003d3,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n                    -\u0026gt;  ProjectRestrict(n\u003d2,totalCost\u003d11385.304,outputRows\u003d1980401,outputHeapSize\u003d31.163 MB,partitions\u003d41,preds\u003d[(L_COMMITDATE[0:2] \u0026lt; L_RECEIPTDATE[0:3])])\n                      -\u0026gt;  TableScan[LINEITEM(1600)](n\u003d1,totalCost\u003d11286.284,scannedRows\u003d6001215,outputRows\u003d6001215,outputHeapSize\u003d31.163 MB,partitions\u003d41)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076265_-954317795",
      "id": "20180115-164324_663989920",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Representative Micro-Benchmarks",
      "text": "%md\n## A Glimpse at Splice Machine Benchmark Results\n\nHere are some micro-results from Splice Machine running TPC-H benchmarks:\n\n- 2ms single record lookups on primary keys at petabyte scale\n- 20ms single record updates at petabyte scale\n- 40-way OLTP indexed joins return in \u003c100ms\n- 150-way OLAP style joins execute in under 2 minutes\n- 440-way join executes where others can’t parse\n- Ingestion at 80MB/sec/node\n- Can run TPC-C and TPC-H simultaneously\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eA Glimpse at Splice Machine Benchmark Results\u003c/h2\u003e\n\u003cp\u003eHere are some micro-results from Splice Machine running TPC-H benchmarks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e2ms single record lookups on primary keys at petabyte scale\u003c/li\u003e\n  \u003cli\u003e20ms single record updates at petabyte scale\u003c/li\u003e\n  \u003cli\u003e40-way OLTP indexed joins return in \u0026lt;100ms\u003c/li\u003e\n  \u003cli\u003e150-way OLAP style joins execute in under 2 minutes\u003c/li\u003e\n  \u003cli\u003e440-way join executes where others can’t parse\u003c/li\u003e\n  \u003cli\u003eIngestion at 80MB/sec/node\u003c/li\u003e\n  \u003cli\u003eCan run TPC-C and TPC-H simultaneously\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076266_349602136",
      "id": "20180118-022657_414327443",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Running TPC-H Queries\n\nNow we\u0027ll run TPC-H Query 02, so you can see the database in action.",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRunning TPC-H Queries\u003c/h3\u003e\n\u003cp\u003eNow we\u0026rsquo;ll run TPC-H Query 02, so you can see the database in action.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076267_541205424",
      "id": "20180125-204204_1935879463",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n-- QUERY 02\nselect\n\ts_acctbal,\n\ts_name,\n\tn_name,\n\tp_partkey,\n\tp_mfgr,\n\ts_address,\n\ts_phone,\n\ts_comment\nfrom\n\tTPCH1.part,\n\tTPCH1.supplier,\n\tTPCH1.partsupp,\n\tTPCH1.nation,\n\tTPCH1.region\nwhere\n\tp_partkey \u003d ps_partkey\n\tand s_suppkey \u003d ps_suppkey\n\tand p_size \u003d 15\n\tand p_type like \u0027%BRASS\u0027\n\tand s_nationkey \u003d n_nationkey\n\tand n_regionkey \u003d r_regionkey\n\tand r_name \u003d \u0027EUROPE\u0027\n\tand ps_supplycost \u003d (\n\t\tselect\n\t\t\tmin(ps_supplycost)\n\t\tfrom\n\t\t\tTPCH1.partsupp,\n\t\t\tTPCH1.supplier,\n\t\t\tTPCH1.nation,\n\t\t\tTPCH1.region\n\t\twhere\n\t\t\tp_partkey \u003d ps_partkey\n\t\t\tand s_suppkey \u003d ps_suppkey\n\t\t\tand s_nationkey \u003d n_nationkey\n\t\t\tand n_regionkey \u003d r_regionkey\n\t\t\tand r_name \u003d \u0027EUROPE\u0027\n\t)\norder by\n\ts_acctbal desc,\n\tn_name,\n\ts_name,\n\tp_partkey\n{limit 100}\n-- END OF QUERY\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:55.000",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "S_ACCTBAL": "string",
                      "S_NAME": "string",
                      "N_NAME": "string",
                      "P_PARTKEY": "string",
                      "P_MFGR": "string",
                      "S_ADDRESS": "string",
                      "S_PHONE": "string",
                      "S_COMMENT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": true
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "S_ACCTBAL\tS_NAME\tN_NAME\tP_PARTKEY\tP_MFGR\tS_ADDRESS\tS_PHONE\tS_COMMENT\n9938.53\tSupplier#000005359\tUNITED KINGDOM\t185358\tManufacturer#4\tQKuHYh,vZGiwu2FWEJoLDx04\t33-429-790-6131\turiously regular requests hag\n9937.84\tSupplier#000005969\tROMANIA\t108438\tManufacturer#1\tANDENSOSmk,miq23Xfb5RWt6dvUcvt6Qa\t29-520-692-3537\tefully express instructions. regular requests against the slyly fin\n9936.22\tSupplier#000005250\tUNITED KINGDOM\t249\tManufacturer#4\tB3rqp0xbSEim4Mpy2RH J\t33-320-228-2957\tetect about the furiously final accounts. slyly ironic pinto beans sleep inside the furiously\n9923.77\tSupplier#000002324\tGERMANY\t29821\tManufacturer#4\ty3OD9UywSTOk\t17-779-299-1839\tackages boost blithely. blithely regular deposits c\n9871.22\tSupplier#000006373\tGERMANY\t43868\tManufacturer#5\tJ8fcXWsTqM\t17-813-485-8637\tetect blithely bold asymptotes. fluffily ironic platelets wake furiously; blit\n9870.78\tSupplier#000001286\tGERMANY\t81285\tManufacturer#2\tYKA,E2fjiVd7eUrzp2Ef8j1QxGo2DFnosaTEH\t17-516-924-4574\t regular accounts. furiously unusual courts above the fi\n9870.78\tSupplier#000001286\tGERMANY\t181285\tManufacturer#4\tYKA,E2fjiVd7eUrzp2Ef8j1QxGo2DFnosaTEH\t17-516-924-4574\t regular accounts. furiously unusual courts above the fi\n9852.52\tSupplier#000008973\tRUSSIA\t18972\tManufacturer#2\tt5L67YdBYYH6o,Vz24jpDyQ9\t32-188-594-7038\trns wake final foxes. carefully unusual depende\n9847.83\tSupplier#000008097\tRUSSIA\t130557\tManufacturer#2\txMe97bpE69NzdwLoX\t32-375-640-3593\t the special excuses. silent sentiments serve carefully final ac\n9847.57\tSupplier#000006345\tFRANCE\t86344\tManufacturer#1\tVSt3rzk3qG698u6ld8HhOByvrTcSTSvQlDQDag\t16-886-766-7945\tges. slyly regular requests are. ruthless, express excuses cajole blithely across the unu\n9847.57\tSupplier#000006345\tFRANCE\t173827\tManufacturer#2\tVSt3rzk3qG698u6ld8HhOByvrTcSTSvQlDQDag\t16-886-766-7945\tges. slyly regular requests are. ruthless, express excuses cajole blithely across the unu\n9836.93\tSupplier#000007342\tRUSSIA\t4841\tManufacturer#4\tJOlK7C1,7xrEZSSOw\t32-399-414-5385\tblithely carefully bold theodolites. fur\n9817.10\tSupplier#000002352\tRUSSIA\t124815\tManufacturer#2\t4LfoHUZjgjEbAKw TgdKcgOc4D4uCYw\t32-551-831-1437\twake carefully alongside of the carefully final ex\n9817.10\tSupplier#000002352\tRUSSIA\t152351\tManufacturer#3\t4LfoHUZjgjEbAKw TgdKcgOc4D4uCYw\t32-551-831-1437\twake carefully alongside of the carefully final ex\n9739.86\tSupplier#000003384\tFRANCE\t138357\tManufacturer#2\to,Z3v4POifevE k9U1b 6J1ucX,I\t16-494-913-5925\ts after the furiously bold packages sleep fluffily idly final requests: quickly final\n9721.95\tSupplier#000008757\tUNITED KINGDOM\t156241\tManufacturer#3\tAtg6GnM4dT2\t33-821-407-2995\teep furiously sauternes; quickl\n9681.33\tSupplier#000008406\tRUSSIA\t78405\tManufacturer#1\t,qUuXcftUl\t32-139-873-8571\thaggle slyly regular excuses. quic\n9643.55\tSupplier#000005148\tROMANIA\t107617\tManufacturer#1\tkT4ciVFslx9z4s79p Js825\t29-252-617-4850\tfinal excuses. final ideas boost quickly furiously speci\n9624.82\tSupplier#000001816\tFRANCE\t34306\tManufacturer#3\te7vab91vLJPWxxZnewmnDBpDmxYHrb\t16-392-237-6726\te packages are around the special ideas. special, pending foxes us\n9624.78\tSupplier#000009658\tROMANIA\t189657\tManufacturer#1\toE9uBgEfSS4opIcepXyAYM,x\t29-748-876-2014\tronic asymptotes wake bravely final\n9612.94\tSupplier#000003228\tROMANIA\t120715\tManufacturer#2\tKDdpNKN3cWu7ZSrbdqp7AfSLxx,qWB\t29-325-784-8187\twarhorses. quickly even deposits sublate daringly ironic instructions. slyly blithe t\n9612.94\tSupplier#000003228\tROMANIA\t198189\tManufacturer#4\tKDdpNKN3cWu7ZSrbdqp7AfSLxx,qWB\t29-325-784-8187\twarhorses. quickly even deposits sublate daringly ironic instructions. slyly blithe t\n9571.83\tSupplier#000004305\tROMANIA\t179270\tManufacturer#2\tqNHZ7WmCzygwMPRDO9Ps\t29-973-481-1831\tkly carefully express asymptotes. furiou\n9558.10\tSupplier#000003532\tUNITED KINGDOM\t88515\tManufacturer#4\tEOeuiiOn21OVpTlGguufFDFsbN1p0lhpxHp\t33-152-301-2164\t foxes. quickly even excuses use. slyly special foxes nag bl\n9492.79\tSupplier#000005975\tGERMANY\t25974\tManufacturer#5\tS6mIiCTx82z7lV\t17-992-579-4839\tarefully pending accounts. blithely regular excuses boost carefully carefully ironic p\n9461.05\tSupplier#000002536\tUNITED KINGDOM\t20033\tManufacturer#1\t8mmGbyzaU 7ZS2wJumTibypncu9pNkDc4FYA\t33-556-973-5522\t. slyly regular deposits wake slyly. furiously regular warthogs are.\n9453.01\tSupplier#000000802\tROMANIA\t175767\tManufacturer#1\t,6HYXb4uaHITmtMBj4Ak57Pd\t29-342-882-6463\tgular frets. permanently special multipliers believe blithely alongs\n9408.65\tSupplier#000007772\tUNITED KINGDOM\t117771\tManufacturer#4\tAiC5YAH,gdu0i7\t33-152-491-1126\tnag against the final requests. furiously unusual packages cajole blit\n9359.61\tSupplier#000004856\tROMANIA\t62349\tManufacturer#5\tHYogcF3Jb yh1\t29-334-870-9731\ty ironic theodolites. blithely sile\n9357.45\tSupplier#000006188\tUNITED KINGDOM\t138648\tManufacturer#1\tg801,ssP8wpTk4Hm\t33-583-607-1633\tously always regular packages. fluffily even accounts beneath the furiously final pack\n9352.04\tSupplier#000003439\tGERMANY\t170921\tManufacturer#4\tqYPDgoiBGhCYxjgC\t17-128-996-4650\t according to the carefully bold ideas\n9312.97\tSupplier#000007807\tRUSSIA\t90279\tManufacturer#5\toGYMPCk9XHGB2PBfKRnHA\t32-673-872-5854\tecial packages among the pending, even requests use regula\n9312.97\tSupplier#000007807\tRUSSIA\t100276\tManufacturer#5\toGYMPCk9XHGB2PBfKRnHA\t32-673-872-5854\tecial packages among the pending, even requests use regula\n9280.27\tSupplier#000007194\tROMANIA\t47193\tManufacturer#3\tzhRUQkBSrFYxIAXTfInj vyGRQjeK\t29-318-454-2133\to beans haggle after the furiously unusual deposits. carefully silent dolphins cajole carefully\n9274.80\tSupplier#000008854\tRUSSIA\t76346\tManufacturer#3\t1xhLoOUM7I3mZ1mKnerw OSqdbb4QbGa\t32-524-148-5221\ty. courts do wake slyly. carefully ironic platelets haggle above the slyly regular the\n9249.35\tSupplier#000003973\tFRANCE\t26466\tManufacturer#1\td18GiDsL6Wm2IsGXM,RZf1jCsgZAOjNYVThTRP4\t16-722-866-1658\tuests are furiously. regular tithes through the regular, final accounts cajole furiously above the q\n9249.35\tSupplier#000003973\tFRANCE\t33972\tManufacturer#1\td18GiDsL6Wm2IsGXM,RZf1jCsgZAOjNYVThTRP4\t16-722-866-1658\tuests are furiously. regular tithes through the regular, final accounts cajole furiously above the q\n9208.70\tSupplier#000007769\tROMANIA\t40256\tManufacturer#5\trsimdze 5o9P Ht7xS\t29-964-424-9649\tlites was quickly above the furiously ironic requests. slyly even foxes against the blithely bold \n9201.47\tSupplier#000009690\tUNITED KINGDOM\t67183\tManufacturer#5\tCB BnUTlmi5zdeEl7R7\t33-121-267-9529\te even, even foxes. blithely ironic packages cajole regular packages. slyly final ide\n9192.10\tSupplier#000000115\tUNITED KINGDOM\t85098\tManufacturer#3\tnJ 2t0f7Ve,wL1,6WzGBJLNBUCKlsV\t33-597-248-1220\tes across the carefully express accounts boost caref\n9189.98\tSupplier#000001226\tGERMANY\t21225\tManufacturer#4\tqsLCqSvLyZfuXIpjz\t17-725-903-1381\t deposits. blithely bold excuses about the slyly bold forges wake \n9128.97\tSupplier#000004311\tRUSSIA\t146768\tManufacturer#5\tI8IjnXd7NSJRs594RxsRR0\t32-155-440-7120\trefully. blithely unusual asymptotes haggle \n9104.83\tSupplier#000008520\tGERMANY\t150974\tManufacturer#4\tRqRVDgD0ER J9 b41vR2,3\t17-728-804-1793\tly about the blithely ironic depths. slyly final theodolites among the fluffily bold ideas print\n9101.00\tSupplier#000005791\tROMANIA\t128254\tManufacturer#5\tzub2zCV,jhHPPQqi,P2INAjE1zI n66cOEoXFG\t29-549-251-5384\tts. notornis detect blithely above the carefully bold requests. blithely even package\n9094.57\tSupplier#000004582\tRUSSIA\t39575\tManufacturer#1\tWB0XkCSG3r,mnQ n,h9VIxjjr9ARHFvKgMDf\t32-587-577-1351\tjole. regular accounts sleep blithely frets. final pinto beans play furiously past the \n8996.87\tSupplier#000004702\tFRANCE\t102191\tManufacturer#5\t8XVcQK23akp\t16-811-269-8946\tickly final packages along the express plat\n8996.14\tSupplier#000009814\tROMANIA\t139813\tManufacturer#2\taf0O5pg83lPU4IDVmEylXZVqYZQzSDlYLAmR\t29-995-571-8781\t dependencies boost quickly across the furiously pending requests! unusual dolphins play sl\n8968.42\tSupplier#000010000\tROMANIA\t119999\tManufacturer#5\taTGLEusCiL4F PDBdv665XBJhPyCOB0i\t29-578-432-2146\tly regular foxes boost slyly. quickly special waters boost carefully ironi\n8936.82\tSupplier#000007043\tUNITED KINGDOM\t109512\tManufacturer#1\tFVajceZInZdbJE6Z9XsRUxrUEpiwHDrOXi,1Rz\t33-784-177-8208\tefully regular courts. furiousl\n8929.42\tSupplier#000008770\tFRANCE\t173735\tManufacturer#4\tR7cG26TtXrHAP9 HckhfRi\t16-242-746-9248\tcajole furiously unusual requests. quickly stealthy requests are. \n8920.59\tSupplier#000003967\tROMANIA\t26460\tManufacturer#1\teHoAXe62SY9\t29-194-731-3944\taters. express, pending instructions sleep. brave, r\n8920.59\tSupplier#000003967\tROMANIA\t173966\tManufacturer#2\teHoAXe62SY9\t29-194-731-3944\taters. express, pending instructions sleep. brave, r\n8913.96\tSupplier#000004603\tUNITED KINGDOM\t137063\tManufacturer#2\tOUzlvMUr7n,utLxmPNeYKSf3T24OXskxB5\t33-789-255-7342\t haggle slyly above the furiously regular pinto beans. even \n8877.82\tSupplier#000007967\tFRANCE\t167966\tManufacturer#5\tA3pi1BARM4nx6R,qrwFoRPU\t16-442-147-9345\tously foxes. express, ironic requests im\n8862.24\tSupplier#000003323\tROMANIA\t73322\tManufacturer#3\tW9 lYcsC9FwBqk3ItL\t29-736-951-3710\tly pending ideas sleep about the furiously unu\n8841.59\tSupplier#000005750\tROMANIA\t100729\tManufacturer#5\tErx3lAgu0g62iaHF9x50uMH4EgeN9hEG\t29-344-502-5481\tgainst the pinto beans. fluffily unusual dependencies affix slyly even deposits.\n8781.71\tSupplier#000003121\tROMANIA\t13120\tManufacturer#5\twNqTogx238ZYCamFb,50v,bj 4IbNFW9Bvw1xP\t29-707-291-5144\ts wake quickly ironic ideas\n8754.24\tSupplier#000009407\tUNITED KINGDOM\t179406\tManufacturer#4\tCHRCbkaWcf5B\t33-903-970-9604\te ironic requests. carefully even foxes above the furious\n8691.06\tSupplier#000004429\tUNITED KINGDOM\t126892\tManufacturer#2\tk,BQms5UhoAF1B2Asi,fLib\t33-964-337-5038\tefully express deposits kindle after the deposits. final \n8655.99\tSupplier#000006330\tRUSSIA\t193810\tManufacturer#2\tUozlaENr0ytKe2w6CeIEWFWn iO3S8Rae7Ou\t32-561-198-3705\tsymptotes use about the express dolphins. requests use after the express platelets. final, ex\n8638.36\tSupplier#000002920\tRUSSIA\t75398\tManufacturer#1\tJe2a8bszf3L\t32-122-621-7549\tly quickly ironic requests. even requests whithout t\n8638.36\tSupplier#000002920\tRUSSIA\t170402\tManufacturer#3\tJe2a8bszf3L\t32-122-621-7549\tly quickly ironic requests. even requests whithout t\n8607.69\tSupplier#000006003\tUNITED KINGDOM\t76002\tManufacturer#2\tEH9wADcEiuenM0NR08zDwMidw,52Y2RyILEiA\t33-416-807-5206\tar, pending accounts. pending depende\n8569.52\tSupplier#000005936\tRUSSIA\t5935\tManufacturer#5\tjXaNZ6vwnEWJ2ksLZJpjtgt0bY2a3AU\t32-644-251-7916\t. regular foxes nag carefully atop the regular, silent deposits. quickly regular packages \n8564.12\tSupplier#000000033\tGERMANY\t110032\tManufacturer#1\tgfeKpYw3400L0SDywXA6Ya1Qmq1w6YB9f3R\t17-138-897-9374\tn sauternes along the regular asymptotes are regularly along the \n8553.82\tSupplier#000003979\tROMANIA\t143978\tManufacturer#4\tBfmVhCAnCMY3jzpjUMy4CNWs9 HzpdQR7INJU\t29-124-646-4897\tic requests wake against the blithely unusual accounts. fluffily r\n8517.23\tSupplier#000009529\tRUSSIA\t37025\tManufacturer#5\te44R8o7JAIS9iMcr\t32-565-297-8775\tove the even courts. furiously special platelets \n8517.23\tSupplier#000009529\tRUSSIA\t59528\tManufacturer#2\te44R8o7JAIS9iMcr\t32-565-297-8775\tove the even courts. furiously special platelets \n8503.70\tSupplier#000006830\tRUSSIA\t44325\tManufacturer#4\tBC4WFCYRUZyaIgchU 4S\t32-147-878-5069\tpades cajole. furious packages among the carefully express excuses boost furiously across th\n8457.09\tSupplier#000009456\tUNITED KINGDOM\t19455\tManufacturer#1\t7SBhZs8gP1cJjT0Qf433YBk\t33-858-440-4349\tcing requests along the furiously unusual deposits promise among the furiously unus\n8441.40\tSupplier#000003817\tFRANCE\t141302\tManufacturer#2\thU3fz3xL78\t16-339-356-5115\tely even ideas. ideas wake slyly furiously unusual instructions. pinto beans sleep ag\n8432.89\tSupplier#000003990\tRUSSIA\t191470\tManufacturer#1\twehBBp1RQbfxAYDASS75MsywmsKHRVdkrvNe6m\t32-839-509-9301\tep furiously. packages should have to haggle slyly across the deposits. furiously regu\n8431.40\tSupplier#000002675\tROMANIA\t5174\tManufacturer#1\tHJFStOu9R5NGPOegKhgbzBdyvrG2yh8w\t29-474-643-1443\tithely express pinto beans. blithely even foxes haggle. furiously regular theodol\n8407.04\tSupplier#000005406\tRUSSIA\t162889\tManufacturer#4\tj7 gYF5RW8DC5UrjKC\t32-626-152-4621\tr the blithely regular packages. slyly ironic theodoli\n8386.08\tSupplier#000008518\tFRANCE\t36014\tManufacturer#3\t2jqzqqAVe9crMVGP,n9nTsQXulNLTUYoJjEDcqWV\t16-618-780-7481\tblithely bold pains are carefully platelets. finally regular pinto beans sleep carefully special\n8376.52\tSupplier#000005306\tUNITED KINGDOM\t190267\tManufacturer#5\t9t8Y8 QqSIsoADPt6NLdk,TP5zyRx41oBUlgoGc9\t33-632-514-7931\tly final accounts sleep special, regular requests. furiously regular\n8348.74\tSupplier#000008851\tFRANCE\t66344\tManufacturer#4\tnWxi7GwEbjhw1\t16-796-240-2472\t boldly final deposits. regular, even instructions detect slyly. fluffily unusual pinto bea\n8338.58\tSupplier#000007269\tFRANCE\t17268\tManufacturer#4\tZwhJSwABUoiB04,3\t16-267-277-4365\tiously final accounts. even pinto beans cajole slyly regular\n8328.46\tSupplier#000001744\tROMANIA\t69237\tManufacturer#5\toLo3fV64q2,FKHa3p,qHnS7Yzv,ps8\t29-330-728-5873\tep carefully-- even, careful packages are slyly along t\n8307.93\tSupplier#000003142\tGERMANY\t18139\tManufacturer#1\tdqblvV8dCNAorGlJ\t17-595-447-6026\tolites wake furiously regular decoys. final requests nod \n8231.61\tSupplier#000009558\tRUSSIA\t192000\tManufacturer#2\tmcdgen,yT1iJDHDS5fV\t32-762-137-5858\t foxes according to the furi\n8152.61\tSupplier#000002731\tROMANIA\t15227\tManufacturer#4\t nluXJCuY1tu\t29-805-463-2030\t special requests. even, regular warhorses affix among the final gr\n8109.09\tSupplier#000009186\tFRANCE\t99185\tManufacturer#1\twgfosrVPexl9pEXWywaqlBMDYYf\t16-668-570-1402\ttions haggle slyly about the sil\n8102.62\tSupplier#000003347\tUNITED KINGDOM\t18344\tManufacturer#5\tm CtXS2S16i\t33-454-274-8532\tegrate with the slyly bold instructions. special foxes haggle silently among the\n8046.07\tSupplier#000008780\tFRANCE\t191222\tManufacturer#3\tAczzuE0UK9osj ,Lx0Jmh\t16-473-215-6395\tonic platelets cajole after the regular instructions. permanently bold excuses\n8042.09\tSupplier#000003245\tRUSSIA\t135705\tManufacturer#4\tDh8Ikg39onrbOL4DyTfGw8a9oKUX3d9Y\t32-836-132-8872\tosits. packages cajole slyly. furiously regular deposits cajole slyly. q\n8042.09\tSupplier#000003245\tRUSSIA\t150729\tManufacturer#1\tDh8Ikg39onrbOL4DyTfGw8a9oKUX3d9Y\t32-836-132-8872\tosits. packages cajole slyly. furiously regular deposits cajole slyly. q\n7992.40\tSupplier#000006108\tFRANCE\t118574\tManufacturer#1\t8tBydnTDwUqfBfFV4l3\t16-974-998-8937\t ironic ideas? fluffily even instructions wake. blithel\n7980.65\tSupplier#000001288\tFRANCE\t13784\tManufacturer#4\tzE,7HgVPrCn\t16-646-464-8247\tully bold courts. escapades nag slyly. furiously fluffy theodo\n7950.37\tSupplier#000008101\tGERMANY\t33094\tManufacturer#5\tkkYvL6IuvojJgTNG IKkaXQDYgx8ILohj\t17-627-663-8014\tarefully unusual requests x-ray above the quickly final deposits. \n7937.93\tSupplier#000009012\tROMANIA\t83995\tManufacturer#2\tiUiTziH,Ek3i4lwSgunXMgrcTzwdb\t29-250-925-9690\tto the blithely ironic deposits nag sly\n7914.45\tSupplier#000001013\tRUSSIA\t125988\tManufacturer#2\triRcntps4KEDtYScjpMIWeYF6mNnR\t32-194-698-3365\t busily bold packages are dolphi\n7912.91\tSupplier#000004211\tGERMANY\t159180\tManufacturer#5\t2wQRVovHrm3,v03IKzfTd,1PYsFXQFFOG\t17-266-947-7315\tay furiously regular platelets. cou\n7912.91\tSupplier#000004211\tGERMANY\t184210\tManufacturer#4\t2wQRVovHrm3,v03IKzfTd,1PYsFXQFFOG\t17-266-947-7315\tay furiously regular platelets. cou\n7894.56\tSupplier#000007981\tGERMANY\t85472\tManufacturer#4\tNSJ96vMROAbeXP\t17-963-404-3760\tic platelets affix after the furiously\n7887.08\tSupplier#000009792\tGERMANY\t164759\tManufacturer#3\tY28ITVeYriT3kIGdV2K8fSZ V2UqT5H1Otz\t17-988-938-4296\tckly around the carefully fluffy theodolites. slyly ironic pack\n7871.50\tSupplier#000007206\tRUSSIA\t104695\tManufacturer#1\t3w fNCnrVmvJjE95sgWZzvW\t32-432-452-7731\tironic requests. furiously final theodolites cajole. final, express packages sleep. quickly reg\n7852.45\tSupplier#000005864\tRUSSIA\t8363\tManufacturer#4\tWCNfBPZeSXh3h,c\t32-454-883-3821\tusly unusual pinto beans. brave ideas sleep carefully quickly ironi\n7850.66\tSupplier#000001518\tUNITED KINGDOM\t86501\tManufacturer#1\tONda3YJiHKJOC\t33-730-383-3892\tifts haggle fluffily pending pai\n7843.52\tSupplier#000006683\tFRANCE\t11680\tManufacturer#4\t2Z0JGkiv01Y00oCFwUGfviIbhzCdy\t16-464-517-8943\t express, final pinto beans x-ray slyly asymptotes. unusual, unusual\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076267_271039718",
      "id": "20180115-083845_542565773",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\n\nThe next notebook in this class shows you how you can [*Visualize Results in Zeppelin*](/#/notebook/2DY6YKEVA).",
      "user": "anonymous",
      "dateUpdated": "2018-11-20 10:57:18.299",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eThe next notebook in this class shows you how you can \u003ca href\u003d\"/#/notebook/2DY6YKEVA\"\u003e\u003cem\u003eVisualize Results in Zeppelin\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542395076268_736091995",
      "id": "20180122-173624_509126525",
      "dateCreated": "2018-11-16 11:04:36.000",
      "dateStarted": "2018-11-20 10:57:18.300",
      "dateFinished": "2018-11-20 10:57:18.305",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2018-11-16 11:04:36.000",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542395076269_-481006599",
      "id": "20180125-142959_1101825868",
      "dateCreated": "2018-11-16 11:04:36.000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training/For Developers, Part II - Intermediate/d. The Life of a Query",
  "id": "2DWS5FM39",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}