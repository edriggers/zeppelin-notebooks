{
  "paragraphs": [
    {
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n\n# Tuning for Performance\n\nTuning for performance is a critical topic for any database. This is especially true for Splice Machine, because its architecture may influence performance in ways unexpected by experienced database users.\n\nSplice Machine uses a cost-based optimizer, which means that the database determines different plans (ways it can run) for a query. The optimizer estimates the *cost* of each possible plan, and chooses the lowest-cost option.\n\nThis Notebook introduces a number of tips you can employ to help generate the lowest cost plan and best performance for your queries, in these sections:\n\n* *Collecting Statistics*\n* *Performing Major Compactions*\n* *Creating Primary Keys and Indexes*\n* *Joining Tables*\n* *Selecting a Join Strategy*",
      "user": "anonymous",
      "dateUpdated": "2017-10-13T17:04:31-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n<h1>Tuning for Performance</h1>\n<p>Tuning for performance is a critical topic for any database. This is especially true for Splice Machine, because its architecture may influence performance in ways unexpected by experienced database users.</p>\n<p>Splice Machine uses a cost-based optimizer, which means that the database determines different plans (ways it can run) for a query. The optimizer estimates the <em>cost</em> of each possible plan, and chooses the lowest-cost option.</p>\n<p>This Notebook introduces a number of tips you can employ to help generate the lowest cost plan and best performance for your queries, in these sections:</p>\n<ul>\n  <li><em>Collecting Statistics</em></li>\n  <li><em>Performing Major Compactions</em></li>\n  <li><em>Creating Primary Keys and Indexes</em></li>\n  <li><em>Joining Tables</em></li>\n  <li><em>Selecting a Join Strategy</em></li>\n</ul>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1504793726558_-789508086",
      "id": "20170907-071526_832974549",
      "dateCreated": "2017-09-07T07:15:26-0700",
      "dateStarted": "2017-10-12T17:07:33-0700",
      "dateFinished": "2017-10-12T17:07:33-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:4429"
    },
    {
      "text": "%md\n## Collecting Statistics\n\nThe first commands you should learn about are the statistics collection commands:\n\n* `ANALYZE TABLE` collects statistics for a specific table\n* `ANALYZE SCHEMA` collects statistics for all tables in a schema.\n\nCollecting statistics drastically improves the estimation of costs that the optimizer relies on to find the best plan.\n\nLet's take a look at the impact of running statistics on our import test table from *Importing Data* Notebook. You can most easily understand this by viewing the output from the `EXPLAIN` command. First, we'll click the  <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> *Run* button in the next paragraph to display the execution plan for our unoptimized query:",
      "user": "anonymous",
      "dateUpdated": "2017-10-27T13:59:14-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Collecting Statistics</h2>\n<p>The first commands you should learn about are the statistics collection commands:</p>\n<ul>\n  <li><code>ANALYZE TABLE</code> collects statistics for a specific table</li>\n  <li><code>ANALYZE SCHEMA</code> collects statistics for all tables in a schema.</li>\n</ul>\n<p>Collecting statistics drastically improves the estimation of costs that the optimizer relies on to find the best plan.</p>\n<p>Let&rsquo;s take a look at the impact of running statistics on our import test table from <em>Importing Data</em> Notebook. You can most easily understand this by viewing the output from the <code>EXPLAIN</code> command. First, we&rsquo;ll click the <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> <em>Run</em> button in the next paragraph to display the execution plan for our unoptimized query:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505620792393_1588319693",
      "id": "20170916-205952_519670534",
      "dateCreated": "2017-09-16T20:59:52-0700",
      "dateStarted": "2017-10-27T13:59:14-0700",
      "dateFinished": "2017-10-27T13:59:14-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4430"
    },
    {
      "text": "%splicemachine\n\nexplain select * from import_example a, import_example b\nwhere a.i = 100",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:28:06-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=5,rows=360,updateMode=READ_ONLY (1),engine=control)\n  ->  ScrollInsensitive(n=4,totalCost=1744.96,outputRows=360,outputHeapSize=2.109 KB,partitions=1)\n    ->  NestedLoopJoin(n=3,totalCost=1657.16,outputRows=360,outputHeapSize=2.109 KB,partitions=1)\n      ->  TableScan[IMPORT_EXAMPLE(1616)](n=2,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=2.109 KB,partitions=1)\n      ->  TableScan[IMPORT_EXAMPLE(1616)](n=1,totalCost=4.04,scannedRows=20,outputRows=18,outputHeapSize=54 B,partitions=1,preds=[(A.I[0:1] = 100)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505620963675_-534444861",
      "id": "20170916-210243_1737687704",
      "dateCreated": "2017-09-16T21:02:43-0700",
      "dateStarted": "2018-02-02T13:28:06-0800",
      "dateFinished": "2018-02-02T13:28:06-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4431"
    },
    {
      "text": "%md\n<br />\n\nYou'll notice, as you probably did when running the `explain` in the *Importing Data* tutorial, that the row counts are way off! That's because we have __not__ run statistics yet. When statistics have not been run, the optimizer makes an estimate, but row counts will be rough approximations.\n\nLet's collect some statistics by analyzing our table, and then we'll rerun the `explain`. When you click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, you'll see that the row counts and costs are accurate.\n\n<p class=\"noteNote\">Splice Machine recommends collecting statistics after initial loading of data into a table, and recollecting them if you've made significant changes to a table. Running the <code>analyze</code> command can take a bit of time, depending on the size of your database.</p>\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:30:17-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>You&rsquo;ll notice, as you probably did when running the <code>explain</code> in the <em>Importing Data</em> tutorial, that the row counts are way off! That&rsquo;s because we have <strong>not</strong> run statistics yet. When statistics have not been run, the optimizer makes an estimate, but row counts will be rough approximations.</p>\n<p>Let&rsquo;s collect some statistics by analyzing our table, and then we&rsquo;ll rerun the <code>explain</code>. When you click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, you&rsquo;ll see that the row counts and costs are accurate.</p>\n<p class=\"noteNote\">Splice Machine recommends collecting statistics after initial loading of data into a table, and recollecting them if you've made significant changes to a table. Running the <code>analyze</code> command can take a bit of time, depending on the size of your database.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505621022087_1737790198",
      "id": "20170916-210342_1463344047",
      "dateCreated": "2017-09-16T21:03:42-0700",
      "dateStarted": "2018-02-02T13:30:17-0800",
      "dateFinished": "2018-02-02T13:30:17-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4432"
    },
    {
      "text": "%splicemachine\n\nanalyze table import_example;\n\nexplain select * from import_example a, import_example b\nwhere a.i = 100",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:29:59-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nSPLICE\tIMPORT_EXAMPLE\t-All-\t4\t108\t1\t2\t0.0\n"
          },
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=5,rows=4,updateMode=READ_ONLY (1),engine=control)\n  ->  ScrollInsensitive(n=4,totalCost=48.172,outputRows=4,outputHeapSize=216 B,partitions=1)\n    ->  NestedLoopJoin(n=3,totalCost=28.091,outputRows=4,outputHeapSize=216 B,partitions=1)\n      ->  TableScan[IMPORT_EXAMPLE(1616)](n=2,totalCost=4.005,scannedRows=4,outputRows=4,outputHeapSize=216 B,partitions=1)\n      ->  TableScan[IMPORT_EXAMPLE(1616)](n=1,totalCost=4.005,scannedRows=4,outputRows=1,outputHeapSize=27 B,partitions=1,preds=[(A.I[0:1] = 100)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505621139100_-1163046298",
      "id": "20170916-210539_1235333677",
      "dateCreated": "2017-09-16T21:05:39-0700",
      "dateStarted": "2018-02-02T13:29:50-0800",
      "dateFinished": "2018-02-02T13:29:53-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4433"
    },
    {
      "text": "%md\n## Major Compactions\n\nSplice Machine stores its data in HBase HFiles. HBase is good at handling the creation of HFiles as needed; however, it's important to be aware that HBase does perform asynchronous maintenance tasks to keep HFile working as efficiently as possible:\n\n* HBase kicks off *Minor compactions* as a minor HFiles housekeeping task.\n* HBase triggers *Major compactions* less frequently; these do much more housekeeping.\n\nIf you've just imported a lot of data (say 10M rows or so), it may be worth your while to manually trigger a major compaction using Splice Machine's  `PERFORM_MAJOR_COMPACTION_ON_TABLE` command. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which triggers a major compaction of your `import_example` table.\n\n<p class=\"noteIcon\">Though major compactions can take some time to complete, they are worth doing for large tables that are used in a lot of analytic queries.</p>",
      "user": "anonymous",
      "dateUpdated": "2017-10-19T10:52:19-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Major Compactions</h2>\n<p>Splice Machine stores its data in HBase HFiles. HBase is good at handling the creation of HFiles as needed; however, it&rsquo;s important to be aware that HBase does perform asynchronous maintenance tasks to keep HFile working as efficiently as possible:</p>\n<ul>\n  <li>HBase kicks off <em>Minor compactions</em> as a minor HFiles housekeeping task.</li>\n  <li>HBase triggers <em>Major compactions</em> less frequently; these do much more housekeeping.</li>\n</ul>\n<p>If you&rsquo;ve just imported a lot of data (say 10M rows or so), it may be worth your while to manually trigger a major compaction using Splice Machine&rsquo;s <code>PERFORM_MAJOR_COMPACTION_ON_TABLE</code> command. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which triggers a major compaction of your <code>import_example</code> table.</p>\n<p class=\"noteIcon\">Though major compactions can take some time to complete, they are worth doing for large tables that are used in a lot of analytic queries.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505621376828_-1226024169",
      "id": "20170916-210936_1181972281",
      "dateCreated": "2017-09-16T21:09:36-0700",
      "dateStarted": "2017-10-19T10:52:19-0700",
      "dateFinished": "2017-10-19T10:52:19-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4434"
    },
    {
      "text": "%splicemachine\n\ncall SYSCS_UTIL.SYSCS_PERFORM_MAJOR_COMPACTION_ON_TABLE('SPLICE','IMPORT_EXAMPLE')",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:30:48-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505621582232_1015059909",
      "id": "20170916-211302_1479353620",
      "dateCreated": "2017-09-16T21:13:02-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4435",
      "dateFinished": "2018-02-02T13:30:48-0800",
      "dateStarted": "2018-02-02T13:30:48-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : -1"
          }
        ]
      }
    },
    {
      "text": "%md\n## Creating Primary Keys and Indexes\n\nSplice Machine, like other databases, supports the creation of primary keys and indexes; in Splice Machine:\n\n* the primary key becomes the key for the HBase table\n* an index is another HBase table whose key consists of the columns in the index\n* compound (multi-column) primary keys and indexes are supported\n\n<p class=\"noteIcon\">As with all databases that support indexes, an index improperly used can actually <strong>slow down</strong> a query. This is especially true with Splice Machine because it is a distributed system, which means that there may be a significant cost to looking up the non-indexed information in a query. This is why you may see Splice Machine intentionally <strong>NOT</strong> use an index when one is available.</p>\n\nLet's run through some quick examples. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which creates an example table; this should take less than a minute.",
      "user": "anonymous",
      "dateUpdated": "2017-10-19T10:55:20-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Creating Primary Keys and Indexes</h2>\n<p>Splice Machine, like other databases, supports the creation of primary keys and indexes; in Splice Machine:</p>\n<ul>\n  <li>the primary key becomes the key for the HBase table</li>\n  <li>an index is another HBase table whose key consists of the columns in the index</li>\n  <li>compound (multi-column) primary keys and indexes are supported</li>\n</ul>\n<p class=\"noteIcon\">As with all databases that support indexes, an index improperly used can actually <strong>slow down</strong> a query. This is especially true with Splice Machine because it is a distributed system, which means that there may be a significant cost to looking up the non-indexed information in a query. This is why you may see Splice Machine intentionally <strong>NOT</strong> use an index when one is available.</p>\n<p>Let&rsquo;s run through some quick examples. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which creates an example table; this should take less than a minute.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505615387161_-758382032",
      "id": "20170916-192947_215578585",
      "dateCreated": "2017-09-16T19:29:47-0700",
      "dateStarted": "2017-10-19T10:55:20-0700",
      "dateFinished": "2017-10-19T10:55:20-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4436"
    },
    {
      "text": "%splicemachine\n\ncreate table index_example (i int primary key, j int);\ninsert into index_example values (1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10);\ninsert into index_example select i+10,j+10 from index_example;\ninsert into index_example select i+20,j+20 from index_example;\ninsert into index_example select i+40,j+40 from index_example;\ninsert into index_example select i+80,j+80 from index_example;\ninsert into index_example select i+160,j+160 from index_example;\ninsert into index_example select i+320,j+320 from index_example;\ninsert into index_example select i+640,j+640 from index_example;\ninsert into index_example select i+1280,j+1280 from index_example;\ninsert into index_example select i+2560,j+2560 from index_example;\ninsert into index_example select i+6000,j+6000 from index_example;\ninsert into index_example select i+12000,j+12000 from index_example;\ninsert into index_example select i+24000,j+24000 from index_example;\ninsert into index_example select i+48000,j+48000 from index_example;\ninsert into index_example select i+96000,j+96000 from index_example;\ninsert into index_example select i+200000,j+200000 from index_example;\ninsert into index_example select i+400000,j+400000 from index_example;\ninsert into index_example select i+800000,j+800000 from index_example;\nanalyze table index_example",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:31:39-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {
          "19": {
            "graph": {
              "mode": "table",
              "height": 84,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505622678920_-184057917",
      "id": "20170916-213118_1059322916",
      "dateCreated": "2017-09-16T21:31:18-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4437",
      "dateFinished": "2018-02-02T13:31:22-0800",
      "dateStarted": "2018-02-02T13:31:03-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 10"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 10"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 20"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 40"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 80"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 160"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 320"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 640"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 1280"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 2560"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 5120"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 10240"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 20480"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 40960"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 81920"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 163840"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 327680"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 655360"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nSPLICE\tINDEX_EXAMPLE\t-All-\t1310720\t10485760\t1\t2\t0.0\n"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nAs you can see from the results of the above operation, we now have:\n\n* about 1.3 million rows of data\n* a primary key on `i`\n\nClick <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> in the next paragraph  to do lookups on `i`. You'll see that the primary key will find the record for us quickly:",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:31:43-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>As you can see from the results of the above operation, we now have:</p>\n<ul>\n  <li>about 1.3 million rows of data</li>\n  <li>a primary key on <code>i</code></li>\n</ul>\n<p>Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> in the next paragraph to do lookups on <code>i</code>. You&rsquo;ll see that the primary key will find the record for us quickly:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505666388896_1076552014",
      "id": "20170917-093948_1155921816",
      "dateCreated": "2017-09-17T09:39:48-0700",
      "dateStarted": "2018-02-02T13:31:43-0800",
      "dateFinished": "2018-02-02T13:31:43-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4438"
    },
    {
      "text": "%splicemachine\n\nselect * from index_example where i = 300000",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:32:01-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505621729088_-1406398071",
      "id": "20170916-211529_1481528006",
      "dateCreated": "2017-09-16T21:15:29-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4439",
      "dateFinished": "2018-02-02T13:31:52-0800",
      "dateStarted": "2018-02-02T13:31:52-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "I\tJ\n300000\t300000\n"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nThat query should have come back almost immediately. But what happens if we query on j?",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:34:59-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>That query should have come back almost immediately. But what happens if we query on j?</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505666600007_-413674066",
      "id": "20170917-094320_895722307",
      "dateCreated": "2017-09-17T09:43:20-0700",
      "dateStarted": "2018-02-02T13:34:59-0800",
      "dateFinished": "2018-02-02T13:34:59-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4440"
    },
    {
      "text": "%splicemachine\n\nselect * from index_example where j = 300000",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:35:14-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505666626982_-330922404",
      "id": "20170917-094346_1396272310",
      "dateCreated": "2017-09-17T09:43:46-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4441",
      "dateFinished": "2018-02-02T13:35:06-0800",
      "dateStarted": "2018-02-02T13:35:03-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "I\tJ\n300000\t300000\n"
          }
        ]
      }
    },
    {
      "text": "%md\n### Adding an Index\n\nYou probably noticed this query required more time to complete; this is because there was no key to go straight to the record. Now, let's add an index on j:",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:36:56-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Adding an Index</h3>\n<p>You probably noticed this query required more time to complete; this is because there was no key to go straight to the record. Now, let&rsquo;s add an index on j:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505666644605_-1525167666",
      "id": "20170917-094404_1058792111",
      "dateCreated": "2017-09-17T09:44:04-0700",
      "dateStarted": "2018-02-02T13:36:56-0800",
      "dateFinished": "2018-02-02T13:36:56-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4442"
    },
    {
      "text": "%splicemachine\n\ncreate index ij on index_example (j)",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:35:26-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505666749910_1704984885",
      "id": "20170917-094549_1951923955",
      "dateCreated": "2017-09-17T09:45:49-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4443",
      "dateFinished": "2018-02-02T13:35:35-0800",
      "dateStarted": "2018-02-02T13:35:26-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nIf you rerun the previous j query, it now runs quickly.  This is because the optimizer considered both plan options available to it (with and without an index), found a lower cost for the plan using the index, and executed that plan.\n\nThis is where `EXPLAIN` can be quite useful as well: you can discover if an index is being used or not. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> in the next paragraph to run the `explain`:\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:35:43-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>If you rerun the previous j query, it now runs quickly. This is because the optimizer considered both plan options available to it (with and without an index), found a lower cost for the plan using the index, and executed that plan.</p>\n<p>This is where <code>EXPLAIN</code> can be quite useful as well: you can discover if an index is being used or not. Click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> in the next paragraph to run the <code>explain</code>:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505666893251_1444692125",
      "id": "20170917-094813_1546634594",
      "dateCreated": "2017-09-17T09:48:13-0700",
      "dateStarted": "2018-02-02T13:35:43-0800",
      "dateFinished": "2018-02-02T13:35:43-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4444"
    },
    {
      "text": "%splicemachine\n\nexplain select j from index_example where j = 300000",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:35:47-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505668391990_1158752529",
      "id": "20170917-101311_771962907",
      "dateCreated": "2017-09-17T10:13:11-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4445",
      "dateFinished": "2018-02-02T13:35:47-0800",
      "dateStarted": "2018-02-02T13:35:47-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=3,rows=1,updateMode=READ_ONLY (1),engine=control)\n  ->  ScrollInsensitive(n=2,totalCost=8,outputRows=1,outputHeapSize=0 B,partitions=1)\n    ->  IndexScan[IJ(1649)](n=1,totalCost=4,scannedRows=1,outputRows=1,outputHeapSize=0 B,partitions=1,baseTable=INDEX_EXAMPLE(1632),preds=[(J[0:1] = 300000)])\n"
          }
        ]
      }
    },
    {
      "text": "%md\n### When an Index Doesn't Help\n\nYou can see that this performs an *IndexScan* (vs. a *TableScan*), and it tells you which index it uses, as well as the usual cost information, etc.\n\nLet's get into a more complicated case where it is __not__ a good idea to use a particular index. In the next paragraph, we start with an `EXPLAIN` on our query:",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:37:41-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>When an Index Doesn&rsquo;t Help</h3>\n<p>You can see that this performs an <em>IndexScan</em> (vs. a <em>TableScan</em>), and it tells you which index it uses, as well as the usual cost information, etc.</p>\n<p>Let&rsquo;s get into a more complicated case where it is <strong>not</strong> a good idea to use a particular index. In the next paragraph, we start with an <code>EXPLAIN</code> on our query:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505668349743_1816444930",
      "id": "20170917-101229_355819114",
      "dateCreated": "2017-09-17T10:12:29-0700",
      "dateStarted": "2018-02-02T13:37:41-0800",
      "dateFinished": "2018-02-02T13:37:41-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4446"
    },
    {
      "text": "%splicemachine\n\nexplain select count(*) from\n  (select j,i from index_example\n     where j > 950000) a",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:35:57-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505667200382_1773300502",
      "id": "20170917-095320_239489898",
      "dateCreated": "2017-09-17T09:53:20-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4447",
      "dateFinished": "2018-02-02T13:35:57-0800",
      "dateStarted": "2018-02-02T13:35:57-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=6,rows=1,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=5,totalCost=6707.42,outputRows=1,outputHeapSize=0 B,partitions=1)\n    ->  ProjectRestrict(n=4,totalCost=1419.578,outputRows=524288,outputHeapSize=0 B,partitions=1)\n      ->  GroupBy(n=3,totalCost=1419.578,outputRows=524288,outputHeapSize=4 MB,partitions=1)\n        ->  ProjectRestrict(n=2,totalCost=1419.578,outputRows=524288,outputHeapSize=4 MB,partitions=1)\n          ->  TableScan[INDEX_EXAMPLE(1632)](n=1,totalCost=1419.578,scannedRows=1310720,outputRows=524288,outputHeapSize=4 MB,partitions=1,preds=[(J[0:2] > 950000)])\n"
          }
        ]
      }
    },
    {
      "text": "%md\n### Adding Hints\n\nNote that the optimizer chose the plan that uses the actual table, NOT the index; why did it make this choice?\n\nWe can learn more about this by using a Splice Machine *hint* to force use of an index. We use an `index` hint in next paragraph:\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:40:57-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Adding Hints</h3>\n<p>Note that the optimizer chose the plan that uses the actual table, NOT the index; why did it make this choice?</p>\n<p>We can learn more about this by using a Splice Machine <em>hint</em> to force use of an index. We use an <code>index</code> hint in next paragraph:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505668682109_257284211",
      "id": "20170917-101802_1032211186",
      "dateCreated": "2017-09-17T10:18:02-0700",
      "dateStarted": "2018-02-02T13:40:57-0800",
      "dateFinished": "2018-02-02T13:40:57-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4448"
    },
    {
      "text": "%splicemachine\n\nexplain select count(*) from\n  (select j,i from index_example --splice-properties index=ij\n     where j > 950000) a",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:36:12-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505668890812_-1686945570",
      "id": "20170917-102130_1017436977",
      "dateCreated": "2017-09-17T10:21:30-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4449",
      "dateFinished": "2018-02-02T13:36:12-0800",
      "dateStarted": "2018-02-02T13:36:12-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=7,rows=1,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=6,totalCost=2102993.101,outputRows=1,outputHeapSize=0 B,partitions=1)\n    ->  ProjectRestrict(n=5,totalCost=2097701.26,outputRows=524288,outputHeapSize=0 B,partitions=1)\n      ->  GroupBy(n=4,totalCost=2097701.26,outputRows=524288,outputHeapSize=4 MB,partitions=1)\n        ->  ProjectRestrict(n=3,totalCost=2097701.26,outputRows=524288,outputHeapSize=4 MB,partitions=1)\n          ->  IndexLookup(n=2,totalCost=2097701.26,outputRows=524288,outputHeapSize=4 MB,partitions=1)\n            ->  IndexScan[IJ(1649)](n=1,totalCost=549.26,scannedRows=524288,outputRows=524288,outputHeapSize=4 MB,partitions=1,baseTable=INDEX_EXAMPLE(1632),preds=[(J[1:2] > 950000)])\n"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nYou add a Splice Machine __hint__ to your queries by appending a specially formatted *comment*. These hints:\n\n* are always prefaced by `--splice-properties`\n* must always be placed at the end of a line\n* can be used either after a table name or after a `FROM` clause\n\nThe *index hint* in the above example  (`--splice-properties index=ij`) is an explicit instruction to the optimizer to use that named index now. And the results of using the index are evident in the generated plan, which now uses `IndexScan` instead of the `TableScan`. We can also see that the total cost (at the top of each plan) is much higher when using the index. Why is that?\n\nIt's because the index only contains information for column `J`, and this query calls for information about column `I` as well. This means that we still have to get information from the base table for column I, and we have to do it *many* times.  You can see this in the plan: there is a step, `IndexLookup`, that is part of the plan.  You'll also see the cost jump up on that step, because for every row of where column J matches the criteria that we need to scan (and the optimizer estimates there are more then a million matches), we have to go back over to the base table to get the information about column `I`.  In distributed architectures like Splice Machine, this can be a very expensive operation.\n\nIf you want, you can run these these two queries by removing the `explains`; you'll noticed a significant performance difference between them.\n\n<p class=\"noteNote\">If we change the <code>&gt;</code> to <code>=</code> in the query, things change dramatically. Even though there is still an <code>IndexLookup</code>, it's only called once, so clearly use of the Index vs the Table is a better and faster plan.  Try it and see!</p>\n\nWhen faced with situations where you have __many__ matching rows however, like our original query, you can address the issue by creating a compound index that includes both j and i in it:",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:41:26-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>You add a Splice Machine <strong>hint</strong> to your queries by appending a specially formatted <em>comment</em>. These hints:</p>\n<ul>\n  <li>are always prefaced by <code>--splice-properties</code></li>\n  <li>must always be placed at the end of a line</li>\n  <li>can be used either after a table name or after a <code>FROM</code> clause</li>\n</ul>\n<p>The <em>index hint</em> in the above example (<code>--splice-properties index=ij</code>) is an explicit instruction to the optimizer to use that named index now. And the results of using the index are evident in the generated plan, which now uses <code>IndexScan</code> instead of the <code>TableScan</code>. We can also see that the total cost (at the top of each plan) is much higher when using the index. Why is that?</p>\n<p>It&rsquo;s because the index only contains information for column <code>J</code>, and this query calls for information about column <code>I</code> as well. This means that we still have to get information from the base table for column I, and we have to do it <em>many</em> times. You can see this in the plan: there is a step, <code>IndexLookup</code>, that is part of the plan. You&rsquo;ll also see the cost jump up on that step, because for every row of where column J matches the criteria that we need to scan (and the optimizer estimates there are more then a million matches), we have to go back over to the base table to get the information about column <code>I</code>. In distributed architectures like Splice Machine, this can be a very expensive operation.</p>\n<p>If you want, you can run these these two queries by removing the <code>explains</code>; you&rsquo;ll noticed a significant performance difference between them.</p>\n<p class=\"noteNote\">If we change the <code>&gt;</code> to <code>=</code> in the query, things change dramatically. Even though there is still an <code>IndexLookup</code>, it's only called once, so clearly use of the Index vs the Table is a better and faster plan.  Try it and see!</p>\n<p>When faced with situations where you have <strong>many</strong> matching rows however, like our original query, you can address the issue by creating a compound index that includes both j and i in it:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505668949115_1553886360",
      "id": "20170917-102229_72455203",
      "dateCreated": "2017-09-17T10:22:29-0700",
      "dateStarted": "2018-02-02T13:41:26-0800",
      "dateFinished": "2018-02-02T13:41:26-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4450"
    },
    {
      "text": "%splicemachine\ncreate index iji on index_example (j, i)",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:41:55-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505669890113_1811837213",
      "id": "20170917-103810_1471531808",
      "dateCreated": "2017-09-17T10:38:10-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4451",
      "dateFinished": "2018-02-02T13:42:03-0800",
      "dateStarted": "2018-02-02T13:41:55-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nRunning the original query will now choose this index, and run faster.",
      "user": "anonymous",
      "dateUpdated": "2017-10-13T17:24:14-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>Running the original query will now choose this index, and run faster.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505670135457_-748561093",
      "id": "20170917-104215_809625150",
      "dateCreated": "2017-09-17T10:42:15-0700",
      "dateStarted": "2017-10-13T17:24:14-0700",
      "dateFinished": "2017-10-13T17:24:14-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4452"
    },
    {
      "text": "%md\n\n## Joining Tables\n\nFew queries are written without joins between tables.  Shortly we will get into the join strategies Splice Machine employs, but first let's cover what it means to be on the *right* or *left* side of a join.  To begin, we'll click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which creates some tables and then runs an `EXPLAIN` on a join on those tables:\n",
      "user": "anonymous",
      "dateUpdated": "2017-10-19T10:59:18-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Joining Tables</h2>\n<p>Few queries are written without joins between tables. Shortly we will get into the join strategies Splice Machine employs, but first let&rsquo;s cover what it means to be on the <em>right</em> or <em>left</em> side of a join. To begin, we&rsquo;ll click <img class=\"inline\" src=\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt=\"Run Zep Paragraph Icon\"> to run the next paragraph, which creates some tables and then runs an <code>EXPLAIN</code> on a join on those tables:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505672195318_1807203552",
      "id": "20170917-111635_657093325",
      "dateCreated": "2017-09-17T11:16:35-0700",
      "dateStarted": "2017-10-19T10:59:18-0700",
      "dateFinished": "2017-10-19T10:59:18-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4453"
    },
    {
      "text": "%splicemachine\n\ncreate table join1 (i int);\ncreate table join2 (i int);\ncreate table join3 (i int);\ncreate table join4 (i int);\n\nexplain select * from join1 a, join2 b, join3 c, join4 d\nwhere a.i = b.i\nand a.i = c.i\nand a.i = d.i\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:59:01-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505672191538_2019954369",
      "id": "20170917-111631_1232092004",
      "dateCreated": "2017-09-17T11:16:31-0700",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4454",
      "dateFinished": "2018-02-02T13:59:07-0800",
      "dateStarted": "2018-02-02T13:59:01-0800",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=9,rows=17,updateMode=READ_ONLY (1),engine=control)\n  ->  ScrollInsensitive(n=8,totalCost=42.71,outputRows=17,outputHeapSize=76 B,partitions=1)\n    ->  BroadcastJoin(n=7,totalCost=28.76,outputRows=17,outputHeapSize=76 B,partitions=1,preds=[(A.I[12:1] = D.I[12:4])])\n      ->  TableScan[JOIN4(1728)](n=6,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=76 B,partitions=1)\n      ->  BroadcastJoin(n=5,totalCost=20.52,outputRows=16,outputHeapSize=56 B,partitions=1,preds=[(A.I[8:1] = C.I[8:3])])\n        ->  TableScan[JOIN3(1712)](n=4,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=56 B,partitions=1)\n        ->  BroadcastJoin(n=3,totalCost=12.28,outputRows=16,outputHeapSize=36 B,partitions=1,preds=[(A.I[4:1] = B.I[4:2])])\n          ->  TableScan[JOIN2(1696)](n=2,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=36 B,partitions=1)\n          ->  TableScan[JOIN1(1680)](n=1,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=20 B,partitions=1)\n"
          }
        ]
      }
    },
    {
      "text": "%md\n<br />\n\nFor now, we'll ignore costs and join strategies and focus on the __order__ in which tables show up in the plan we just generated (with our `explain`).  Again, we need to think through this *bottom-up:* when examining our plan:\n\n* The bottom-most table (`JOIN1`) is the *left-hand side*\n* The next up table (`JOIN2`) is the *right-hand side*\n* Each join needs a left-hand side and a right-hand side, so the bottom-most join will be joining tables `JOIN1` and `JOIN2`.\n* The __result__ of this bottom-most join becomes the __NEW__ *left-hand side*, and the table above it (in this case `JOIN3`) will be the *right-hand side* for the next join, and so on.\n\nIt is important to know what table (or join result) represents the left-hand or right-hand side of the join.",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:59:18-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<br />\n<p>For now, we&rsquo;ll ignore costs and join strategies and focus on the <strong>order</strong> in which tables show up in the plan we just generated (with our <code>explain</code>). Again, we need to think through this <em>bottom-up:</em> when examining our plan:</p>\n<ul>\n  <li>The bottom-most table (<code>JOIN1</code>) is the <em>left-hand side</em></li>\n  <li>The next up table (<code>JOIN2</code>) is the <em>right-hand side</em></li>\n  <li>Each join needs a left-hand side and a right-hand side, so the bottom-most join will be joining tables <code>JOIN1</code> and <code>JOIN2</code>.</li>\n  <li>The <strong>result</strong> of this bottom-most join becomes the <strong>NEW</strong> <em>left-hand side</em>, and the table above it (in this case <code>JOIN3</code>) will be the <em>right-hand side</em> for the next join, and so on.</li>\n</ul>\n<p>It is important to know what table (or join result) represents the left-hand or right-hand side of the join.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505672832586_1388111308",
      "id": "20170917-112712_589343175",
      "dateCreated": "2017-09-17T11:27:12-0700",
      "dateStarted": "2018-02-02T13:59:18-0800",
      "dateFinished": "2018-02-02T13:59:18-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4455"
    },
    {
      "text": "%md\n### Join Strategies\n\nDatabases employ different algorithms to efficiently perform a join, depending on the circumstances.  Here are the join strategies Splice Machine employs:\n\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Join Strategy</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">SortMerge</td>\n            <td>Sorts the data being joined and performs a merge on the results</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Merge</td>\n            <td>Performs a merge, but is not valid unless the data is not pre-sorted (via primary key or index) on the join key</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Broadcast</td>\n            <td>Requires the right-hand-side table to be small (< 1 million rows), so that this table can be copied to all nodes for local joins on each node</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">NestedLoop</td>\n            <td>The general-purpose join strategy</td>\n        </tr>\n    </tbody>\n</table>\n\nEach join strategy has its strengths and weaknesses, which are summarized here:\n\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Join Strategy</th>\n            <th>Strengths and Weaknesses</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">SortMerge</td>\n            <td><p>On queries processing a lot of data, when a Merge or Broadcast is not valid, SortMerge will be used.</p>\n                <p>It is slower than Merge and Broadcast, but can be used in more instances.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Merge</td>\n            <td><p>Generally the fastest query to process many rows of data on both the right and left side of the join.</p>\n                <p>However the data must be sorted on the join keys on both the right and left sides.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Broadcast</td>\n            <td><p>A very fast join algorithm as long as the *right-hand* table of the join has 1 million or fewer rows.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">NestedLoop</td>\n            <td><p>The fastest join for *transaction-type* queries (i.e. keyed lookups with few rows on each side of the join).</p>\n                <p>If there are many rows on the right and/or left side, this query can be very slow.</p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\nWhen planning a query with joins, the optimizer will choose the join strategy with the lowest cost.  Its choice however might again influence how you make your own changes (for example, add an index so that a SortMerge becomes a Merge).  We will see more examples of this in the next Tutorial.\n\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:59:32-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Join Strategies</h3>\n<p>Databases employ different algorithms to efficiently perform a join, depending on the circumstances. Here are the join strategies Splice Machine employs:</p>\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Join Strategy</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">SortMerge</td>\n            <td>Sorts the data being joined and performs a merge on the results</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Merge</td>\n            <td>Performs a merge, but is not valid unless the data is not pre-sorted (via primary key or index) on the join key</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Broadcast</td>\n            <td>Requires the right-hand-side table to be small (< 1 million rows), so that this table can be copied to all nodes for local joins on each node</td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">NestedLoop</td>\n            <td>The general-purpose join strategy</td>\n        </tr>\n    </tbody>\n</table>\n<p>Each join strategy has its strengths and weaknesses, which are summarized here:</p>\n<table class=\"splicezep\">\n    <col />\n    <col />\n    <thead>\n        <tr>\n            <th>Join Strategy</th>\n            <th>Strengths and Weaknesses</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"CodeFont\">SortMerge</td>\n            <td><p>On queries processing a lot of data, when a Merge or Broadcast is not valid, SortMerge will be used.</p>\n                <p>It is slower than Merge and Broadcast, but can be used in more instances.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Merge</td>\n            <td><p>Generally the fastest query to process many rows of data on both the right and left side of the join.</p>\n                <p>However the data must be sorted on the join keys on both the right and left sides.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">Broadcast</td>\n            <td><p>A very fast join algorithm as long as the *right-hand* table of the join has 1 million or fewer rows.</p>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"CodeFont\">NestedLoop</td>\n            <td><p>The fastest join for *transaction-type* queries (i.e. keyed lookups with few rows on each side of the join).</p>\n                <p>If there are many rows on the right and/or left side, this query can be very slow.</p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<p>When planning a query with joins, the optimizer will choose the join strategy with the lowest cost. Its choice however might again influence how you make your own changes (for example, add an index so that a SortMerge becomes a Merge). We will see more examples of this in the next Tutorial.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505671174008_1354959667",
      "id": "20170917-105934_534798535",
      "dateCreated": "2017-09-17T10:59:34-0700",
      "dateStarted": "2018-02-02T13:59:32-0800",
      "dateFinished": "2018-02-02T13:59:32-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4456"
    },
    {
      "text": "%md\n\n## Where to Go Next\n\nWe'll get deeper into tuning queries in our next tutorial, <a href=\"/#/notebook/2CVPHXRZN\">Using the DB Console UI</a>.\n\nOur documentation has more information about the strategies described here; these topics are particularly relevant:\n\n* <a href=\"https://doc.splicemachine.com/developers_tuning_intro.html\" target=\"blank\">The <em>Tuning and Debugging</em> section of our Developer's Guide</a>\n* <a href=\"https://doc.splicemachine.com/sqlref_joinops_intro.html\" target=\"blank\">The <em>Join Operations</em> section of our SQL Reference Manual.</a>\n",
      "user": "anonymous",
      "dateUpdated": "2018-02-02T13:59:36-0800",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>We&rsquo;ll get deeper into tuning queries in our next tutorial, <a href=\"/#/notebook/2CVPHXRZN\">Using the DB Console UI</a>.</p>\n<p>Our documentation has more information about the strategies described here; these topics are particularly relevant:</p>\n<ul>\n  <li>\n  <a href=\"https://doc.splicemachine.com/developers_tuning_intro.html\" target=\"blank\">The <em>Tuning and Debugging</em> section of our Developer's Guide</a></li>\n  <li>\n  <a href=\"https://doc.splicemachine.com/sqlref_joinops_intro.html\" target=\"blank\">The <em>Join Operations</em> section of our SQL Reference Manual.</a></li>\n</ul>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505670507460_840383466",
      "id": "20170917-104827_2026891470",
      "dateCreated": "2017-09-17T10:48:27-0700",
      "dateStarted": "2018-02-02T13:59:36-0800",
      "dateFinished": "2018-02-02T13:59:36-0800",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4457"
    },
    {
      "text": "\n",
      "user": "anonymous",
      "dateUpdated": "2017-10-13T17:04:32-0700",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505673146188_-1534412333",
      "id": "20170917-113226_2128468934",
      "dateCreated": "2017-09-17T11:32:26-0700",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:4458"
    }
  ],
  "name": "2. Tutorials / 5. Tuning for Performance",
  "id": "2CS27TE2A",
  "angularObjects": {
    "2CXCMFNBY:shared_process": [],
    "2CUTP4DV1:shared_process": [],
    "2CY73S1Z7:shared_process": [],
    "2CW568HMS:shared_process": [],
    "2CW8MZGCK:shared_process": [],
    "2CVM35CHN:shared_process": [],
    "2CX248U3T:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}
