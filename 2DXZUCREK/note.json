{
  "paragraphs": [
    {
      "text": "%md\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\n# Creating Custom Stored Procedures\n\nThis notebook describes how to create and use custom stored procedures written in Java in Splice Machine, in these sections:\n\n* *Your Stored Procedure Development Environment*\n* *Local Deployment of the Jar File*\n* *Running Your Custom Procedure Locally*\n\nYou can create custom functions and procedures to deploy in your database; you can then call them as needed from your SQL.\n\n\u003cp class\u003d\"noteIcon\"\u003eThis notebook describes how to create custom stored procedures. You will need to adapt this to your own development environment.\u003c/p\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 21:50:46.052",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003ch1\u003eCreating Custom Stored Procedures\u003c/h1\u003e\n\u003cp\u003eThis notebook describes how to create and use custom stored procedures written in Java in Splice Machine, in these sections:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cem\u003eYour Stored Procedure Development Environment\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eLocal Deployment of the Jar File\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eRunning Your Custom Procedure Locally\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can create custom functions and procedures to deploy in your database; you can then call them as needed from your SQL.\u003c/p\u003e\n\u003cp class\u003d\"noteIcon\"\u003eThis notebook describes how to create custom stored procedures. You will need to adapt this to your own development environment.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025850_-533276268",
      "id": "20171130-160641_2246962",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Your Stored Procedure Development Environment\n\nThe *environment* in which your stored procedure code is developed may change depending upon your need: we recommend that you flesh out the actual functionality of your custom code in a local (standalone) Splice Machine envirmonment. Once you have refined your code and it behaves to your satisfaction in your local environment, you can then re-deploy the developed code to your target instance. \n\nThis notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment. Replace any instances of `\u003cyour-file-name\u003e` in the examples with your specific file name, rememberig to remove the `\u003c` and `\u003e` brackets.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 07:44:37.175",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eYour Stored Procedure Development Environment\u003c/h2\u003e\n\u003cp\u003eThe \u003cem\u003eenvironment\u003c/em\u003e in which your stored procedure code is developed may change depending upon your need: we recommend that you flesh out the actual functionality of your custom code in a local (standalone) Splice Machine envirmonment. Once you have refined your code and it behaves to your satisfaction in your local environment, you can then re-deploy the developed code to your target instance. \u003c/p\u003e\n\u003cp\u003eThis notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment. Replace any instances of \u003ccode\u003e\u0026lt;your-file-name\u0026gt;\u003c/code\u003e in the examples with your specific file name, rememberig to remove the \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e brackets.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025851_1706738911",
      "id": "20171130-161001_579045840",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Local Development of the Custom Code in an IDE\n\nAs mentioned above, Splice Machine strongly recommends that you develop your custom Java code using an Integrated Development Environment (IDE) on your local machine. This is most frequently done on a Mac or Linux computer. That way you can develop, test, and tune locally, before deploying to a full cluster. The product of your code should be a JDK 1.8-compatible JAR file.\n\nThe following steps are for developing your procedure using the IntelliJ IDEA on MacOS:\n\n### Setting Up Your Project\n\nInside of IntelliJ IDEA, do the following:\n1. Select `File -\u003e New -\u003e Project...`\n2. Choose `Java with 1.8` as the Project SDK\n3. Skip creating from a template unless you prefer to use one\n4. Give your project a name and location; for example: `CompanyACustom1`\n5. If desired, create a new package (`File -\u003e New -\u003e Package`), such as `com.splicemachine.companya`\n\n### Configuring to output a JAR file\nInside of IntelliJ IDEA, do the following:\n\n1. Select `File -\u003e Project Structure...`\n2. Select `Artifacts`, and click `+`\n3. Choose `JAR -\u003e From modules with dependencies `\n3. Check `Build on make` and then click `OK`\n\n### Coding your function or procedure\n\n1. Create a file by right-clicking on your src or package folder, and selecting `New -\u003e Java Class`\n2. Paste in code like the following:\n\n```\npackage com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con \u003d DriverManager.getConnection(\"jdbc:default:connection\")) {\n\n            String incrementSQL \u003d \"update SPLICE.INCREMENTTEST set i \u003d i + 1\";\n\n            try (PreparedStatement ps \u003d con.prepareStatement(incrementSQL)) {\n                int resultSet \u003d ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n```\n\n### Build your JAR file\n1. `Build -\u003e Artifacts... JAR`\n2. Use your command line interface to navigate to where the JAR file is created, e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar\n\nYou are now ready to deploy your JAR file to test!\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 20:57:18.739",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 8.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eLocal Development of the Custom Code in an IDE\u003c/h2\u003e\n\u003cp\u003eAs mentioned above, Splice Machine strongly recommends that you develop your custom Java code using an Integrated Development Environment (IDE) on your local machine. This is most frequently done on a Mac or Linux computer. That way you can develop, test, and tune locally, before deploying to a full cluster. The product of your code should be a JDK 1.8-compatible JAR file.\u003c/p\u003e\n\u003cp\u003eThe following steps are for developing your procedure using the IntelliJ IDEA on MacOS:\u003c/p\u003e\n\u003ch3\u003eSetting Up Your Project\u003c/h3\u003e\n\u003cp\u003eInside of IntelliJ IDEA, do the following:\u003cbr/\u003e1. Select \u003ccode\u003eFile -\u0026gt; New -\u0026gt; Project...\u003c/code\u003e\u003cbr/\u003e2. Choose \u003ccode\u003eJava with 1.8\u003c/code\u003e as the Project SDK\u003cbr/\u003e3. Skip creating from a template unless you prefer to use one\u003cbr/\u003e4. Give your project a name and location; for example: \u003ccode\u003eCompanyACustom1\u003c/code\u003e\u003cbr/\u003e5. If desired, create a new package (\u003ccode\u003eFile -\u0026gt; New -\u0026gt; Package\u003c/code\u003e), such as \u003ccode\u003ecom.splicemachine.companya\u003c/code\u003e\u003c/p\u003e\n\u003ch3\u003eConfiguring to output a JAR file\u003c/h3\u003e\n\u003cp\u003eInside of IntelliJ IDEA, do the following:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eSelect \u003ccode\u003eFile -\u0026gt; Project Structure...\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSelect \u003ccode\u003eArtifacts\u003c/code\u003e, and click \u003ccode\u003e+\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eChoose \u003ccode\u003eJAR -\u0026gt; From modules with dependencies\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eCheck \u003ccode\u003eBuild on make\u003c/code\u003e and then click \u003ccode\u003eOK\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCoding your function or procedure\u003c/h3\u003e\n\u003col\u003e\n  \u003cli\u003eCreate a file by right-clicking on your src or package folder, and selecting \u003ccode\u003eNew -\u0026gt; Java Class\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ePaste in code like the following:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003epackage com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con \u003d DriverManager.getConnection(\u0026quot;jdbc:default:connection\u0026quot;)) {\n\n            String incrementSQL \u003d \u0026quot;update SPLICE.INCREMENTTEST set i \u003d i + 1\u0026quot;;\n\n            try (PreparedStatement ps \u003d con.prepareStatement(incrementSQL)) {\n                int resultSet \u003d ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eBuild your JAR file\u003c/h3\u003e\n\u003col\u003e\n  \u003cli\u003e\u003ccode\u003eBuild -\u0026gt; Artifacts... JAR\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eUse your command line interface to navigate to where the JAR file is created, e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou are now ready to deploy your JAR file to test!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025852_-514042174",
      "id": "20171130-161030_1002161632",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Development Guidelines\nBefore we develop the code and deploy the JAR file, it is worth going through some simple best practices:\n\n1. It\u0027s useful for code organization to use a package for the code, e.g. com.splicemachine.yourcompanyname.\n2. Notice you don\u0027t need a *main* code block in your class, because you\u0027ll be directly calling the class\u0027s specific method.\n3. The example we\u0027ve shown is a stored procedure, which means it does not return any results. When you create a function, it must return a result.\n4. You need to ensure that your method throws `SQLException` if SQL is being executed.  Be sure to use `try/catch` blocks similar to those shown in the example, to deal with any possible run-time exceptions.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 20:57:53.338",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 4.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDevelopment Guidelines\u003c/h2\u003e\n\u003cp\u003eBefore we develop the code and deploy the JAR file, it is worth going through some simple best practices:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eIt\u0026rsquo;s useful for code organization to use a package for the code, e.g. com.splicemachine.yourcompanyname.\u003c/li\u003e\n  \u003cli\u003eNotice you don\u0026rsquo;t need a \u003cem\u003emain\u003c/em\u003e code block in your class, because you\u0026rsquo;ll be directly calling the class\u0026rsquo;s specific method.\u003c/li\u003e\n  \u003cli\u003eThe example we\u0026rsquo;ve shown is a stored procedure, which means it does not return any results. When you create a function, it must return a result.\u003c/li\u003e\n  \u003cli\u003eYou need to ensure that your method throws \u003ccode\u003eSQLException\u003c/code\u003e if SQL is being executed. Be sure to use \u003ccode\u003etry/catch\u003c/code\u003e blocks similar to those shown in the example, to deal with any possible run-time exceptions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025853_486197790",
      "id": "20171130-162809_2009777442",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Local Deployment of the JAR file\n\nOnce you\u0027ve got your code up and running  you can deploy into your development environment. Carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:\n\n```\nCALL SQLJ.INSTALL_JAR(\u0027\u003cyour-full-path-to\u003e/Custom1.jar\u0027, \u0027SPLICE.Custom1\u0027, 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY(\u0027derby.database.classpath\u0027, \u0027SPLICE.custom1\u0027);\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME \u0027com.splicemachine.companya.Custom1.customIncrement\u0027;\n```\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-02 20:58:01.965",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eLocal Deployment of the JAR file\u003c/h2\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve got your code up and running you can deploy into your development environment. Carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCALL SQLJ.INSTALL_JAR(\u0026#39;\u0026lt;your-full-path-to\u0026gt;/Custom1.jar\u0026#39;, \u0026#39;SPLICE.Custom1\u0026#39;, 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY(\u0026#39;derby.database.classpath\u0026#39;, \u0026#39;SPLICE.custom1\u0026#39;);\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME \u0026#39;com.splicemachine.companya.Custom1.customIncrement\u0026#39;;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025854_-100220694",
      "id": "20171201-001544_2091534540",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Run Your Procedure in Your Local Database Environment\n\nYou can create a table on which the stored procedure will operate, in your local environment. For example:\n```\ncreate table incrementtest (i int);\ninsert into incrementtest values 1;\n```\n\nAnd now you put your stored procedure into action:\n\n```\ncall customincrement();\nselect * from incrementtest;\n```\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 07:45:10.589",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eRun Your Procedure in Your Local Database Environment\u003c/h2\u003e\n\u003cp\u003eYou can create a table on which the stored procedure will operate, in your local environment. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecreate table incrementtest (i int);\ninsert into incrementtest values 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd now you put your stored procedure into action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecall customincrement();\nselect * from incrementtest;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542403025854_-1961098282",
      "id": "20171201-001610_1286108786",
      "dateCreated": "2018-11-16 13:17:05.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\nCongratulations! You\u0027ve just completed the *Splice Machine DBAs Class*. \n\nVisit [*Our Training Classes*](/#/notebook/2DWTR5ZBH) notebook learn about our other training classes.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-12 02:23:36.515",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eCongratulations! You\u0026rsquo;ve just completed the \u003cem\u003eSplice Machine DBAs Class\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003eVisit \u003ca href\u003d\"/#/notebook/2DWTR5ZBH\"\u003e\u003cem\u003eOur Training Classes\u003c/em\u003e\u003c/a\u003e notebook learn about our other training classes.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542738021380_905658858",
      "id": "20181120-102021_863876507",
      "dateCreated": "2018-11-20 10:20:21.380",
      "dateStarted": "2018-12-12 02:23:36.516",
      "dateFinished": "2018-12-12 02:23:36.526",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-12 02:23:36.500",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1544581416498_-865330358",
      "id": "20181212-022336_1497128434",
      "dateCreated": "2018-12-12 02:23:36.498",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training / For DBAs / g. Creating Custom Stored Procedures",
  "id": "2DXZUCREK",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}