{
  "noteForms": {}, 
  "angularObjects": {
    "spark:shared_process": [], 
    "splicemachine:shared_process": [], 
    "md:shared_process": []
  }, 
  "name": "Splice Machine Training / For DBAs / g. Creating Custom Stored Procedures", 
  "info": {}, 
  "noteParams": {}, 
  "paragraphs": [
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n\n# Creating Custom Stored Procedures\n\nThis notebook describes how to create and use custom stored procedures written in Java in Splice Machine, in these sections:\n\n* *Your Stored Procedure Development Environment*\n* *Local Deployment of the Jar File*\n* *Running Your Custom Procedure Locally*\n\nYou can create custom functions and procedures to deploy in your database; you can then call them as needed from your SQL.\n\n<p class=\"noteIcon\">This notebook describes how to create custom stored procedures. You will need to adapt this to your own development environment.</p>\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>Creating Custom Stored Procedures</h1>\n<p>This notebook describes how to create and use custom stored procedures written in Java in Splice Machine, in these sections:</p>\n<ul>\n  <li><em>Your Stored Procedure Development Environment</em></li>\n  <li><em>Local Deployment of the Jar File</em></li>\n  <li><em>Running Your Custom Procedure Locally</em></li>\n</ul>\n<p>You can create custom functions and procedures to deploy in your database; you can then call them as needed from your SQL.</p>\n<p class=\"noteIcon\">This notebook describes how to create custom stored procedures. You will need to adapt this to your own development environment.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025850_-533276268", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-02 21:50:46.052", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20171130-160641_2246962", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Your Stored Procedure Development Environment\n\nThe *environment* in which your stored procedure code is developed may change depending upon your need: we recommend that you flesh out the actual functionality of your custom code in a local (standalone) Splice Machine envirmonment. Once you have refined your code and it behaves to your satisfaction in your local environment, you can then re-deploy the developed code to your target instance. \n\nThis notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment. Replace any instances of `<your-file-name>` in the examples with your specific file name, rememberig to remove the `<` and `>` brackets.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Your Stored Procedure Development Environment</h2>\n<p>The <em>environment</em> in which your stored procedure code is developed may change depending upon your need: we recommend that you flesh out the actual functionality of your custom code in a local (standalone) Splice Machine envirmonment. Once you have refined your code and it behaves to your satisfaction in your local environment, you can then re-deploy the developed code to your target instance. </p>\n<p>This notebook covers all of these steps - though as you will see, these steps occur OUTSIDE of an actual Notebook when running in a local environment. Replace any instances of <code>&lt;your-file-name&gt;</code> in the examples with your specific file name, rememberig to remove the <code>&lt;</code> and <code>&gt;</code> brackets.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025851_1706738911", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 07:44:37.175", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20171130-161001_579045840", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Local Development of the Custom Code in an IDE\n\nAs mentioned above, Splice Machine strongly recommends that you develop your custom Java code using an Integrated Development Environment (IDE) on your local machine. This is most frequently done on a Mac or Linux computer. That way you can develop, test, and tune locally, before deploying to a full cluster. The product of your code should be a JDK 1.8-compatible JAR file.\n\nThe following steps are for developing your procedure using the IntelliJ IDEA on MacOS:\n\n### Setting Up Your Project\n\nInside of IntelliJ IDEA, do the following:\n1. Select `File -> New -> Project...`\n2. Choose `Java with 1.8` as the Project SDK\n3. Skip creating from a template unless you prefer to use one\n4. Give your project a name and location; for example: `CompanyACustom1`\n5. If desired, create a new package (`File -> New -> Package`), such as `com.splicemachine.companya`\n\n### Configuring to output a JAR file\nInside of IntelliJ IDEA, do the following:\n\n1. Select `File -> Project Structure...`\n2. Select `Artifacts`, and click `+`\n3. Choose `JAR -> From modules with dependencies `\n3. Check `Build on make` and then click `OK`\n\n### Coding your function or procedure\n\n1. Create a file by right-clicking on your src or package folder, and selecting `New -> Java Class`\n2. Paste in code like the following:\n\n```\npackage com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con = DriverManager.getConnection(\"jdbc:default:connection\")) {\n\n            String incrementSQL = \"update SPLICE.INCREMENTTEST set i = i + 1\";\n\n            try (PreparedStatement ps = con.prepareStatement(incrementSQL)) {\n                int resultSet = ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n```\n\n### Build your JAR file\n1. `Build -> Artifacts... JAR`\n2. Use your command line interface to navigate to where the JAR file is created, e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar\n\nYou are now ready to deploy your JAR file to test!\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Local Development of the Custom Code in an IDE</h2>\n<p>As mentioned above, Splice Machine strongly recommends that you develop your custom Java code using an Integrated Development Environment (IDE) on your local machine. This is most frequently done on a Mac or Linux computer. That way you can develop, test, and tune locally, before deploying to a full cluster. The product of your code should be a JDK 1.8-compatible JAR file.</p>\n<p>The following steps are for developing your procedure using the IntelliJ IDEA on MacOS:</p>\n<h3>Setting Up Your Project</h3>\n<p>Inside of IntelliJ IDEA, do the following:<br/>1. Select <code>File -&gt; New -&gt; Project...</code><br/>2. Choose <code>Java with 1.8</code> as the Project SDK<br/>3. Skip creating from a template unless you prefer to use one<br/>4. Give your project a name and location; for example: <code>CompanyACustom1</code><br/>5. If desired, create a new package (<code>File -&gt; New -&gt; Package</code>), such as <code>com.splicemachine.companya</code></p>\n<h3>Configuring to output a JAR file</h3>\n<p>Inside of IntelliJ IDEA, do the following:</p>\n<ol>\n  <li>Select <code>File -&gt; Project Structure...</code></li>\n  <li>Select <code>Artifacts</code>, and click <code>+</code></li>\n  <li>Choose <code>JAR -&gt; From modules with dependencies</code></li>\n  <li>Check <code>Build on make</code> and then click <code>OK</code></li>\n</ol>\n<h3>Coding your function or procedure</h3>\n<ol>\n  <li>Create a file by right-clicking on your src or package folder, and selecting <code>New -&gt; Java Class</code></li>\n  <li>Paste in code like the following:</li>\n</ol>\n<pre><code>package com.splicemachine.companya;\n\nimport java.sql.SQLException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\n\n\npublic class Custom1 {\n\n\n    public static void customIncrement () throws SQLException {\n        try (Connection con = DriverManager.getConnection(&quot;jdbc:default:connection&quot;)) {\n\n            String incrementSQL = &quot;update SPLICE.INCREMENTTEST set i = i + 1&quot;;\n\n            try (PreparedStatement ps = con.prepareStatement(incrementSQL)) {\n                int resultSet = ps.executeUpdate();\n            } catch (SQLException e) {\n                con.rollback();\n                e.printStackTrace();\n                throw e;\n            }\n        }\n    }\n}\n</code></pre>\n<h3>Build your JAR file</h3>\n<ol>\n  <li><code>Build -&gt; Artifacts... JAR</code></li>\n  <li>Use your command line interface to navigate to where the JAR file is created, e.g. out/artifacts/CompanyACustom1_jar/Custom1.jar</li>\n</ol>\n<p>You are now ready to deploy your JAR file to test!</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025852_-514042174", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-02 20:57:18.739", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 8.0
      }, 
      "id": "20171130-161030_1002161632", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Development Guidelines\nBefore we develop the code and deploy the JAR file, it is worth going through some simple best practices:\n\n1. It's useful for code organization to use a package for the code, e.g. com.splicemachine.yourcompanyname.\n2. Notice you don't need a *main* code block in your class, because you'll be directly calling the class's specific method.\n3. The example we've shown is a stored procedure, which means it does not return any results. When you create a function, it must return a result.\n4. You need to ensure that your method throws `SQLException` if SQL is being executed.  Be sure to use `try/catch` blocks similar to those shown in the example, to deal with any possible run-time exceptions.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Development Guidelines</h2>\n<p>Before we develop the code and deploy the JAR file, it is worth going through some simple best practices:</p>\n<ol>\n  <li>It&rsquo;s useful for code organization to use a package for the code, e.g. com.splicemachine.yourcompanyname.</li>\n  <li>Notice you don&rsquo;t need a <em>main</em> code block in your class, because you&rsquo;ll be directly calling the class&rsquo;s specific method.</li>\n  <li>The example we&rsquo;ve shown is a stored procedure, which means it does not return any results. When you create a function, it must return a result.</li>\n  <li>You need to ensure that your method throws <code>SQLException</code> if SQL is being executed. Be sure to use <code>try/catch</code> blocks similar to those shown in the example, to deal with any possible run-time exceptions.</li>\n</ol>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025853_486197790", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-02 20:57:53.338", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 4.0
      }, 
      "id": "20171130-162809_2009777442", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Local Deployment of the JAR file\n\nOnce you've got your code up and running  you can deploy into your development environment. Carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:\n\n```\nCALL SQLJ.INSTALL_JAR('<your-full-path-to>/Custom1.jar', 'SPLICE.Custom1', 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY('derby.database.classpath', 'SPLICE.custom1');\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME 'com.splicemachine.companya.Custom1.customIncrement';\n```\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Local Deployment of the JAR file</h2>\n<p>Once you&rsquo;ve got your code up and running you can deploy into your development environment. Carefully edit and execute the commands below IN YOUR LOCAL ENVIRONMENT (not in Zeppelin) to align to your custom procedure and environment:</p>\n<pre><code>CALL SQLJ.INSTALL_JAR(&#39;&lt;your-full-path-to&gt;/Custom1.jar&#39;, &#39;SPLICE.Custom1&#39;, 0);\nCALL SYSCS_UTIL.SYSCS_SET_GLOBAL_DATABASE_PROPERTY(&#39;derby.database.classpath&#39;, &#39;SPLICE.custom1&#39;);\nCREATE PROCEDURE SPLICE.customincrement() PARAMETER STYLE JAVA MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 0 EXTERNAL NAME &#39;com.splicemachine.companya.Custom1.customIncrement&#39;;\n</code></pre>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025854_-100220694", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-02 20:58:01.965", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20171201-001544_2091534540", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Run Your Procedure in Your Local Database Environment\n\nYou can create a table on which the stored procedure will operate, in your local environment. For example:\n```\ncreate table incrementtest (i int);\ninsert into incrementtest values 1;\n```\n\nAnd now you put your stored procedure into action:\n\n```\ncall customincrement();\nselect * from incrementtest;\n```\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Run Your Procedure in Your Local Database Environment</h2>\n<p>You can create a table on which the stored procedure will operate, in your local environment. For example:</p>\n<pre><code>create table incrementtest (i int);\ninsert into incrementtest values 1;\n</code></pre>\n<p>And now you put your stored procedure into action:</p>\n<pre><code>call customincrement();\nselect * from incrementtest;\n</code></pre>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542403025854_-1961098282", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 07:45:10.589", 
      "dateCreated": "2018-11-16 13:17:05.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20171201-001610_1286108786", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "dateFinished": "2018-12-12 02:23:36.526", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Where to Go Next\nCongratulations! You've just completed the *Splice Machine DBAs Class*. \n\nVisit [*Our Training Classes*](/#/notebook/2DWTR5ZBH) notebook learn about our other training classes.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>Congratulations! You&rsquo;ve just completed the <em>Splice Machine DBAs Class</em>. </p>\n<p>Visit <a href=\"/#/notebook/2DWTR5ZBH\"><em>Our Training Classes</em></a> notebook learn about our other training classes.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542738021380_905658858", 
      "user": "anonymous", 
      "dateStarted": "2018-12-12 02:23:36.516", 
      "dateUpdated": "2018-12-12 02:23:36.515", 
      "dateCreated": "2018-11-20 10:20:21.380", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20181120-102021_863876507", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n", 
      "apps": [], 
      "jobName": "paragraph_1544581416498_-865330358", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-12 02:23:36.500", 
      "dateCreated": "2018-12-12 02:23:36.498", 
      "config": {
        "editorMode": "ace/mode/sql"
      }, 
      "id": "20181212-022336_1497128434", 
      "progressUpdateIntervalMs": 500
    }
  ], 
  "config": {
    "looknfeel": "default", 
    "personalizedMode": "false", 
    "isZeppelinNotebookCronEnable": false
  }, 
  "id": "2DXZUCREK"
}