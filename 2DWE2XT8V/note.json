{
  "noteForms": {}, 
  "angularObjects": {
    "spark:shared_process": [], 
    "splicemachine:shared_process": []
  }, 
  "name": "Splice Machine Training / For Data Scientists / c. Using Spark in Zeppelin Notebooks", 
  "info": {}, 
  "noteParams": {}, 
  "paragraphs": [
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n\n# Using Spark in Zeppelin Notebooks\nThis notebook demonstrates how to use Spark in a Zeppelin notebook, in the following sections:\n\n* *Loading Data Into A Table Using Spark*\n* *Using Spark SQL to Query the Loaded Data*\n\n<div class=\"notePlain\" style=\"font-size:12px\">\nThe data we use in this notebook is public data; here is access information for it:\n<p style=\"margin-left:60px;\">[Moro et al., 2011] S. Moro, R. Laureano and P. Cortez. <em>Using Data Mining for Bank Direct Marketing: An Application of the CRISP-DM Methodology.</em> In P. Novais et al. (Eds.), <em>Proceedings of the European Simulation and Modelling Conference - ESM'2011</em>, pp. 117-121, Guimar\u00e3es, Portugal, October, 2011. EUROSIS.</p>\n\n<p style=\"margin-left:60px;\">Available at: <a href=\"http://hdl.handle.net/1822/14838\">http://hdl.handle.net/1822/14838</a></p>\n</div>", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>Using Spark in Zeppelin Notebooks</h1>\n<p>This notebook demonstrates how to use Spark in a Zeppelin notebook, in the following sections:</p>\n<ul>\n  <li><em>Loading Data Into A Table Using Spark</em></li>\n  <li><em>Using Spark SQL to Query the Loaded Data</em></li>\n</ul>\n<div class=\"notePlain\" style=\"font-size:12px\">\nThe data we use in this notebook is public data; here is access information for it:\n<p style=\"margin-left:60px;\">[Moro et al., 2011] S. Moro, R. Laureano and P. Cortez. <em>Using Data Mining for Bank Direct Marketing: An Application of the CRISP-DM Methodology.</em> In P. Novais et al. (Eds.), <em>Proceedings of the European Simulation and Modelling Conference - ESM'2011</em>, pp. 117-121, Guimar\u00e3es, Portugal, October, 2011. EUROSIS.</p>\n\n<p style=\"margin-left:60px;\">Available at: <a href=\"http://hdl.handle.net/1822/14838\">http://hdl.handle.net/1822/14838</a></p>\n</div>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883898_-912211351", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 06:00:26.157", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": [
          {
            "graph": {
              "keys": [], 
              "optionOpen": false, 
              "height": 300.0, 
              "values": [], 
              "mode": "table", 
              "groups": [], 
              "scatter": {}
            }
          }
        ], 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20150213-231621_168813393", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Loading Data Into a Table Using Spark\n\nThe following paragraph uses the `%spark` interpreter to load public bank data into a table. Note that Zeppelin creates and injects the SparkContext (`sc`) and sqlContext (`HiveContext` or `SqlContext`) for you, so you don't need to create them manually.", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Loading Data Into a Table Using Spark</h2>\n<p>The following paragraph uses the <code>%spark</code> interpreter to load public bank data into a table. Note that Zeppelin creates and injects the SparkContext (<code>sc</code>) and sqlContext (<code>HiveContext</code> or <code>SqlContext</code>) for you, so you don&rsquo;t need to create them manually.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1543604712907_1062286965", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 06:00:57.796", 
      "dateCreated": "2018-11-30 19:05:12.907", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20181130-190512_465791935", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%spark\nimport org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\n\n// Zeppelin creates and injects sc (SparkContext) and sqlContext (HiveContext or SqlContext)\n// So you don't need create them manually\n\n// load bank data\nval bankText = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/apache-zeppelin/tutorial/bank/bank.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\n\"))\n\ncase class Bank(age: Integer, job: String, marital: String, education: String, balance: Integer)\n\nval bank = bankText.map(s => s.split(\";\")).filter(s => s(0) != \"\\\"age\\\"\").map(\n    s => Bank(s(0).toInt, \n            s(1).replaceAll(\"\\\"\", \"\"),\n            s(2).replaceAll(\"\\\"\", \"\"),\n            s(3).replaceAll(\"\\\"\", \"\"),\n            s(5).replaceAll(\"\\\"\", \"\").toInt\n        )\n).toDF()\nbank.registerTempTable(\"bank\")", 
      "title": "Load data into table", 
      "apps": [], 
      "results": {
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883898_336019294", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-06 23:50:41.994", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "editorHide": false, 
        "title": false, 
        "enabled": true, 
        "results": [
          {
            "graph": {
              "optionOpen": false, 
              "mode": "table", 
              "height": 300.0
            }
          }
        ], 
        "editorMode": "ace/mode/scala", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": false, 
          "completionSupport": true, 
          "language": "scala"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20150210-015259_1403135953", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Using Spark SQL to Query the Loaded Data\n\nThe three paragraphs below use the `%spark.sql` interpreter to query the loaded data; each displays the query results using one of the available Zeppelin data visualizations.  \n\nWe also demonstrate how you can substitute variables into your queries that can be populated in a textbox.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Using Spark SQL to Query the Loaded Data</h2>\n<p>The three paragraphs below use the <code>%spark.sql</code> interpreter to query the loaded data; each displays the query results using one of the available Zeppelin data visualizations. </p>\n<p>We also demonstrate how you can substitute variables into your queries that can be populated in a textbox.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1543605021486_1684401472", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-03 02:30:37.358", 
      "dateCreated": "2018-11-30 19:10:21.486", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20181130-191021_2034021855", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%spark.sql \nselect age, count(1) value\nfrom bank \nwhere age < 30 \ngroup by age \norder by age", 
      "runtimeInfos": {
        "jobUrl": {
          "interpreterSettingId": "spark", 
          "group": "spark", 
          "propertyName": "jobUrl", 
          "tooltip": "View in Spark web UI", 
          "label": "SPARK JOB", 
          "values": [
            "http://172.17.0.2:4041/jobs/job?id=0"
          ]
        }
      }, 
      "apps": [], 
      "results": {
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883899_311454002", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-06 23:51:00.211", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "enabled": true, 
        "results": [
          {
            "graph": {
              "keys": [
                {
                  "index": 0.0, 
                  "name": "age", 
                  "aggr": "sum"
                }
              ], 
              "optionOpen": false, 
              "height": 366.0, 
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  }, 
                  "xLabelStatus": "default"
                }
              }, 
              "values": [
                {
                  "index": 1.0, 
                  "name": "value", 
                  "aggr": "sum"
                }
              ], 
              "mode": "multiBarChart", 
              "groups": [], 
              "commonSetting": {}
            }, 
            "helium": {}
          }
        ], 
        "editorMode": "ace/mode/sql", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": false, 
          "completionSupport": true, 
          "language": "sql"
        }, 
        "colWidth": 4.0
      }, 
      "id": "20150210-015302_1492795503", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {
          "maxAge": {
            "defaultValue": "30", 
            "hidden": false, 
            "type": "TextBox", 
            "name": "maxAge"
          }
        }, 
        "params": {
          "maxAge": "35"
        }
      }, 
      "text": "%spark.sql \nselect age, count(1) value \nfrom bank \nwhere age < ${maxAge=30} \ngroup by age \norder by age", 
      "apps": [], 
      "results": {
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883899_-2020806566", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-06 23:47:04.015", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "enabled": true, 
        "results": [
          {
            "graph": {
              "keys": [
                {
                  "index": 0.0, 
                  "name": "age", 
                  "aggr": "sum"
                }
              ], 
              "optionOpen": false, 
              "height": 294.0, 
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  }, 
                  "xLabelStatus": "default"
                }
              }, 
              "values": [
                {
                  "index": 1.0, 
                  "name": "value", 
                  "aggr": "sum"
                }
              ], 
              "mode": "multiBarChart", 
              "groups": [], 
              "commonSetting": {}
            }, 
            "helium": {}
          }
        ], 
        "editorMode": "ace/mode/sql", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": false, 
          "completionSupport": true, 
          "language": "sql"
        }, 
        "colWidth": 4.0
      }, 
      "id": "20150212-145404_867439529", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {
          "marital": {
            "defaultValue": "single", 
            "hidden": false, 
            "type": "Select", 
            "options": [
              {
                "value": "single"
              }, 
              {
                "value": "divorced"
              }, 
              {
                "value": "married"
              }
            ], 
            "name": "marital"
          }
        }, 
        "params": {
          "marital": "single"
        }
      }, 
      "text": "%spark.sql \nselect age, count(1) value \nfrom bank \nwhere marital=\"${marital=single,single|divorced|married}\" \ngroup by age \norder by age", 
      "apps": [], 
      "results": {
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883900_2032268547", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-06 23:47:04.074", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "runOnSelectionChange": true, 
        "enabled": true, 
        "results": [
          {
            "graph": {
              "keys": [
                {
                  "index": 0.0, 
                  "name": "age", 
                  "aggr": "sum"
                }
              ], 
              "optionOpen": false, 
              "height": 280.0, 
              "setting": {
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  }, 
                  "xLabelStatus": "default"
                }
              }, 
              "values": [
                {
                  "index": 1.0, 
                  "name": "value", 
                  "aggr": "sum"
                }
              ], 
              "mode": "stackedAreaChart", 
              "groups": [], 
              "commonSetting": {}
            }, 
            "helium": {}
          }
        ], 
        "editorMode": "ace/mode/sql", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": false, 
          "completionSupport": true, 
          "language": "sql"
        }, 
        "colWidth": 4.0
      }, 
      "id": "20150213-230422_1600658137", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "dateFinished": "2018-12-05 21:47:43.418", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Where to Go Next\nThe next notebook in this class, [*Using the Database Console*](/#/notebook/2DYNK9CZT), explores using the Database Console to learn about where your queries are bogging donw and how to use that information for additional query tuning.", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>The next notebook in this class, <a href=\"/#/notebook/2DYNK9CZT\"><em>Using the Database Console</em></a>, explores using the Database Console to learn about where your queries are bogging donw and how to use that information for additional query tuning.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542397883901_1883049237", 
      "user": "anonymous", 
      "dateStarted": "2018-12-05 21:47:43.397", 
      "dateUpdated": "2018-12-05 21:47:49.378", 
      "dateCreated": "2018-11-16 11:51:23.000", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "completionKey": "TAB", 
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20150703-133047_853701097", 
      "progressUpdateIntervalMs": 500
    }
  ], 
  "config": {
    "looknfeel": "default", 
    "personalizedMode": "false", 
    "isZeppelinNotebookCronEnable": false
  }, 
  "id": "2DWE2XT8V"
}