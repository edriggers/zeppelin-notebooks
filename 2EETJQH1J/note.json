{
  "paragraphs": [
    {
      "text": "%md\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n# Query Optimization\n\nThis notebook shows you advanced query optimization techniques for boosting the performance of your Splice Machine queries.\n\nWith a perfect sql optimizer, users do not need to worry about the efficiency of their SQL statements. It is optimizer’s responsibility to convert the SQL into a semantically equivalent and more performant execution plan. In reality some sql statements require some manual tuning or rewriting due to:\n\n* Limitations in the optimizer\u0027s heuristic rewrite functionality\n* Limitations in the search space the optimizer explores\n* Inaccurate statistics and/or cost estimation\n* Parsong time concerns\n \nIn this notebook we will show you how to read a query explain plan and how you can use statistics to understand the characteristics of a table. These are two essential things you will need to understand in order to properly optimize queries in Splice Machine.\n\nNext, we will show you some query performance problems that you may encounter and how to resolve them.\n\n1. *Understanding the Query Execution Plan*\n2. *Understanding Database Statistics*\n3. *Query Performance Problems*\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 17:47:05.213",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003ch1\u003eQuery Optimization\u003c/h1\u003e\n\u003cp\u003eThis notebook shows you advanced query optimization techniques for boosting the performance of your Splice Machine queries.\u003c/p\u003e\n\u003cp\u003eWith a perfect sql optimizer, users do not need to worry about the efficiency of their SQL statements. It is optimizer’s responsibility to convert the SQL into a semantically equivalent and more performant execution plan. In reality some sql statements require some manual tuning or rewriting due to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLimitations in the optimizer\u0026rsquo;s heuristic rewrite functionality\u003c/li\u003e\n  \u003cli\u003eLimitations in the search space the optimizer explores\u003c/li\u003e\n  \u003cli\u003eInaccurate statistics and/or cost estimation\u003c/li\u003e\n  \u003cli\u003eParsong time concerns\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this notebook we will show you how to read a query explain plan and how you can use statistics to understand the characteristics of a table. These are two essential things you will need to understand in order to properly optimize queries in Splice Machine.\u003c/p\u003e\n\u003cp\u003eNext, we will show you some query performance problems that you may encounter and how to resolve them.\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cem\u003eUnderstanding the Query Execution Plan\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eUnderstanding Database Statistics\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eQuery Performance Problems\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559318834685_-2061822643",
      "id": "20190531-160714_265949446",
      "dateCreated": "2019-05-31 16:07:14.685",
      "dateStarted": "2019-06-05 17:47:05.213",
      "dateFinished": "2019-06-05 17:47:05.223",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 1. Understanding the Query Execution Plan\n\nThis section describes more fully what information is in the Explain plan for a query; the key pieces of information in a plan include the:\n\n*  ordering of the joins and other steps in the query\n*  use of Tables vs Indexes\n*  need for IndexLookup, which can slow a query down\n*  join Strategies employed\n*  actual row count and cost estimates at each step\n*  presence of predicate pushdowns where available\n*  indication of which *engine* will run the query: *control* or *Spark*\n\nWe\u0027ll delve a bit deeper into pushing down predicates and join ordering/strategies to help you understand plans.\n\n### Explain and Predicates\n\nLet\u0027s start with a query variant that is based on the `customer_bulk_import_example1` and `customer_bulk_import_example2` tables that we created earlier in this class. Click the  \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to display the plan for this query. \n",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:48:53.070",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e1. Understanding the Query Execution Plan\u003c/h2\u003e\n\u003cp\u003eThis section describes more fully what information is in the Explain plan for a query; the key pieces of information in a plan include the:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eordering of the joins and other steps in the query\u003c/li\u003e\n  \u003cli\u003euse of Tables vs Indexes\u003c/li\u003e\n  \u003cli\u003eneed for IndexLookup, which can slow a query down\u003c/li\u003e\n  \u003cli\u003ejoin Strategies employed\u003c/li\u003e\n  \u003cli\u003eactual row count and cost estimates at each step\u003c/li\u003e\n  \u003cli\u003epresence of predicate pushdowns where available\u003c/li\u003e\n  \u003cli\u003eindication of which \u003cem\u003eengine\u003c/em\u003e will run the query: \u003cem\u003econtrol\u003c/em\u003e or \u003cem\u003eSpark\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe\u0026rsquo;ll delve a bit deeper into pushing down predicates and join ordering/strategies to help you understand plans.\u003c/p\u003e\n\u003ch3\u003eExplain and Predicates\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start with a query variant that is based on the \u003ccode\u003ecustomer_bulk_import_example1\u003c/code\u003e and \u003ccode\u003ecustomer_bulk_import_example2\u003c/code\u003e tables that we created earlier in this class. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to display the plan for this query.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559324807566_1564645782",
      "id": "20190531-174647_369128840",
      "dateCreated": "2019-05-31 17:46:47.566",
      "dateStarted": "2019-06-05 16:47:08.517",
      "dateFinished": "2019-06-05 16:47:08.530",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select a.c_custkey, a.c_nationkey from\n    dev3.customer_bulk_import_example1 a\n    ,dev3.customer_bulk_import_example2 b\n     where a.c_custkey \u003d b.c_custkey\n     and a.c_nationkey \u003d 100\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 18:22:59.538",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d6,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d268.81,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.003,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n      -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d260.8,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d4.003,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[1:1] \u003d B.C_CUSTKEY[2:1])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d37804,scannedRows\u003d15000000,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559750851424_-600476239",
      "id": "20190605-160731_2050721181",
      "dateCreated": "2019-06-05 16:07:31.424",
      "dateStarted": "2019-06-05 18:22:59.549",
      "dateFinished": "2019-06-05 18:22:59.669",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n\u003cbr/\u003e\nYou’ll notice that on the very right of the plan are two lines with *preds\u003d* on them. *Preds* is short for *predicates*, which in databases are true/false conditions that are tested during query execution.\n\n### About Predicates\n\nStarting on the bottom line, we see a `TableScan` with the preds specification on it; this is called a *Predicate Pushdown*. A pushdown means: when we perform this `TableScan`, we\u0027ll bring this predicate (`A.C_NATIONKEY \u003d 100`) along with us, and will perform the scan using this predicate, passing up to the next part of the plan ONLY the rows that match. Predicate pushdowns are extremely efficient when performed on keyed results (primary keys or indexes), because only the minimal number of rows are pushed up to the next step.\n\nThe other kind of predicate shown here is of the form `[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])]`. You can ignore the numbers for now; the key part is `A.C_CUSTKEY \u003d B.C_CUSTKEY`. You can see that this is the join predicate, required for the actual join operation.\n\nThe main takeaway is that, as with most databases: when you can *push down* a predicate that filters a lot of data with a keyed filter, it helps create efficient scans for that step. If the filter is not keyed, this becomes a potential opportunity for adding an index.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:14:22.948",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou’ll notice that on the very right of the plan are two lines with \u003cem\u003epreds\u003d\u003c/em\u003e on them. \u003cem\u003ePreds\u003c/em\u003e is short for \u003cem\u003epredicates\u003c/em\u003e, which in databases are true/false conditions that are tested during query execution.\u003c/p\u003e\n\u003ch3\u003eAbout Predicates\u003c/h3\u003e\n\u003cp\u003eStarting on the bottom line, we see a \u003ccode\u003eTableScan\u003c/code\u003e with the preds specification on it; this is called a \u003cem\u003ePredicate Pushdown\u003c/em\u003e. A pushdown means: when we perform this \u003ccode\u003eTableScan\u003c/code\u003e, we\u0026rsquo;ll bring this predicate (\u003ccode\u003eA.C_NATIONKEY \u003d 100\u003c/code\u003e) along with us, and will perform the scan using this predicate, passing up to the next part of the plan ONLY the rows that match. Predicate pushdowns are extremely efficient when performed on keyed results (primary keys or indexes), because only the minimal number of rows are pushed up to the next step.\u003c/p\u003e\n\u003cp\u003eThe other kind of predicate shown here is of the form \u003ccode\u003e[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])]\u003c/code\u003e. You can ignore the numbers for now; the key part is \u003ccode\u003eA.C_CUSTKEY \u003d B.C_CUSTKEY\u003c/code\u003e. You can see that this is the join predicate, required for the actual join operation.\u003c/p\u003e\n\u003cp\u003eThe main takeaway is that, as with most databases: when you can \u003cem\u003epush down\u003c/em\u003e a predicate that filters a lot of data with a keyed filter, it helps create efficient scans for that step. If the filter is not keyed, this becomes a potential opportunity for adding an index.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559753121122_-170699142",
      "id": "20190605-164521_219571127",
      "dateCreated": "2019-06-05 16:45:21.122",
      "dateStarted": "2019-06-06 17:14:22.949",
      "dateFinished": "2019-06-06 17:14:22.955",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Join Ordering\n\nThe actual join ordering is part of the optimization process: do I get a better cost when I start with the `customer_bulk_import_example1` table and join table `customer_bulk_import_example2` with it, or the other way around?\n\nSmart join ordering depends a lot on the situation. Generally speaking, the sooner you can filter out rows (thus working with fewer rows at each step of the query), the faster the query will run.\n\nWhen you look at an explain plan, if you are unsure of the ordering, remember again the order is *bottom up*. Another way to view this is to look at the counts on each row of the plan (n\u003d1, n\u003d2, etc.). This dictates the table ordering being used.",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 17:12:35.147",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eJoin Ordering\u003c/h3\u003e\n\u003cp\u003eThe actual join ordering is part of the optimization process: do I get a better cost when I start with the \u003ccode\u003ecustomer_bulk_import_example1\u003c/code\u003e table and join table \u003ccode\u003ecustomer_bulk_import_example2\u003c/code\u003e with it, or the other way around?\u003c/p\u003e\n\u003cp\u003eSmart join ordering depends a lot on the situation. Generally speaking, the sooner you can filter out rows (thus working with fewer rows at each step of the query), the faster the query will run.\u003c/p\u003e\n\u003cp\u003eWhen you look at an explain plan, if you are unsure of the ordering, remember again the order is \u003cem\u003ebottom up\u003c/em\u003e. Another way to view this is to look at the counts on each row of the plan (n\u003d1, n\u003d2, etc.). This dictates the table ordering being used.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559754591184_1443740413",
      "id": "20190605-170951_606376220",
      "dateCreated": "2019-06-05 17:09:51.184",
      "dateStarted": "2019-06-05 17:12:31.607",
      "dateFinished": "2019-06-05 17:12:31.612",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Join Strategy\n\nIn Splice Machine there are four possible join strategies:\n\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eJoin Strategy\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eBROADCAST\u003c/td\u003e\n            \u003ctd\u003eRead the results of the Right Result Set (RHS) into memory, then for each row in the left result set (LHS), perform a local lookup to determine the right side of the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eBROADCAST\u003c/i\u003e will only work if at least one of the following is true:\u003cbr/\u003e\u003cbr/\u003e\n                \u003cul\u003e\n                    \u003cli\u003eThere is at least one equijoin (\u003d) predicate that does not include a function call.\u003c/li\u003e\n                    \u003cli\u003eThere is at least one inequality join predicate, the RHS is a base table, and the join is evaluated in Spark.\u003c/li\u003e\n                \u003c/ul\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eSORTMERGE\u003c/td\u003e\n            \u003ctd\u003eRe-sort both the left and right sides according to the join keys, then perform a \u003ci\u003eMERGE\u003c/i\u003e join on the results.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eSORTMERGE\u003c/i\u003e requires an equijoin predicate with no function calls.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eMERGE\u003c/td\u003e\n            \u003ctd\u003eRead the Right and Left result sets simultaneously in order and join them together as they are read.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eMERGE\u003c/i\u003e joins require that both the left and right result sets be sorted according to the join keys. \u003ci\u003eMERGE\u003c/i\u003e requires an equijoin predicate that does not include a function call.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eNESTEDLOOP\u003c/td\u003e\n            \u003ctd\u003eFor each row on the left, fetch the values on the right that match the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eNESTEDLOOP\u003c/i\u003e is the only join that can work with any join predicate of any type; however this type of join is generally very slow.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\nIn our example above we see that the plan uses a `MergeJoin` to join the `CUSTOMER_BULK_IMPORT_EXAMPLE1` table with the `CUSTOMER_BULK_IMPORT_EXAMPLE2` table.\n\n\u003cpre\u003e\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\u003c/pre\u003e\n\nReading this from the bottom up we see:\n\n1. `CUSTOMER_BULK_IMPORT_EXAMPLE1` is scanned and becomes the left hand side of the join\n2. `CUSTOMER_BULK_IMPORT_EXAMPLE2` is scanned and becomes the right hand side of the join\n3. The `MERGE` join strategy is used",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:45:34.202",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eJoin Strategy\u003c/h3\u003e\n\u003cp\u003eIn Splice Machine there are four possible join strategies:\u003c/p\u003e\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eJoin Strategy\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eBROADCAST\u003c/td\u003e\n            \u003ctd\u003eRead the results of the Right Result Set (RHS) into memory, then for each row in the left result set (LHS), perform a local lookup to determine the right side of the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eBROADCAST\u003c/i\u003e will only work if at least one of the following is true:\u003cbr/\u003e\u003cbr/\u003e\n                \u003cul\u003e\n                    \u003cli\u003eThere is at least one equijoin (\u003d) predicate that does not include a function call.\u003c/li\u003e\n                    \u003cli\u003eThere is at least one inequality join predicate, the RHS is a base table, and the join is evaluated in Spark.\u003c/li\u003e\n                \u003c/ul\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eSORTMERGE\u003c/td\u003e\n            \u003ctd\u003eRe-sort both the left and right sides according to the join keys, then perform a \u003ci\u003eMERGE\u003c/i\u003e join on the results.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eSORTMERGE\u003c/i\u003e requires an equijoin predicate with no function calls.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eMERGE\u003c/td\u003e\n            \u003ctd\u003eRead the Right and Left result sets simultaneously in order and join them together as they are read.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eMERGE\u003c/i\u003e joins require that both the left and right result sets be sorted according to the join keys. \u003ci\u003eMERGE\u003c/i\u003e requires an equijoin predicate that does not include a function call.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eNESTEDLOOP\u003c/td\u003e\n            \u003ctd\u003eFor each row on the left, fetch the values on the right that match the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eNESTEDLOOP\u003c/i\u003e is the only join that can work with any join predicate of any type; however this type of join is generally very slow.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIn our example above we see that the plan uses a \u003ccode\u003eMergeJoin\u003c/code\u003e to join the \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table with the \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e table.\u003c/p\u003e\n\u003cpre\u003e\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\u003c/pre\u003e\n\u003cp\u003eReading this from the bottom up we see:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e is scanned and becomes the left hand side of the join\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e is scanned and becomes the right hand side of the join\u003c/li\u003e\n  \u003cli\u003eThe \u003ccode\u003eMERGE\u003c/code\u003e join strategy is used\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559754769544_-56424977",
      "id": "20190605-171249_2032665476",
      "dateCreated": "2019-06-05 17:12:49.544",
      "dateStarted": "2019-06-05 19:45:31.947",
      "dateFinished": "2019-06-05 19:45:31.954",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## 2. Understanding Database Statistics\n\nDatabase statistics are a form of metadata (data about data) that assists the Splice Machine query optimizer; the statistics help the optimizer select the most efficient approach to running a query, based on information that has been gathered about the tables involved in the query.\n\nIn this section we will show you how to:\n\n* Collect Statistics\n* View Statistics\n\n### Collect Statistics\n\nYou can collect statistics on a schema or table using the `analyze` command. \n\nHere is the syntax for collecting statistics for a schema:\n\n\u003cpre\u003e\nANALYZE SCHEMA \u003ci\u003eschemaName\u003c/i\u003e\n\u003c/pre\u003e\n\nHere is the syntax for collecting statistics for a table:\n\n\u003cpre\u003e\nANALYZE TABLE \u003ci\u003eschemaName.tableName\u003c/i\u003e\n\u003c/pre\u003e\n\nLet\u0027s try collecting statistics on our `DEV3` schema by clicking the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph. ",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:49:14.524",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e2. Understanding Database Statistics\u003c/h2\u003e\n\u003cp\u003eDatabase statistics are a form of metadata (data about data) that assists the Splice Machine query optimizer; the statistics help the optimizer select the most efficient approach to running a query, based on information that has been gathered about the tables involved in the query.\u003c/p\u003e\n\u003cp\u003eIn this section we will show you how to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCollect Statistics\u003c/li\u003e\n  \u003cli\u003eView Statistics\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCollect Statistics\u003c/h3\u003e\n\u003cp\u003eYou can collect statistics on a schema or table using the \u003ccode\u003eanalyze\u003c/code\u003e command. \u003c/p\u003e\n\u003cp\u003eHere is the syntax for collecting statistics for a schema:\u003c/p\u003e\n\u003cpre\u003e\nANALYZE SCHEMA \u003ci\u003eschemaName\u003c/i\u003e\n\u003c/pre\u003e\n\u003cp\u003eHere is the syntax for collecting statistics for a table:\u003c/p\u003e\n\u003cpre\u003e\nANALYZE TABLE \u003ci\u003eschemaName.tableName\u003c/i\u003e\n\u003c/pre\u003e\n\u003cp\u003eLet\u0026rsquo;s try collecting statistics on our \u003ccode\u003eDEV3\u003c/code\u003e schema by clicking the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559756870445_-1085019509",
      "id": "20190605-174750_416169915",
      "dateCreated": "2019-06-05 17:47:50.445",
      "dateStarted": "2019-06-05 19:49:12.503",
      "dateFinished": "2019-06-05 19:49:12.509",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nanalyze schema DEV3;",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 18:14:25.781",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\t-All-\t15000000\t2294789186\t145\t2\t0.0\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\t-All-\t15000000\t2295000000\t4\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559757344878_-1775577382",
      "id": "20190605-175544_1100776431",
      "dateCreated": "2019-06-05 17:55:44.878",
      "dateStarted": "2019-06-05 18:14:25.790",
      "dateFinished": "2019-06-05 18:17:33.618",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow go back and rerun the explain for our query example. You should notice that the plan has changed.\n\nThis was the explain plan before we collected stats on the tables in the schema:\n\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d651515625,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d13126628.907,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d236254,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\nThis is the new explain plan after we collected the statistics:\n\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d268.81,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.003,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n      -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d260.8,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d4.003,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[1:1] \u003d B.C_CUSTKEY[2:1])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d37804,scannedRows\u003d15000000,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\nWith statistics collected the cost values are more accurate which allows the optimizer to choose a better plan. The new plan chooses the `NestedLoopJoin` join strategy because it now knows that the right hand side table, `CUSTOMER_BULK_IMPORT_EXAMPLE2` can have the predicate applied thus filtering the results to just one `scannedRow`.\n\nThis is a simple example on a small dataset but you can see how database statistics can help the optimizer choose a better plan for executing a query. The point is to ensure the best performance it is critical to collect statistics on your database tables in Splice Machine.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:51.932",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow go back and rerun the explain for our query example. You should notice that the plan has changed.\u003c/p\u003e\n\u003cp\u003eThis was the explain plan before we collected stats on the tables in the schema:\u003c/p\u003e\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d651515625,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d13126628.907,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d236254,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\u003cp\u003eThis is the new explain plan after we collected the statistics:\u003c/p\u003e\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d268.81,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.003,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n      -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d260.8,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d4.003,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[1:1] \u003d B.C_CUSTKEY[2:1])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d37804,scannedRows\u003d15000000,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\u003cp\u003eWith statistics collected the cost values are more accurate which allows the optimizer to choose a better plan. The new plan chooses the \u003ccode\u003eNestedLoopJoin\u003c/code\u003e join strategy because it now knows that the right hand side table, \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e can have the predicate applied thus filtering the results to just one \u003ccode\u003escannedRow\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a simple example on a small dataset but you can see how database statistics can help the optimizer choose a better plan for executing a query. The point is to ensure the best performance it is critical to collect statistics on your database tables in Splice Machine.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559758013758_54956928",
      "id": "20190605-180653_1971126487",
      "dateCreated": "2019-06-05 18:06:53.758",
      "dateStarted": "2019-06-06 17:13:51.933",
      "dateFinished": "2019-06-06 17:13:51.941",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### View Statistics\n\nSplice Machine provides two system tables you can query to view the statistics that have been collected for your database:\n\n* *SYS.SYSTABLESTATISTICS*\n* *SYS.SYSCOLUMNSTATISTICS*\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to view the contents of each of these system tables.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:36.522",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eView Statistics\u003c/h3\u003e\n\u003cp\u003eSplice Machine provides two system tables you can query to view the statistics that have been collected for your database:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cem\u003eSYS.SYSTABLESTATISTICS\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eSYS.SYSCOLUMNSTATISTICS\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to view the contents of each of these system tables.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559759368061_-2054976156",
      "id": "20190605-182928_378425934",
      "dateCreated": "2019-06-05 18:29:28.061",
      "dateStarted": "2019-06-05 19:29:42.110",
      "dateFinished": "2019-06-05 19:29:42.114",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nSELECT * FROM SYS.SYSTABLESTATISTICS;\nSELECT * FROM SYS.SYSCOLUMNSTATISTICS;",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:30:18.803",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "SCHEMANAME": "string",
                      "TABLENAME": "string",
                      "COLUMNNAME": "string",
                      "CARDINALITY": "string",
                      "NULL_COUNT": "string",
                      "NULL_FRACTION": "string",
                      "MIN_VALUE": "string",
                      "MAX_VALUE": "string",
                      "FREQUENCIES": "string",
                      "QUANTILES": "string",
                      "THETA": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "SCHEMANAME\tTABLENAME\tCONGLOMERATENAME\tTOTAL_ROW_COUNT\tAVG_ROW_COUNT\tTOTAL_SIZE\tNUM_PARTITIONS\tAVG_PARTITION_SIZE\tROW_WIDTH\tSTATS_TYPE\tSAMPLE_FRACTION\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\t582f8014-016b-2488-5318-000003b7c6e0\t15000000\t103448\t2294789186\t145\t15826132\t152\t2\t0.0\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\t295dc08b-016b-2488-5318-000003b7c6e0\t15000000\t3750000\t2295000000\t4\t573750000\t153\t2\t0.0\n"
          },
          {
            "type": "TABLE",
            "data": "SCHEMANAME\tTABLENAME\tCOLUMNNAME\tCARDINALITY\tNULL_COUNT\tNULL_FRACTION\tMIN_VALUE\tMAX_VALUE\tFREQUENCIES\tQUANTILES\tTHETA\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\tC_NATIONKEY\t25\t0\t0.0\t0\t24\t ### ItemsSketch DATA DETAIL:     BaseBuffer   : 21 15 11 0 23 9 3 24 20 1 6 8 24 23 20 19 20 5 0 11 6 11 3 2 23 9 0 18 20 5 8 12 10 19 24 11 11 5 7 19 6 6 21 5 15 3 19 10 12 1 16 8 11 13 13 12 2 5 6 13 8 15 7 0 14 9 21 5 0 19 1 24 14 12 19 4 23 4 3 14 11 1 12 21 24 14 3 4 3 6 6 4 20 18 11 16 21 17 10 21 8 8 2 5 12 10 22 8 12 16 3 4 20 20 10 12 23 3 1 8 11 10 4 15 7 9 3 19 11 10 24 21 22 0 23 23 3 17 21 11 12 22 9 17 11 20 2 15 6 10 22 21 20 19 24 16 21 6 3 17 14 14 4 22 4 21 11 22 24 14 2 6 22 12 0 12 5 16 24 19 13 10 20 16 13 23 3 17 15 13 7 15 10 2 21 22 15 9 10 7 15 15 21 17 21 9 1 22 11 19 13 10 8 22 20 15 22 19 6 22 10 10 3 2 18 10 5 18 15 17 5 8 1 12 18 17 18 20 18 13 18 13 21 6 20 6 3 24 10 0 1 24 18 17 21 14 24 7 14 21 14 2 16 15 13 15 20 6 21 3 2 5 6 12 7 3 4 5 5 13 2 23 1 5 4 6 7 12 2 8 18 7 15 14 19 9 20 16 10 12 5 12 5 24 0 0 20 22 6 19 7 3 11 19 24 7 18 23 9 24 0 4 15 17 17 0 13 20 9 8 21 6 24 2 23 4 1 2 18 17 13 7 16 22 18 0 11 17 12 5 19 20 24 23 7 13 5 22 21 14 0 23 9 19 14 4 14 11 13 21 10 4 6 12 7 13 9 16 22 17 1 1 24 16 3 19 16 16 6 7 1 24 20 2 20 12 10 9 13 6 0 23 5 14 10 19 15 8 7 23 22 11 0 21 16 17 6 12 16 21 3 12 3 14 10 20 20 7 23 21 22 4 24 16 13 6 1 7 13 5 9 6 19 22 1 0 5 12    Valid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       4: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T       5: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T       6: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        F       7: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       8: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       9: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        F      10: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F      11: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T      12: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T      13: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T      14: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 ### END DATA DETAIL  ### ItemsSketch SUMMARY:     K                            : 256    N                            : 15,000,000    BaseBufferCount              : 448    CombinedBufferAllocatedCount : 4,352    Total Levels                 : 15    Valid Levels                 : 7    Level Bit Pattern            : 111001001110000    Valid Samples                : 2,240    Preamble Bytes               : 16    Normalized Rank Error        : 0.894%    Min Value                    : 0    Max Value                    : 24 ### END SKETCH SUMMARY \tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 0 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          1      599274 0              4:          1      600007 11              5:          1      600006 13              6:          3      599835 16              7:          1      599726 24              8:          2      599202 8             13:          1      600195 10             14:          1      601469 3             21:          1      601133 9             25:          1      599045 23             26:          2      600502 19             28:          1      599406 14             29:          1      599804 7             38:          1      600300 20             39:          1      600381 2             44:          1      600231 1             45:          1      599480 15             51:          1      600335 6             52:          1      599613 18             53:          1      601008 4             54:          2      599713 12             55:          1      598913 22             56:          3      600098 17             57:          5      600226 5             58:          8      600098 21 \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 25.0    Upper Bound, 95% conf   : 25.0    Lower Bound, 95% conf   : 25.0    Theta (double)          : 1.0    Theta (long)            : 9223372036854775807    Theta (long) hex        : 7fffffffffffffff    EstMode?                : false    Empty?                  : false    Array Size Entries      : 25    Retained Entries        : 25    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\tC_MKTSEGMENT\t5\t0\t0.0\tAUTOMOBILE\tMACHINERY\t ### ItemsSketch DATA DETAIL:     BaseBufferalid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null nullnull null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       8: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null nullnull null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F      11: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T      12: AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY        T      13: AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY        T      14: AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE AUTOMOBILE BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING BUILDING FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE FURNITURE HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD HOUSEHOLD MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACHINERY MACH\tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 0 ReversePurgeItemHashMap          Index:     States      Values Keys              1:          1     3000019 HOUSEHOLD              3:          1     2999152 FURNITURE              5:          1     3002858 AUTOMOBILE              6:          1     3000188 BUILDING              7:          3     2997783 MACHINERY \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 5.0    Upper Bound, 95% conf   : 5.0    Lower Bound, 95% conf   : 5.0    Theta (double)          : 1.0    Theta (long)            : 9223372036854775807    Theta (long) hex        : 7fffffffffffffff    EstMode?                : false    Empty?                  : false    Array Size Entries      : 5    Retained Entries        : 5    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\tC_ADDRESS\t14977135\t0\t0.0\t    v7 V,XPwu\tzzzzkdzae5mNwP\t ### ItemsSketch DATA DETAIL:     BaseBuffer   : hMfMYvvg fyyVBVn00 XPBMuqPmbQmZ 7NHnYT6rMqLfE5EgnBi9xV 0b0JOwg6KQtJmkzy3ZrROZe5GbocxGp3tUpM8yX 4Qa6V2uN5FZJE8mU5H7VGKZbUfSoaUPNe7nPx0 ,D9lseKDmRsJ5 NwvArzUhNixLgShcR ha02Jde5TfUhhzgpJKeuYxZmNcZ5,Kuw t6vxN2enJSXqzjLoyRVut5V7M Xanit38R21GaUjiu4w9BgIP495klIh KUwcdrYnkhoq,vYwf 5g B,XcTUDTIamS pkgSaW0nuP1GLIgjK f1eXo1V 5J PXuVlbdRl1umZd,My 0ttGqsuE3btuR0GkzPxHgM uFvquoC8M,afsd0f8eN9CDgszcvnkijCWzyUJ9X 8VfVbIsACIJ7krR6FP0,l8o4Mb NsPIERyPW h8pXwFD8GjnfED AAYAIvJkgcK UNiVlsIPU Wqa50xQvOb2 L,XCeFI53uEClh dk7OuPt961E1 L,kNWkaKCtn0VhJnLMnw9Chb4t 3iFQIAHDNByMftW6bmp p2Yo50WX4s0LBqoOZ5RNO GsrOZ8S8F ckBQWufYwTX,DNmJdGHcN1u8Dx0A x73L9PWD2EBANbPD2Hh4zox41feOqaW YPBbwVYq18 0vDvbidz0wmLOtLfZp2 NrANO8bw4 8ALCPfYy6QvkX5ajFAzuZu5Sjfh61CB GDPt44VyEO7nYdzWLXHBLug9BeqV69CuSkR iyAd2Vy9XYPAGJZ6TmUkWjxBy NhTCnEe4HEV,taO1ZTb2OUzt0KYs,i0ykflimG 0WgRwOUNlaHe FxA6cgMj0jqi3w pHi8NvU4Av5RgE18rC6Wy42r6B6NX  SmjrfTxmTaR8m kP3GMkJLNy0zVj0Mh xYW9H6UkxAmwsQithJghvOACZMbMTeO85Xtd38 TU4FwQwUI9XeqqPwj6v33UBL jDx4EzBsrzqObPXkFD7Hq1,69f  AZZ xpUAmakq4VX1zqsgCeA,VpAw9grNZb2sg ,TlmYFvAeRgSpoLqCUK snVdElbwq4 YXSbIa7Fi6f 0tun9CSdZO6a6HnYq35Yc3r5VTPv2BTDQOpuT P85n2fhb6WNHoUiXxm5sU9Ev1dkwLsl pIvKB896L2Wi2t x,NI3sS3FKfQgtewgaKBGfNJFAULc eCt haRmVvC,D5b6oqgMd O3Tlz,7FP53Vky7HNjw7V APMiqUfzpUULvS 5h fxF2,cDYGkab  iJ11sC8zG70HGn rfLhMDb jqYVG2LQf8sF6GS ZyQciQEL1ETFQfdIHanV evVpwZAueVvZ64vYF Gv9ZxCnrK73c I1JCpH10DduyUu38T8oCnaa3Pw5B 3fpbGPJWfYLg0fzXJGdUmYL 56fyQiN2FMgPv1o gB2Rz0V9 4Mo nV0MhSbqBu0kvBTyUVD3Agm3KN1raoLv indsIVhsUa6BuMNymApvyPXvSiW6tCD1U5dE3m26 W31xhBrGtQg,oT4a66FPQ D6,mAJWzlShrnf, c0kODrsV9WeEWiDCC2I3 xezDPO TV4Tj5v3,q Gno0 fi72utr47YLm5sbrGn2X2P9oiloWT4 0xJh0h4qeKYElvL3KUKQO xKhFwx,hpZxHX3xEedT Qt1c gg,khIR0KuTrq9cL cYWFI4M32QK FtM3cKivNNfmJSDIdgH1j ghS6PnDisR7pyw,YTICU6e74Ix hGvpIVjod2iyfG77JKXHc9Qn4,OY4eZZs4VD, iAU0IJKFh7 FZuzd7wmsxic7psDZBK6C14A plSfjrXgcGMGFQx,iask25 mDVerGqQ6FjAJQDMI1sQU5n6jDvaqGQjPUzF p8zhCdCIwMdEhF5f PJP1ydsLZcgMXyP 27IjZtnfGDxdlgOZVfN5nT4OeNSD67sOc WxwIAJjEUht x4ECGjcwiSJ CJYChlxn3msTIlecrZ3EYUiZiOAK 3DdI4cNdlYz Pmec PunWUftsjlzR,lAE tc6SlWUHWS7xsdvIJSW yYqjUHqidr2arvZQcAkJKa9QujQuVlXRVRLd  snXxTLFJOpBhp vDfqEe8HWFsqw, 4ijCGkGETtdbH88kgL8yWRaTDx us LZs4JN4BrdwzI vdW31u3eNICiJ8vmXnPG1cCW6fy0LgVHq ghc,,K06KGM9DjsEprlB2BCe5FuN,16A NVY7vJpklAl8Iw1B2  MbloHC84zEIbLiS 4hGty34gd i5x8vzRLCQK82etjC2jgq9qjT4WrSL6QL5JCi  yLBdgM0lYZn3YoHaa19JPTkfTPomR27zhMIX8 gb384CoWUtQ SnX25AOrX7g32FfhTv0C65LOOme X0xQRMUXLvKL 9LQySky tRVJMqsMwoRupo6pYJbMRhWo0qU8ShcXp1C 434lUtZYpaJ3q GqPZqY25SBCI9e SGHrOKuMOJ QuwbC5VXZZGMQH  PRWmp2yU0NM ZQ6wv7F5ADe PLzCuiXEezxonVq iEt3j rllf,BwFGjf0 Mu37Wy82zUc8c5vv0SObxusNv2FgkTa wnNPaqCSmHzPcCEqAVnQLQNprT a1ZIDlUwU,BUJIo plShjuFkq,ZRtDP byEJsmJbtuBeRM1xtLn9Kh mPHPH5mAA3PW4N2OjOIHebhYKlAmE2DHw FBuGMWZRMgNj2ulWklL20hALy1ria WB6AxgekFmEOB 2Zl1br ujACS6qrQWPhvLbx3YAFUvz4lGpa6 sNm3Y1hnlX6mQgeDrWDB3Jgf6lv OLSxK,WHVC,GWJDFYqXXlqQcvxYjuziCXb bdw0wMZv9 JXq TLp7gUvLZ7PZ4NMeE8Vlc5,OluT BoM3wDxLtZfc IBOot7EQntfBY7vpB01  ZKiN2U1KpAbEod9jny2qILiegqnNwpUtvaM RFmMFnvcT6QrYnfznl6trtnlF1MJ3 7paBgJo4OlaZO4m RnCc27C SZYsqKOJVBbDbl5p0dUT6WUV umTo9XHgR S88 4YSZi593oYGV4xRtr9iDJD5FQxK5J,f,ZA yPO9GYxC7tCi4uWvRNTk9GZMe 5,KB zZq3XXdtxB0gP,rRyiNj FKUr1gZfp6 8fZseWkNrqU4jYRUZBsrssa1 Tx7SDn6eqy12AHjrRLLv1CwHZEMzCq0RYza49 Ua2yq JRCvxIXkrTEjjqOzoe49Dsjtkc VRGG6L3uaViBFrjzAEf6yg,MSS,drDakXT3Ni VZPb1bIK696OYpaqWLODZ YTtriHYl6GE,SMeI,ACbZm 9D9whOL80iq,2Yxd7osBw M0SqyT3C WLqDdb t2cFLdJn,m QwC80ZSp0nHBSaGNZdgO1vv7DDe sKByJgZNG1VrSmkP20T zdS,lS83XQAb9sH8R 1Qp0E9CJZDYUA2MvzlLvLvoHeOdRkEhquExO 0Mi smuUB vlh,tAjzxVwdHZnpVgcTXnnIVKNilrd,c 65omIq4xdftw8CB RcRWUbE mjPDPLch36fEFR2ZV yEUxYnn7FhER3PaTr0wITAliLBMa vkHy9 4x3I93NtRmqt07UJ8F9vmxkoximYPU LeiaXonvUL VZvM9OZX5BDachAznUh5 HiLusqMYr WRS0iCxRczHdO24PydnWTTJAcFgoX8EkX6D hsOgBhX0Q6MreacxRrkh3M5udSvfXo GfjToEhQ5E,RFEVrfdRkWybfCa1,w31I65bKM o,hvf7koIvJP5c6sAldhMTmv5Qj eiZFK2UxaZtT7a,Y5VrWx9KPtIKD9 6HlE zzIZzz,e cRw6bvpNrrTg1guUsQW0nWOhxHiBrc1SO zjIO a qN4D4bujJ5DIosyPVQ5fYV G8h5KdJUmgTNggJJGvFLAthBC maMHFqDgyiABx QwVIrSO1xR4tp Cs3CoFMaVSITOzcB4HegSMBn1JuG8u X CZ1OcJavcItfScFYrVZn5u1 ar50ZUNAd89V mZcZlUE412hQgICyhjvvJMtZkMeFYv9 KzEAllMz4iAzIdGCrnR EGu4UNdml7VdUXRNCNlMqtHwhbPqWwFMSZjjNfE 55NhROchRSnkSuclV1hYUnVc30YlQO3N VD19koYrdeb0fEFUsQyN9xQ2qkMePu7SRi A4CxEsyyrUBp1bKl AsSgQBdPA EgxcJ1lr zy0PhhOHULpma 06YWposxCf370VjVCyN 1pHqk  TRUU4BKQ82XxxpvHgmPCVtQ1 FIY, yYcC0oBJXRMitM567C3,KRSjdm53MtbeKwWw  FEByEnC7kFNIOrmEgZEezo5tVE UIEzZNgiw4q0OrVswKKpi7H 8hmFXq3WU kEvK6ramvyCT7QlgOxEMkh ggO2DjAIxSdft9Rq71tIOm,fvUCV6 RKvWotV9eL0Nidle67,l EUi20MVsMqca9xLgNf V519qoMNYQK 9ZFg4WNy4RBfFdzO5ygoz2vDtQJkKNO1jIE37 mp69olbBJY9O 5orp1C8e XKNRWby livgkLG28R0RJTUaF lxcE 1Kfqnms2qIZ VSGkp0hAd7wyhQ,SYTg vGb 77B6SJ7l1A8 Kc nWIxNoUZzPbRcql2DyzjK6Wpqxj Ld3o,ddmg0Z f0Y8OM88cPlwOHso QnI4QA5aCCx5Z9sAjpfZEiyZXv3bva7kZ TvPSbTXqWKaQCytqeS9K, 45XaGJNkC5Yif5q50SOlwaPLAowJiRqCQNKCWZtf 6geliZUyh3dczAPdfnXL20pVWR4nWyZ1RDirwW iPgLT7khga0cRNR819PyIs3HFqZzYmn6mN02Yr gEF5WHuR1dX8M9xi5x7cy lyiOB75P8CYVB W6w3EacqvmzzaliClS M5vtkfFvfbVsa3i5AGIX1Vjf0wm PPhjeRo35 A7 ZSYptPOO7enRER lq1DcqnCaymHLChYy9  aHHyTOB,5wDp 26uw3AcOX1Xmyt1 JYC 6WL1pqhGmuxV  wcAzsvrNX3IJdvgE6weQUyKgOj9MQMy,,XuWQ3 OallZGj6FjXykukZtvABmdPF,s8qP 7GFirZKt43v2s 5wFRQfHdjBryqL,Fs393KsoDZRS fqoWw6me7a7ja8KnIt886YJMBWZHxeafXGPA DVB1YZkGiMC7fLvCgmiPKpzjZb2WQ0 c7eZNB51HMwtxhu1R6FbWhfGuBoFUHGTtEqAncC 7fwosUFsUBfG2oTwwCBMZl FSx oqyrVwMmAlg5XW4kXFsoswEehoHYLtkw bmSAXJrvEWP0BYcHGr93GKE4yw4zJOlmNW y69RH8wfgZ0eWmryjmpxE3w K66IKe,huG88J5tYxkk9,EurSPdzfhMNZDa 6KidZ,cdOkMrbgj45C 32yGqhl6RtjtUTEWSUTsDr9B GnqyTVdZVkGuNDarYgwtHRL54VxCw5meSHT bZYuXcLf DgKR 6EpJyTpbd fGvy7kXgHOEbclIpi2N ajMi4jEpgtjQFZYsciykUOZnS3HHKVLUw04b N6fbHw8WGVjYNQ SgZoGfMX6GiK 0J4WWKoW6ix p1Z9f2DtZ22DUlx1zXfZ2ofAdvaHD NNgW2bG5Soq5bOFn nN3RT2 rsXX1jae1aubNYHlsyz TQFIwE1CdUM t3Ai5vbLemxfoG jayQhT Xt1RIQevoUmXMOLPwxfvS,NbZD Jgj fGX9Z5a9qB5 wjamm3z5Hl2iQ H4wf XqOHyhfeHzK7wbN5Qm f9bO3l3yOONBnOx ULrW9wm0Tm9pj dJvGwTomkZdHeXh s8iGZ3GzBo0gXxQ fzPMc4ffvKhZUpPh7c7,z,7ZTCJZ 2L50lYNVAa 3eVdNgmXOyT7RHRLHbUVuziKZIo dcS5un  wlRX6zsc0jR Oid F7z2vavlgmtwQ bSxjPJhvxPcHzs6fdCwQD84o7ecOA0 xklFUPlX4sHY kAnvyFF6FrKIDXdYF0DJylf8dnG gCmOumjqS,QNbsLosgtUdl rFjBkr,CQnMQXo3en7hdaNu 98I1gbFzKKtl  gC wrUfZJ6gcYspGJq93nxkauBp3 CrbjR 7YuBBac4b kLmU1EAG6JcNE 5OcSgm5T1g0N1KsniJX1qjjvM5Oc6jX9Ta1 ESTmwMGoLqt4cyoIa fVDzRyd N jzGd0rcZC8zhHYTBHMQgqeP r 1Klsk05Lq RmN 8gkfMZPofQeb116,wHrTNla7 af0in SaXTaY2a oD1DEK8h4eV49L2pqzvL8T c ,I hfsnB1gmkh2kV,Mhwhn4x HIrIphKU8FeEDN7W sf2Y,vpBmPg fLzuI9df,ORt3Nz1mhHI4WGZ43 ,x6Gnnh30Tkr1rly6DjGhwa8KLIuZ8oC WHk,HYiwlEHygke lnpcQlNVoaPVPQldn,rFpCzss0aVcfBukX JbDRqxdqN,Hkj1f ZJErsxfFHxExd9nb2XZOLVr7liWvPj2m mFsgAgYLm2, 4OQ97PFNeE,e8sGVkkRCOpYjEyM0yTq tlWLoTuWIozOCv50MdeOvpX0qZd7QId umJF8uGaNbS pizkErVP9EWMsfNKAXR 0k3OsN3TFyj3DCEG4U6AKYRQ 95OgZWVamIHQRdpgBbX5EXC9,XIzpTZnPN,n  kNKJgjO77Mm0MhIWmksetniB 09BPQ8a5c7l6 uQVrSpIdR0IzAin DESWMeChjx ehRcHz3B,,RgLypumrLj 5tGQPaQwBXQaASApGW1CIWXuHpZxj O2rLsujTdLVa0YcDsJSCAns6rzBL3UOvogax y6bDJNztWSCbtfwCIiTVhi7V 5CEa66ohQmdWcB,Oedc9E2CB vxzmndYFa x Gm 33pC0O6IyDF7hOMb6Kkev9VrCwUf3if 34jY2v4 64NRmYGdlcT LnOGbWiw,r6V7V1ZV N6rVSYbqqbBAo t582EggdpI bImbrSkIS27VZvOlCb1khu1h2 S2tiUtDn9tTc B SjO8tFBBNG5n 8yvv,RxVhCUQaxhoHcBt3 aZamnpt5r,LbCR 8zLlphSk0xueVBsG heSvsy92vOL NM06HEogRuGKO8VTQEcvQ120P 1q8h310BR7r dGDP8rJAARRt,l9NvPdJHr3lKkqpT1LV rZ,d4PEvrTS3rlXIlg aqB6HZbsgUYTaqclMLxHSpEemxx Cg8KroC0yQRRxfRUa94DEda4oLP0mHX0sN8,nR ,98,gErNRMGbRQFwqL dpObbhQrA8Gh,Ku0KThc y824NQTbc1sAR5CZ K6vPI3TukN DUPB4eV4eLbikG0v1HrKVhU5g4Pb5X6Wix Is8X03HCeKrAvoD0AreT4jh M,mEF4M2mjyNuL1JWzAyHLm,Q U1N6Nf3eXiIWMd4MGOOZreF9nF0LKE rGDu7wbxcZwUgt9CiF0  xY73Ji0GvRuzmmSz9X i0nyb2877Hrsdw,9NwFz3sc7MjUojoRnGJ Hnbxu8vTLqvxP1r3848WyZqO jVSpV78JEwFyggHNn JjL3deE63lr3M5yOBRkop63gcMx,t IeWF0d6eD81bWdVLC9Ju,E wEYIaVDwWBk31kh OOjE7av3hMTsFFQDt2NmPuL JX5G eOJl1Gt8QM9FC1TQdElMWSGVFq 5YoJPWkfr2DjYl,2HHmvgZtM16s4RAINF7q JE6I2iMOIi4hhRWWDnLDhJVfRnub6eE H0dyAxHJ6UZ,GgmatFiT,pcbIu5UBmnP9p,N2lx od3P0HkER 8 ird3BKuRVkhL,TFLhpJtXd3 mDxwPRhEv9N89hlPFvR 88CV,IH6UTRe5eswYW 2KaQNdr4mDp23 W9FDp e0np5k TC6b74Tjc,Q,CMOxVJPAw4 znrBNz92t98jlvCj eilEuqKA8Gz p38xFSFK9xfiv56lFG pUNfJPKXZQ9HK2BfVKUq2I k j3OtcS8A9A8ERSR 61WrXn7sC86 U5 CBG76SvZC5DYC21tF zjXEHlvOr bSFJ5 Vin3 I0zqKq7dw 91hk5OBZ0dbKVTWiEU8wkM4q ON03Ntir5QiCa1   roHVQu2,s8lyvJOksIrR PAVBvBdy grNxkhFe 5JH7ytyQLjCfCWYy6PZM pdwUN42qUq1pgz YmPVG,3SbzZmPD,3OWdT 5o fZY8jPQuaoFl2EDGo4ALA FymcoDpE aJgedDo59sx 9WE4MSpEtYkQ5 PK,NSMnKXLOC RuWwP7dzs4G0b xLpGSKlhUB9RxT9u6f HA2jamkOceXOvT3f Uwj6Sv6yJo1zhYz 9pOZaJtdFNn FCq,C2ixCZp86lXqi3Y7SRkFM78iby UtFVNB5dBbFi P4PEhCkqFW 1oBZ5i2KfKTl09xayOT3eQgA,ZV7 kWJCg,vokNlYRI6iwxWPYXxrWOIdMVnxQ8iD J8zvio734rzw2e4HcKP2k A35xd,1IREFmxGs9C34E nfOzEGK3AT,QrVby8XAuckziYti bs0nvL9APihXv8JqH8XU7g3fv3rVuEE2 5UqEAHm0lwyT2gHd0bAEXCxH iYuux30HjcNEZ76KicmpmAaRiNnjlehy6iXKmgNQ nvwusR48BfjqHiAOX QUBR2SfqyiYjSqaY6lOkgxhHOdkLHKcY64iMTFZ LC,YmMmseNC1 VB8gxZ6u4knBPZ m1CgQoyhSsz4puSzJR9eM,Q BLmmxicNNQKNPqG8CPth73bzJbXqFmBkH8uH1jK e4ywX5J,h3bzpPFgNyxBvjUQNVmGrCE ,Om wCxFyGwrtdsNztGic,rvj0dI hSWioCXFBks9foS53QMY WBeCw feItBLnSe3zm0KZ5dx5P oQiKOC81nSZd, 8MkaM9aJjefoAZsj3Z9S9th6rvnTh zlyBlm373WgXZ 3DfomsmsKTb48 02MRvL816Ca2wktY8lDNsHv7YaCekWc SrlzR9Q6iUqYF,1ESxFSB EWM,UG, hsWGbacjAS2 tWdytZQRS4vOkz M6B6ew7U0BUGtnP FJPYvfGayplHxxrmy vRfYnLPGdlbeBKXJwhuSzZB8KrOLOYZN lx1qcF j56unWmr7Xe0yKkajGTk8XP9 vJqJC 8NPSOIRk69v jjRSOq63lfHJ3xwf oq9RGfE Pn9zUtbcNX5BjswkFOtEFTEEi 0sR vTjzERBlVS1r90UYhjFlkjeInymL6Ag0 Pa3zwbtblkPmmO5jVZOK4KXdXHWF8O82u U6Hv5qC1T4zz Wnh8G9swa9,eXcBud2ugMvtm,yW0sz8zgThhGR1 hBmMYvNoAG11MgC S OXwHBSYV0PXtaYtrJT7Ee2 1mrk1 vVP8 sBC,9ZgrTxH820EEGRL7kAVCJf cqKcYhX3Rsfc65UYDRsECUUgogv6l,5uRqZ wUo71v1yrWxFO3W Im4iN,zzQBuZWdV8Ef1y4OQNPt8PdjOrmQg pqe8VdfP06F 0m00foLjfJ9H5xIaId 5h6c6t1I1j Or9jQ8oyiS1bI1AZT YyeBGyoiiZBWFDLJSEs TYz9BO4b4pVplTmHR2YzZv TOXU6 X9ayjmgRoK2sWfB6pW1xQOSj1pv7A9iG0iNQCA pNE5TIKIwkdU8drsU qnPkBf4OAvpsKCWRFh yia3KET53COzsZsfuWYitlYc53 wsokt3dxvjxOC8V5j9dJzxL4Z5CSyjRRQU 0y8v  QnUGpkLyC4,UZnm UYEtDagUS3sOYrbfid3t9mHlQkXCLjsde9 MuQIDOyvSsIOCXLf kPsO8YZGk,v0vFhQIRPGWfXc52jQx9b,kOjK3mcc o1c0j1BUkm MIZ,Qma JPi0oqL0nMluETblCo  G,4G9L5GHfatMCsx uHg4Q5ggvbLFMcpl 4UEWjKG4RmVGQ W eEfLu0Oj P93TE9a84RK tQH8O,P6RM3H1WShSlTIUDxQBPpRkNm7 2L2TZCnhqKKwe7s1dQOIjsHo6obU vmcqycFzxcJbqr0knSTtVW7j0FU29u9, upMxEcCmOzb3a aS2rGAQvcbe 63x0jn0NBHW Bpa0H9x6GuPVAX8LXQ9w pxbYbaZEsK9i1ievj1fuDHyvV  CTyydvq2SzX SmyM GdwQcXFyuRKr qYI,PiwoZ8Ny1lRlxi8blAHSIC8ZsYgM413 G1AFwD,mxdxRqtO5SvRN5CTD5kqsFOUw1bfhMw FXf9oQC0W Lnqw4d4hIrb zscEnH,uZ8MsDuxEH P3FkiGGbMJS5UNQimKJ7yt2k3efni3,Drkb19 By u11iHQ4DaKMnbyfsxcoouGt0V0 xXCHxEX1JdQbq1OGLn3SSpJkmJx5Bs6G pwxkpANYFs5aH8nVf74Gqtxb HB,TNDe67l5fCPVsvDGeA9km Qqu5 nwUoZqMuAXRr0P eD4g8SZpKP838gduZDM5yYD,Jy5PtaUQmprE0xYv 1dqn C5dy,P3XqKHFcibnpqXnRkTSU3xCD1A xFCW3T4cItN7jZ58xsfG,dX9Al W luHYmlwvAz1 m8HXzSf2EmGvhdN FiF,5Bs7WgAu wklIobQjcA51xgZEww6 y4OQj8yERkna,krNiTm MfbpPLMmo,H y sC z X,Nn5vWR75Rv,XHQN335FPrCcimxUmH4z UUdUhR5qN8ERNxIOvDM5lfN1IAEkLKW WnwOW3WCVimP1axQVlzgYiahMYNRBh C6DXaWZt7SKARiauGIYs78KBiQ5SxV5mrai1 tJbLFNihnjVHpZ3UPrfT fmn0ITidOVaylDtBEWJbDb NhAmCWQBRnrVrB, 9aQkPzEUjaTP98L YrcIni33tke9k KTD4kex7deoYyMm3lyjIvw4sA6OGzJ Q8 gwTh72us3B5Y6Dgc8bdfy bSaM0G qrLhTjvKcjqt7k0zAXcYBbDtEdz dMiEyqdP,9 5wl2gmrnsl7ncc ofTiobmcK5bGgjHjIT hrS1kRKl2RuU6tw PsZWHhK2dihcdak lCQOh3tE44A07yw0PCu MNi JOVe3YKtL2sAkd5omGjI,  jgU1egYDyjgIIMigi7qXlJaK2t2gEz9lPNjGYt HP6BMhMQ9e61r7VB2X7OsGaDEbokcO8jlWCw H7GVlbqHhzN3 MyL2R9qSpes8JAFR1CQndRhs,NeMirb eOqgKUWYI0CLRzClsk1UcYov9cCDiifv7Crvhq yjHBMcDXXC,QslRhsy9W7CFO KvqpFl33YS0HsH0QJyxo1cPCg7RWU7c Ap1DA9ax7MFvGkI, 3Fh1VxhWCf8vTnWVIR 7ckvK6tQJ8ixEn3iZuoS,jOIZM25Z MrL2LQX8Yzu5rUc9tQSWJqQR3EFU5QCuH B0UBKypa5ek9QIIoVtvuUKbDpJfaA7,1yAKryPbE igh7iQ894OMWHW4H7 QEudeaSTHQGaq8vur v 7pniNVi5ysDbG1 suyUHAw cVm5A7W67sr3pX8OqWX MaH8anrY6L7hpIO4Hr6mbQchO XwSgDTWEyAzQCNKNlsWmVAofk fvWzAVA6rZPr 03STDB5P,GQhB736Qfl03TYKblI 1AFMGPXr ,PVZCUkt4 1b yrxA59iKrWpgIJH 0,up6yvJneB PjSl E0MKElxuKZef2TAXKEjusLFTVAZl SY wqgIeo tMeE    Valid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       4:  AGUu2dkAYh3FsiV7ZBz7md4fAwAcqH3bevAk  WdZDpThXF22KWWUiZW3dTe VNi9,0  lYw0prAbf ,6jXB,meZ Y2QHgQXmuHgq,sokb3gAkVeN ,KiSlEKOsGQdzoq8c38ALh Y  ,dJyS3aqn,fl2ms ,oeOetz18J0 05QK0XYKrgGNJhCv7Xmx2vg5fSx3HIY 0Kv7kZeJuX Ps,CHDJE7e 0admnCNWo8oF 0urF8uwxjZPy 18nWz15UQU,X 1MzpmZ p,h6PSlwqfePf0iJ7r3KQa929iAYhC1,9 1v3pPw 3yvB9znDoBEf0QAqQdpq2q6NxsKv,b 28mdFelkImxScRmHB5IOjgLq56N3RPuGlrwxi9qG 2Fy4ZhKbEqJcD9QNIzrOp890aaGRtGGxX0IYTG 2W1erMZOq1uQA8DlDW7DxJoXVset 2lC53g32rSadzSr 3,GvTstUn90PvNyMHd0WCIBdQE6jM7D5Ofzp 3Lwg5kGC8OORuGsD27Pu0f, 6UfTprFRj2Evw 3jrjcubzA1fOmUGVZCiz9OQ1LJv8nO7f1T 3ygJKswsSs,g9v 48cmNsRoaxwLX3KtYx8R8OeeV2JjgK EqFzPNnXn 4KZD4F9SNARZ7 4Zef96sa ,uClMMOmIzjCcVr6os1gb7OZFsvCshr 4tF0i6CPcHKH3cr8vnvWlxHgFVxxr6Xcb2 574LBgZt7oX95ghn8MUlmR6lQxQDUU 5PLtBGoWYhuy8RtVFgXN aOYJHdo7CMF 5c3VM9oor3eCEubNxT1uNbJz0kQlQ tvyTOQv 5mjGRD 8AATa7JV0FRsz8DclJE 60F0Jt,WlJaMhY2 T,4FG5s 65 6MtsHfO4dCiQE 6f2OBYX8g gZYuaZI  aT3wBai 6oYfqe21,k,eFDLAv2G5ANJ 779tkDyB3MJne 7Q2U2B05miw 7dcFlqi5GVDryU7,J0 7sQAG65BPsvy2XSnFIZShFc9RR 87izFTpcEnmJtT2JiM5VCuDj1ajXFapR61j 8J0ocF9dAQev 8YAK677joXzPI2hHKZewEas,YTgJY 8xMLbIgLrQL3Nubx6QG0VZ 99pOe QIfqcL9elg4azS7MvDM 9Wz2OVt,CAXL3cEuFALtKyLN25CK 9nSypBIsTiBU7XAIP ZfBK8TUCna05r6 A,xb8KnWbc3aikgIP8HZsf61UsLYdf, Uksdj AKsx28se3uWKT4xxKKiaXkAS0Ljp Abs5m bzGJ7PJzJc AkvMegohoBctRWKnpFpeh1DcQVY AzKr56e ATaS BBcAZYZDgqtP BWpRwgTKjKxfs2GPPG6e1qRuYtSExLDYuUl0Y7N BgyG8GUMMwR7tCLnmRg9rZA BzeES1, IG0RvbevgqnIGmu CFvFY,yJxyDey67FQH6 CVGQ0cmFviYbCET6M CkbVAgogOgDIci4 At87 CwJEAJGPPLB DCy6BX0hI,Zbdf8pk0gh2eC32RHhL2 DWQepzNUP8Qg5PXM76ih1Qv5CwBqEk 4O DwuzdAY5xvVXH GsUIoOce6YvAKRHA E7rt6EBKXo EfwlrMcF6H3 EpO02PugVwV EzPBELNTOhcU FLm09MP1pXuD7Jg,Ugm,LaEMK FWkppq3Y7a1K5NJ,8W,zYuO3DL FhWrF4YmGbORUoCily1YTz2vu4,npE55M FzpCBxRxDPOXNh,jLUqq GDX mWrpK0bxM0v2cYb4xBwM GWTBXgiZL8sR GgfdM Fwyb1 H8VialEWwGNvxfltD HFqt1d5X5kRZT zBsZKHGn6TF HYxB8aXcxZ4z9d1CJk6 yar HlN4tbes,j7dacUj I26t0LMGto9zk IFV2yGexXGMhhVxQpdfda5T8lbIg,dOU2 IWJnix5YAmS4Lc96naAOTbP3 PApYAZ1mbv IiThlNfRlapADoKRyL9JjJdG4T5SwL4iAz5ftB IvmN,HutM,3MzPljPzstHyU1SrZ3Jjk6VlA J8Z3brWxN,2KWGJqfUjjSlUsdPRpmvIe8wPRO JRbZiFddr8AuWFwi6qEEPK 4UbK5ewxLA4kHc JhfPLA OnBZW9DQx1z9413 JwmSvPaCT0Vo4Riq7AVPPyUD3z KElIt,G,gIZ6 KVmEbfxo1qfsZd KrA6XFbmgAr8cMCLTRDBWdJAOc 7cSgUKmfFM L6Sp,2BdmwimYbEbyAr3tVJt15iPaCPDPC9QX5 LH4STCy3O6r LZw4zVOYLR6J7TPRipOY7rxS3BciFElxDgvEe LkSboASDIjpSn7RFJgcadEaYpT69RdfQ M1IiQBhDJ2tkyizNgDNo MBD2IZBrQeWZk MSKHQKftfVyLc9MXeqQBXV7Xjb854iuyzuI,a MiVC3H2iYApWZc0nvsxhnJG Msym0,1HLuV,UV3NpUkyBswJtRTOaw NAWK3 JV9wkGmtc NQ5f dxG6SGaseWroR6dLJ3O1mXAo7YY5 Ne1Rr0vdY6G04wPk1aYfD8t NzRBC8FG1cgL1LdFi s,uiv O76 Lr2E3naESdY6Tmf5POw04ku2DyDmzx0 OQIJ1l 88jKFV1Y mHl296lNeeYW13t OYh5ttkVLlJMdzvu VRoGJWeYyotCs8 Or89cH3V5NiWthI dV96ZJWlkWZCUbM9UN P8b 4LlQDS7vyf4oEjEcZLiBO3 PQVk8bQ5DIINbj Pb oeBrm6l90CHRqDlRX5VzFxPTCWKKZSCig8T Q TuOD0frOiGF QCuqWU5IvBr7AVf QREc,njW3kAvlajgeki,jaFXyG4OzC46 QrF9YtQMBP R0Qs5OHJAlMFNaCWRW,2P2i0 YDt26hPG RGKmpDyx4 5Ya4wyFHoCfkkU6 RR1dVJfCyObseL6hn6wyzM4Crog RejjFpquvNy,zGCy S,ezbClwSh8m9d7nqfhd SLn6zf0vaurqOjjMcuyQq2FDKZkrStMvuE6U3 SaKD2lL8Wni58TFlbwiU Sls1D2FIUipjQ4NGIR T5S4jFl vx1aN,D8qxc6,Lfp20N6WOf5PMB6K7 TLnddDmwrNf Td8cQYmO149NemQl0f4xmbu0vrSMPPfUejg, Tr0m3pfkc8sThnqSOVonVp5XgwFiKimpje1Dvy7j U7q0sU,ccKgKtEI7 UHV5 cLvVdgQz Ua3Oyy,t5cVbj7LMbr,cV4GWzM UiCTX3IfnSPpXsUYlsVvm48EHI5H5 SKaY V,PHIPNUhnRubwucN VMK 35Sm,Bsbnc8AOVqBM1X8CSSNbs33FstEZ2B Vf bWaWasq3N VvwYI2goxODzpC2svoDTYyCSP2C9NUuMDUwvYl2 W2v2LeOSBsDlD7 TZ3Nfd1OOz WPhpJRdwoL XgPNURfeWXDnBqRnZ9iz4 qUQQA WZO4L,jeK, 1wnaCzRqxKkZHiqyOywkpfckkUZu WoTCSNso9aHsFOA X5G75Mmy5yww71soB qEj XJzInCTS2Yq0MxY XaxYso7XhvwHO1wV5FJV XqfwMQ FM94GGzh Y6nm,zTwe9FWtt2m YTZ5NmWr61odWf1AlM5YAx Ynvl5Qr9yexiCrExBHFiP3OBaRrFFiV P Yv12FOrGnUvwgfUJr Z6ShB1f6vsL6guF6WrnJcYTAc ZNlLuAOVGDJ9 Zbhb,O1seD04pyCPEDzTr7X8mAI,y5 Zye60o1YlzRaObq a9kYRgbJPvsh9aePE09adD aR6uRzDSnsgRSi0Lt38sFuT57RNTNpyPJw2AezCx agDFjRjCLvu49zn0cMydcE2zALkbbl6JNaF  auZPZIhx1apeH9l2HOXzo4IEQ6yl bHx0tWPlfQA bTfS8is F U2Z7CI bmRGNp7TcpEBr 44vZcWj6dIcmZJaO6EQQ79LRp c3IZxr3tDpLoHAeAXjGchK732Zm9A1rLFX1a3 c9BU,PFPfJZlkgYS3je8NFmKyt cNZSoLpF8l1McSlSzoUi,zK cdaCntSbEHZTeGOd5gjuvg3 cxpOpF4nN81Y39xkibIiZxNJlM6OnNCeO d41csaAOGn5fvRLZaL4Qo9g6OSvbVJ dGF8t6oPZe6G dRLi5ckBp2EpWsg9U6OsZu4nMtauqxD38CJqmI dnQAlW,uw2OwyHwSLhrgWpPlG e T7EjBHnl8LW02J5pb3YNDE MQpoNDSOEB eFnZF6kdSwNOm92AgR4C7JT4Fj3kbEt0GZp eQKeuYBYNNNZYgAD5 eizerOb2kaEc 9jG3L0QnSh eyXRKrEYi65W6WtRk1ndJ5 fDCOYERRGZj67iK,146Y fMdvmG1Uovk0AC1V0MB0jYyh4LabOrHQLUrtD fcpaXZGptd6,C4 n7EwVM frSxyo0eyGEP3cC68P,fTUQh,msKyBcxW g9ZbZK1IHUrdw ayXw6TxP gKTVx3l,9KZwI gY1Oo2xT61UfBzR4GkhZBw gis6ciYVIKhtLl4ZwjDIOg gynOgDOvExPbGvo hBoMpDDANSzffU5PQShVYukvG6WbXIC,avo hZW34pCqVAJwtzfEH hkrcHrg pOC8k0,rPuCGEPned i4p5xzjNUeCCE9EB0ugA01GT7ALfDOTCr2el iCyp0vASgOMlkQidquLKjCL1 ie5IC8CDRKL4VyPL1Q0W2quAmYF2kb5 iluwsStzYjTTNH9r7NCinBUpdeV6Ac39x j1z6ho4DmeuhhPnRa1 jAFXuupAidgI1rbUogtB2EQVcrz jOxGO0BzUGMwfNnnh 7by2 jq6x,BNzqdoMUHUI8lSZ6vwfPz85skF248qUlk kArDjbcyzuOkCC50 kTr3HZvueVE3rGKdvmePuO kcjCh2U4xCH6qbv kqlni sKSILcQc9QwAB8Fce5dQY l9evee4NWDe9MoGXdEh lScsniliRJN6i8N1oNa lfz uefdyga4m loDmwTMb6nell,odXOVvPP3udJouZg SG m7CRAMHTpDt7 mQSGxeBoj8hPqwqsfiySILj cVfp1j5HudjSQ5R mdr0kaNbEWS mr67oAsQDLKlxGO4dg0FkDlvDYGcEYmrF2eW7Mjt n1hbhFrTyA1UzhG6bhDguORQZV86bMXocUo2 nMi,sU3tqMxcB5q2tt nZuXlKO8FZUT9 nnNNbWIi86 o6REEvn1ZGwxWoHZJ oF1JI8vuRhdfZ,Thd8MCmRgymmRIR,P7o2Va oRM6LJPWc4nxfNwGr okdUwPFwofYp9GIiUWNtwsXeGBEtzxIW oytigLFHawEubopLhqJsUbFRvvwl0bb04g5b p7fr0POruLzU0p8Xw4WwPH uTYTMS xzyePZm pNspnXKOmssHLKEq, sYC,6RrBgEBuEB3tRq5ot pm71SxE6M5 pw17sCWvsTZGs54SGsLNnt1Ygdv1a9 qC944Ux9UtuRvQaV qUBt nyHhroSK64L4Q38vBLBALw9A qe8hJuEZ6kfGVIP0pKb6pocaQIOmU71 qvpbsnr5jQMrhRBYEfsR r8uUtcxNnvojDjwC2SX2xi rKujlS3RIJ4YJf9 recOBttsfdz2UVizl8pCz fsTyg4Y05cd rtpUUXgYcgwqEHVDZIKynZnjx3bTXB9aq3Y sB5yTLOLH,mZz54c55FgcMjsqhUob0rs RJijz sTZDzU6mpvzsDXT p sh9dNMO1ZpRV,cLdnOAAstfjFzSV stRuBqHEKKwZbJado8bCH795s8F0ua4I t9MJcwQCHd0 tLQePfP47AGkJ tckMOBVhJrs3KymIlHNW tv1lVKEDVBc2C9LwUH u4syZ,rnU5c6PUrhK3wG0HJQK uJe2vF4cE2JOo uaEbwI7UBhgrkyXmXYxos Lh0lNJESGnyYKk uqF3XULaSA7jHGVn8eZCK v koqqTQ1EJ4KHyWf,YhxLHHI 4TtQlPQKTWC0ur v94Rk4gjW1N7rXWajoRT8lcCgF6Zm U65fc vT4fthaabybUcpwSRT vdrGvB5MR4x1Lka0jsff vugddHROxkD3tTVTNym,OeubU6A,KOfJz w6hNnICZDh1TDkwlabVbDy19qI wRibkBO 3yK2DRo2MydMAyS rQn wfk0yGrK31MP7tYEFMMFt9PE wrF1jfkqIpBwRp g wylo86cj0KvlaKSYJf32NiKoy xBAP,twzZaBKruM43I7KxEX6g ORwgeero A2L xZ0m5ugtqo5AeUbRlCzxtpoLfIG2 xoyh7sagse6mxotmSIsiFhtgOaf5TBgkcChB y7hC2NOe0mkUZL yIT17R6Wj0gc07LRpe3,ZM WC7 yeCoLHyoAfvIWfySF 96QqMX yn Cr5nu,O z2ygQjvar8 4vvlKNAo,5gHHi7PL zE3cvJvgindiREWI7 JFNey zWOPShgoMd1Rjo zfMJnJtD5WFdi5 zt2LqV5smYWXiGfx3UYN5M7irr9BQOdQ        T       5:  Cc5EWKDPjlk,TzQpLW  YESe9k HU V   eyvL8LtlEpm8T3B0Ho9P7cdN69lFAld4m  vVq9FONRV3grobTnhsWNEkmYK0B ,9EdKYsXNCxAmxOx ,IGTvxUSwu71uSahDOGHstg3 rC ,Yh,A2RG7dRuTa ,s9srpppRXuFo7MLdTtaraxlH8gSS6 00wA94dsRm11EDNdi9GerG7j D6r5 0MF1yxUD5 zclS412gvu cZFwnZhOP3O 0efoBsI 4CWwn4yzD5WD,fq4QZir9p58h 0rw jS1hZn6YWEwnNC, kWmE 15aV1faEHfL2WHk8Kb5x9r1doR6YL3lje,HO8 1JTAouPTh5xRmws,73h 1b 99N,4VJ7Y6RlvvmsPUFzm1VqgMa988 1qxLWWORk3bbU5qXCz 21gKtDFWmzDOQer 2EBKcMvtcENaZl7XoY 2d dMUEpuxPQ4zR0kdcQyNXWoiGRoCbetZKQ9 2tWB,8P278VF2PMg8hEp 37z0znEe4AtscyUrR 3Ncj6aTB1s,Xx8FynlcBNHl,Loswr9 3cgQBdPaJFZigq2 4 eFGqEtmuPAz3t0OtSg 4DBsB1ZxzxaVzIUU7WLGewkRX5Ro2t1 4R0MAkrNkFJPx6UUdrsxLMpKKBflq 4mMaSlyo IHfsCIO 5,isENbNY57 5CeYimNP7dK3dS 5bExJVBp357dPU,MAsXCxQ0TNUezzjgXnU 5pcpCAYc59AbWeQa8rnyjYUkQHNf05 64nU467LnOLumryAi HXNGaJrK9HST 6Hs41gnW9Sklk4gzhAStkTxtKYB8HOW3I8bwev 6TYP6nVjA,bI2gv 6qGTjS,df9SgU W 6zK5Cg6B9lRWMOaNPoZz,XbEk9DT1c 7Av2cGB8Oy0CwoyXLuri5,3HJfjCaQC 7VmBDYgO9MJ DQ4FN0NwzOQIIQ6OcxP531DcBDi 7f6JFk8CCKin 82VXuNW0HcUqfEVL 8GxX 571KiT 8bYNPB7NuM5G 8ozE6eCi9a3vSRdZAT 3xYR9bITi0am, vj 90BlfmkGJK2XFMa24U2VIpfndzgAdi6RoOHZR 9N6Ul73o 7cHkCx,4vFtFNi70eILnW3JN 9aBkXYULL4m 9kQxX4YUSoblhk17WcjNSbPB A0sXRZxrvUsj ACnIzdDnlvVFYK sId AXLELMQMPCZxrclF5NhOwZFT2881uLJ9VUqD,a Ajm3qIbJmAt B4DgNZVdbH77TPQqFiWgZIVx2GRW2pj6hPhy BHSU75XthJot9dI5z0Kn9wTTUFbZY8pezk BZrbqhsfwMlj5S9rYihwnXZ9uB BpfFnqS8NlXNaRxqE3doVlGTcb62 C,3u ,uNFiplAKyesjQYNol4Ug ucx B0 CIt51poLY1ZdjH0ViSFMEs3vK7Ml24gFhy2 CWg2jxykHS5SO5oTH1RtLsHTmVHLw2dQu CqlmiPmWhC D0tLdjxdiKjyysn5lpM DKg1zWQ9kw DVxsAVCEeCeVGkT DrE3aqOhQ3qQgms E2eXSa9lbCTFktgjO3v4 EJ8dMENfKLoaUr7ALh0JEvGSaHnZZz2CWHJKq6qp EdRDvj4QPvhkTrF8ghy,Dwvw08BJNkX EpsA6U d5jAohLYYndAfy F9 vuzHweO81iHC1F K FNPphIgvRkBYnbM FciwB,MRaDwB FvVwFxyexE0q9Mk G5XirCgNxaM0 lJls GFXS4C5Bs05,6mlzyt4xAioEqCyOEDT,4uVvXvN Ga2DdSVZgconhW,vvhdBGdwHCm GzdJ4BSgF3owQOf H7p5gxhL7TEt5mXwNFPba3LgPJra HQhHrlGD09,B8V5eOOFAeDc9dU8ijFe4 Hm9GeDnzA RdeG1KshyYBQgkORLChe I0uuZjBarONIeXySEnXREkKCCGA IDZQgotKjf IQAahmsTmPeVo0AaWvd9HeBVSfP Ii8fZPzCaShnGq5bUDMwFSXEb Iy9zauBPukIOu7FfZoGiSPWF0BlP4bA1 J9zaSCUalOujsxXa XfNAuT JS0UwehCjs0C JfNFCP3WLk,O AWmsfB8LzqxNj JviPME85AqVRsC, TmbhTluBYew2F2oW KAM9f8NDYflL1x3JuTjmd KO5uVjLk7PdQmrKD3 KbVKa6OroG4,3HtLEyauyOZhyLDd4wKj7pNK KpIrtrWYKnTsZKQ7xg L6n3Nm7GDgXYhiEFAtH,ZSbeQG mgw5nSnBvIcb5 LORcNYAfdeJcPUS8LQVKBwJU4CuI jDT,yd LbLVmGiq3vkjqITXm3mtbs Lv2Oz6UskLcOiKa3CZM9BlZLzfPn2iRLkXH M6PIS pqewLWIRDMaAoUjXI8B MIBzQs9Xbps8hwexbYNWwZqw234fcgsaH7YaUD MSI63XCdTo0FK1iH7Y98g1HhJ6EUZB2Ljjg Mx6JAYkcPI RfhA7M0qky8t,V9bEWIr3HU9uTP N8IvkeEr6ioYz5npi7BQBaH3HXkf3Yxi3JtNhNxD NTB8ry36sMSS8V8co1L NiLcOeJjuqgebddfw7ZZ21y Fh8Xwvryre3uwD NzI9HLRerF0bbqlli OAhpJZfsqKtYyL8mpRH4LBS0 OR1fAbksLdDIOrHfWhEValqyJihELeFAQA8D3Lr8 OdpUP0NOccKOdNSvCa8 J46ss Ovq8D7pjBU9LBJUkWE2ZbYmgGaEpXkuA3N1mBw P3jflFMam SjQCUs3Nwbp2zTd7 PLXaKS1Pq XpjlYOiZqAglSse6SG6 PXeg,SR160qyGhKzSn0cnqTWQ PpR,LC4NCfxVmeoxuv Pzb8f85BjIee9QPDCP8LylfNsvbupdNem4stv0 QMypt1b8XuvH160NY6CJOM9mw97Oxp YmQV3G QfvMUenO4O13mcNjvMM7X,d Qoy,PrHzvpakzmJBB,j 39IzZTKyziUY8VOXFP R2YpV8 OIQNrj0g05zK,v RGd0ZxFN9F RQ8hB83ODu8yRQGyUV3bPvmwNIMUOdtUE Rf6V2hIBZB2oT RtpRcGzDpx8KHEiR0az4XFxqHpai0FPV S1SQoTZ56D6O1doJndj5jQbsS2, SIoWvJ4Nn njPux7W4UzjJWWxV1V02bC87 SVA94r305OYc2hB5Kkp3JdlkKx Sg12bzGJp,O SycBgZPiDu1ZgDCC6d TApsLVMB4NNpWznd TZd8I7VSf9XjWyCq,K55H8LYDgDRGLm TrL2CDoAY4hSz 8ms2 U0A2yZS96jFu7bQph3pVsI UDwbI8FhDE,HcQfAMS USPM6m ,O65ovV,T8H5pjqdaAxXO7sxPnq Ugs8SzmnR9fiwJz9Cjw9HX9Z2C9uBgy,GSBS2 UsVnZ6RRRU4lSXPuOUA V410TE7IqcSNI VMKpHRaoitpw495vckZgr0pEsDBVAUX1O0k1mZot VbpZk5k48dH4O 1sWfwBM11SuAzOJ1w60A VsLLkmCO3gLstCnqJCBWyx9arR W5SdtB1OZyDBB9pG2DTDNVkrJrXniahDVdv WIs6nL9svudk1qip4vfK rSCbcsz WY,Z3yiqglK3QC WwLej7akB8C2ES5xoFVmyF8g70flju 0 XAG0RMnQSHDtOwVP BFXScd XOJniFL56mlcEip5cx,JaiF F9k5 XgdyKvno90UaYtv0XQFOq7tVSYD1PnKoDqvwo Y m2jDKZRe cbn8OfeYYBikDo6ArD3wbByJHslo, YD24yMIfhjO,SQligf4SEkX1VLeg8kY1eu3 YOG1QnZlodbyENOnqaUUcZd YYK ahINLTeUaklFLPTzWGkCvxgp YkgyY8qJIJ74cREQsaqlD YzA1Z8 4Ki1kEn7su5yivFTbQqpqd4c04fu ZHlh03biq9ydfqlm4Egt9BNgYA ZWyncSHLnWJiiRsWALYOZcPzvWCRxRyzIfPkqb ZomoQ0HRvdpcriDB8izZUHcKztK a7U6SS060Ozd9GtVr30IoQ aJ9qtQUPJZp7X6WdHTkrHZuO9DAu acdEjOSK6FS1z5ilPWMJb azc 2LlwrKheK9wJd8gtLz9tRoW8UwwotnY7Rc bAAvvJA16wielbetKlN13EuG bTRQ3,hluPtszB9Mg1BG0apld4uf1Id2t5xdx bhJKAREuvnPgYFb2p6 c09uFRvdehXYzVFkHtWTpBt cFSi5TXAmu6hk8 cWOJvP6U5ZuVEnYUmU cu o0OuMhP2bepCL7NoghEdis6BeYNB d,e5yzMRycMPbulCocOEfXhU2v6tm dIDj23KNBNnx dWlPwFfGEhdXornHBDNpsu650D dmHH9x0UMSg9RMeNzQ148x3oZzTK3v e1ZmX4XMTOBAj249zOAU20f4SUVg,Tn0pPIr eELgMjYnmD4oxIbbnPnvu3JS eVNBz,Pj3xB9Xb euxOX,C6rZSaHD,uIlCmocmRPLrbZG f3mjU77E37976xdW W fKep4ShkIYxVrD7 fY cChWbYnVnQ65y7nF5KRRsSOrt9W8 JgMEig ftSiKADrx3b g71PSFBkgYGmMi9G2QuwfBdW,0IOK gKnXaByQYOu gbVFEEAtj3uQ5,GWHpl5B1y glIH5RxzPvBB9uyi5OG h a 2lJSiCPm Cci8xXFu03wV0WKQQaDJWQt5 hCLnJdYmvx2vv hQ,u7rfWctMLbpIpFLvL8D9  Bk7shECK6JZng3I hc8Ixe6c2iW MRXxWmlkeVzTPKrduMyNGpPX hsK4IfaA6TElw88ofh i67qnpa,Y9pX,lQ5L9b FPIIH2qusp8P iOYSBr8A6O0g6150 iejMQH09KADEgCZy4z5TvHVXTsNSp5Sus iqzOCmW9oj KWmHmG4zVWfgxgzI3NcgpHHIdjq j7YQ5Zj34sLMI1HibzsR5dAp3rs9U jHFRvlHj5dmmsRHQ0IedRNLegCtPKkKg8 jiYpPwwdIcZ6eRPCE5OakgJgJ jtKBv8BQTRUDH28D k9sT9bPfC4 S9Fuzat5gK7UI kT0C4mi2oxAgu0KH1jaA kjsfk7cghzl7rN7vDvJajPXP l2AzDID5jnWI2IlcaD CVv8J3 lKm2sJBzxJTiadJDbya2xRomsZajo lUi3dZd9nsGbNQ1H9ldjDyvIh7kVQ1LVP  ljFsPOkSDi10QoE m2bBpDgjsSxzL5E70ZhC WdMvxAh1RmAgM8O mFr2yER9JH9uEtctwBQYXnij7gpaZp mXorD35eOLFSeRq5CRV mhzc2CEt2JWrpT n792hG8FC9mx7FdQI1tK3k nFDKTQG9vAVPjDnyoEJqYTAQfoTdM2IA nQYmZFC781C5Y8WwS niMDI3I9CIP5iA4vtLMqyGd nyZX2N8KarCOCwwS2vQm4ABGSoHewrL7B oDgOPnsok18oWuf3RTV oPeRH2wpIlumE354 7w0SgbyNU, oh 1okwbs3Y ov 0sOdFJphV9gHzqxq6cC0YuxXMGCf pC4bKrL1E4o5fcN02adG3wg5 pQ6qgjjGTSEemO4fPq pb Epg0DrNWdpBPhBkDe5lbUZveaep pqy WReZ8TNRGeXKXZuP13, Pc LDsu,GEj q1S,u9fhakzFt qNW0XG1NkpSOjtwPKmYLyuzw0uL 4AK qcugBK79EKNybqtxMpd6gnmGEFU qp9fWNIHH6CHBi4hWaLM9 r2mlCSdlemxdC rGbK2M1RzPpj91MwG2NzCBHt rZehADIEOgg,8fHdqp1XM3LSiisGIJdkdGtw rp2OCPfxVbyNWLPo gAuMiYxabk9CrL s2VdVdWl4q75IpFF1md4X1bjcc6BQZXR sIB0JaKAQwbG19pH2ImhPdpex jU,a sbsLNB7YSeoCjj8nt746acI2zHqiErfetzSxL2f sueDXa4rMC6EtVzKEfZd1fn0 t6KflFe4qnk zcZwXkgjqooH yoJR2Z tLHfjSOBN,OHVI2346i teYHt1or29zVWysBPa qnqTlggHghytthRyTJcz tqBuNEmFU1 u3, skK FP uHXYxoUZdjtJ90YeT3VNG9wgIMkbG8 uYNB2ljFgqoyTkdG usIXIgAe2yifn3SkFGb v70u4MzGLyApVZttVfqPVYZ8plSKf61NByh02l vHYFXMRFKRAChvwBxIbQZGgwmFh9 vaJp0rg1FyYyXK8QfY4CT vtp654,b8j5kq3br0dOH4bEsV3Xn0TsCpeF6 wBE5hYUUKyb6xfiyhoXD85xa8225Q1ookXp wVDZY4yoFcPrlge wZONOaEvK b9LuP5gTPS,X3wvrZ0Js wxKe86D4ynlEUHPDNjmWyphCviI6a2 x9GbqyGeLK6 xMgk1ddS0L8LGxNfEFDGoTMm4 xjdET2L, duNqxJs0W1 y0S5wYrELycPFh yHwojcUcN96fXnuoDsbx6PGb5,qWu,mlG6j0 yTMgYPvNr12dXED2l,0udSDRlatQ ,W yof3rCUKXKRf17VyuAo9o,Lpn2 z3sKjy1BLeIyqhWradhq3GFnsKnd7b9bi8i zTZoHO3MEk zh,jYxQmdcS2ZC7S5vmhPe zzjbA02pXWo2qhLncAcGm1        T       6:  D0UzicrlgTANnFM  TY5ctbfZNEe64RCsJ,IytoZU4XL9IukFivcf Ct  oMgyXoDoywPEmNxzp0rWvVR5o4hXn9AgBj ,0Poa6KF3Vu4QbpFiCtMuNhUn1i ,DlrGceYfoMvnm6B6lPrDnOhbet ,U4zaKxlt1lYb0,Mjm4aV ,iTr26w,sC0i2DJ4 ,wYP1yYs6WGxyvrkoSzSAnf Gl8R,UcO2wI 0EuT9,fvReh1r87pvA 0UXi9NZqPflmppfNYNfmP,XgeFao26H koq 0nCmMYy8VESjiqxteqZYyt9pgLBB3XSW7 0ua,Vr4amxhccJ1B4C39sBA9j3CfMV7VmVpQ 1IkD8JHQklc9Kx 1ZfX,cQ 5CdKabE6gMLO ZTlcFNMA8W1HRT0rF x 1ivJtjZNoru 4Ncdp3eMC6ftxPEdE4Cpr0zjlxr 1xp4aGrE89m5uTYMcb T 29IcuAzryq 2Pw4rtIZ4ZKmi 2eR9aL0tYvyWJd3Jtfvb0H1mU3z7 2viZRIOiDv1H6zealfM fYWLZkDbhA 3CRxqFP4cLStt6OLT9 A1flwUj2qDp  3ShSUgDeOzB4E6yQpPbZiB 3gZg9fg b8Dwxtl7hYaX7Vlvx 3ua7v4vleieNcHNf 48vuh0OX,sUUMRtHxoGsnxQ 4PD,orRZRK383OfEANUB 4c7LwlJKKV22Ktg 4sQ,7gDoFc8l 56T9sx13FAM7005 5P2IkfPTY0xapjXyooQ8zngmVspl  5gG1KWF85xyHZCbZAs1LIoPWbCB1V9Os0W fq 5xm8Ze 8h3Xrtw8JShi4ym 66Mt7oqO7qC3geSM zq,nW9Pmy02rqlgmHL6 6LUb1OR2Gsj,0WGpII0n9HEzXrD6pRLRws 6azlo,oH33 6pmHKdlnHC4n0zOBZAO 73NrGNQbPcaMkhsOKS 9raCGM5rxUOfAdT6 7KQKBawz8t qgzMj6KGxpEtt sD 7ZbEMP2z6SsjSsoXc 7qfI6rGdEiqy4752x 868T9RKZlNBJ3hFhdZEAkQcfMVT3Oeqyj23 8JaVyUSjlpqaUlGu7rm2Po4GecncdghJrET, 8YOnsNRScM7BiwGeelOHan8as 8pmc y7tcCyWxNSA9mHRaYFHSMTv4P6LMh96 99XGK1U3,WoIMmIoj2oT,OI4LJ4JqBzno 9SQu,8oxiXZh4W 9ZmbqBslYsZO4bKZ 9t5VlQc J8V0z X1Q0CxZnv ABrYS4JKrAEyBgpdFfUmBCi,iPfqNFb AVcNDWqFtnOD2KJn2At3QE AiwxWoEJBrFfLznDbuiJ3hZOPAgH XeqOy7 AoqZwVsG2BOaMw9,z6gXIIj BAStshlLLClJt PnQLUjgd97Bm BNnxAyv JuuljMntzCckwSbCYCKrtYgyMwXCg Bc, cny0g5vdYXJW vJ BreKLSTKR1JLTpgpu09Z8LFrKBv1 C4srU,cXDksrPpbaFfnEFU6 CIzt4kvqdJIokC4ikvqM3A6mz3XEp1qSlkT CTIKiDEEVL8AKfV5cZnXkFjcW2ta,s6Iaif CxWQfGyOyr7XidhhNADVn3OqUeXPkHTkKqhhrf2 D7nYoi9i2q682Gd7QnWvbXTJwgE DSHDtAv0vGa0yVr4TlSCWLPhR12rS2cnHr Dcv6xHpEFJYamu1Vokg8GMkqQvY,5kPYEvO29C5Z Dv35ovK onhvJoRmiio E5TU3pjdTjJKtIdSMsuuLtDne8,o3 EJRqWj4gq9iBkMcTnfoHA EZI3VOPsvBL8HadZcHcNbe,GyhGvCd0mpKZ8ku EoPVRn Nig9NDtRW571xp9 F2cdI3YclyFuLXI 22vJ1oJgnKnx2Ef5t FFgN5S0JRhRcyITYEqLYAd,CQZm49oIuDnQD FVrCg575k gU4alS0lb93W FrzrTMvMQbShbpmSEWwIj1GhzmBuT G0QHrKh2lpkZY8zHSOa8 GIFT3TWYomMpQLRCXZnib8tjo GVLrcr8Zaf GncPtMjpsQdjlVO8y Gx05KcY7dc4Lj axUJZ42g0eRS HGWWc47cRej3f HTtLukzeT9a Hky3FwZzF6Ac\tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 14791560   Max Error Offset : 76640 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          1           1 639WvSqa5 X gO7hli6BeJdTX9o revVWIEc              8:          1           1 DXanYZBRWfb1N1KUchRXZ2evfh4HxfCAgWn i3              9:          1           1 s7kB8qoGH5fskPnIk1 Hzdz             10:          1           1 lNa8NmcB8,lwMAFTZvGA9JSr2TWM5AW             11:          1           1 vUp0vdT5hz,yEuth4vLr12oJpN2RDxcqj8Ijr             18:          1           1 U0b5Er6kfd1MuCLLqn0gOgL5gvr75nYl1y0F0D             19:          1           1 0oHAt7ufDl2BDRVGc             20:          3           1 0B5QYg2Xf0ZPLuptOyDtbZPb2UWL3LKhYCHByU             22:          1           1 cNFqANRwpZUYf3uNV2mCUIpoeXIw9FKVZJCSqM             23:          1           1 1cv35HxaOm,hhhmNx8hhBMtmFL5aAMovEXk0             26:          1           1 GdxjxfocScfyJjNLMtxqoCNi             28:          1           1 C TCAF7lUcLY             29:          1           1 38861NaS,KmHILGBolK             30:          1           1 04f0FTJyOziV2BPAQm6ONEdnasrl2mGX             31:          2           1 niMWMSQ9c7Z9tH8l7zs             33:          1           1 xLV4yJHpyUNmJaUajujKz1R             34:          1           1 flurQu0qV1C3             35:          2           1 k00LggzghIloohfQerptkUhZ,QKvdXy,             36:          1           1 FqB4Gntv458alxuUNiW             37:          1           1 ik9fXgWHnIy0WmGoR7yggSmW             38:          4           1 LbfSHH,jPtHQTJk3tpgAZ             39:          1           1 8djHNihpCfqC5tNLYHIP7MbWdfW9fM ZvS2             40:          1           1 QOfojt4Lv4Bxv8JwtJeT J4bzOPu6MxuV8tB              41:          1           1 mPBKXKRWVUTww             42:          2           1 Lrwamr4mbxefygF             43:          1           1 TUsNw6xx4xdKTYFNjOZxAJckOys             44:          2           1 lp4GAvwkfhZctiew4QNgnbIekWCZUxWQyH             45:          1           1 jITqh1UYxGDb74APVVUqBx             46:          1           1 cuwy3iAlYqGaJJx7 OtPjfdg,35H4UD8xjZBUtyS             47:          2           1 YvKUI3CKDmZKQJAUc7AK3G96WNm7mcdSGA3HSExt             48:          5           1 u5hmJMxLwpVWMCE9bDFdWY1sQ,SE8kqC             49:          7           1 Rj2jdBuA32Ma             52:          1           1 uPubJKd a9RYeHQtngeOuBZG YkA4p1cuB2             53:          1           1 5fztYR cgrxlumVy1 TzKabXqCLJoLKMuvJK9mbd             54:          1           1 nFezu6RivQO8UdIgvNnrkkEb4b             55:          3           1 97CRBVo3pfk             56:          1           1 EIqIDdV62K89u ioOFCCkJmpya6puLX8tgYXZlkH             57:          1           1 PoNkgAqeX2iIzIleW6XJfOBZFJUl,u             62:          1           1 gu8SrCMZhGhe             63:          2           1 VKmz6vNXFJm7I1h32yJmS94GloLQfwv \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 1.4977135724950222E7    Upper Bound, 95% conf   : 1.545433269484502E7    Lower Bound, 95% conf   : 1.451461798261745E7    Theta (double)          : 2.7348353351545885E-4    Theta (long)            : 2522440375566719    Theta (long) hex        : 0008f6256a8d817f    EstMode?                : true    Empty?                  : false    Array Size Entries      : 4096    Retained Entries        : 4096    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\tC_COMMENT\t14850128\t0\t0.0\t Tiresias about the carefully even packages thrash quickly even instructi\tzzle? furiously regular pinto \t ### ItemsSketch DATA DETAIL:     BaseBuffer   :  thin deposits sleep blithely according to the final reque quests after the final accounts sleep silently above the slyly bold requests. accounts are carefully accordi fully even requests. never pending pinto beans haggle. blithely special packages sleep unusual pinto bean  packages! carefully regular accounts sleep slyly blithely special pinto  dependencies about the accounts use blithely above the blithely even es. slyly bold ideas nag slyly someti uriously ironic deposits sleep. furiously ironic theodolites nag carefully. unusual requests alongside of the ca ly final grouches haggle quickly among the express pinto beans. ideas haggle carefully. bold excuses kindle wake blithely carefully fluffy packages. silent deposits haggle slyly carefu op the regular instructions boost furiously up the final accounts. blithely bold accounts nag ac  blithely boldly unusual forges. slowly ironic pinto beans nag above the b sly. carefully even deposits wa riously slyly regular multiplier . express packages do wake along the instructions. fi  even sheaves. slyly ironic accounts among the slyly ironic requests bo enly daring pinto beans nag carefully alongside of the express pac nding instructions nag carefully regular packages. carefully unusual accounts will engage furi e carefully furiously pending pinto beans. carefully fi o the brave foxes haggle carefully  fluffily across the blithely regular packages. special accounts haggle. bold dependencie elieve around the slyly regular packages. blithely final requests affix blithely; deposits  ironic deposits wake quickly carefully cing ideas. slyly final requests nag furiously final, final packages. quickly ironic requests l pinto beans are blithely above the slyly ironi e idly unusual deposits. fluffily even requests eat slyly above the bold, ironi blithely across the ironic, final pinto bea sublate furiously after the never express accounts? quickly even deposits use above the entic ainst the ironic, regular accounts are carefully blithely pending braids. furious ly even theodolites. regular deposits are carefully odolites wake slyly of the express, final foxes. slyly express accou  carefully close pinto beans wake even, ironic exc yly. furiously pending excuses affix deposits. permanently final ideas nag carefully afte ic theodolites along the carefully express instructions detec r the slyly final packages. blithely special requests sleep furiously. regular  xes above the furiously final decoys wake furiously express accounts. slyly express foxes detect furiously. fina endencies about the stealthily ironic accounts are carefully after the frays-- e slyly ironic dolphins wake sp  the blithe, silent platelets are silent, ironic deposits. quickly silent requests doubt fluffily  ajole quickly ironic requests. deposits according to the quickly even asymptotes haggle upon the mul the furiously bold deposits. slyly special p  deposits. slyly ironic warthogs  dependencies wake blithely furiously even accounts. slyly ironic deposits against the slyly pending accou ns. blithely slow deposits ca ckly bold ideas play above the packages-- special, regular packages about the fin ly alongside of the carefully regular packages. idly slow requests nag within  eposits haggle blithely carefully bold foxes. special, unusual i pecial dinos? even depths cajole-- special requests wake carefull refully special asymptotes sleep furiously ironic, special ideas. pending pinto beans n . carefully express pinto beans unwind furiously sentiments. slyly ironic pinto beans lose. sometimes  special requests! blithely special pinto beans across the regular requests ar ccounts sleep quickly against the carefully ironic excuses. final packages detect p ect always. theodolites wake. final, ironic accounts are carefully above the deposits. blithe kages: express asymptotes wake according to the carefully final accounts. . furiously ironic accounts hag final requests among the requests grow furiously slyly final theodolites. regular ideas  ngly. bold requests doubt slyly sentiments. slyly ironic pinto beans use blithely ev thely ironic accounts haggle slyly according to the carefull deposits haggle alongside of the regular, regular theodolites. express deposits sleep  thely even orbits are fluffily final ideas. fina the carefully special ideas. regular theodolites atop the ironic dependencies snooze quickly according to re blithely about the blithely ironic theodolit  furiously regular accounts mold furiously after the special foxes. u uffily quick grouches wake. silently ounts. final ideas boost. requests promise quickly packages. daring ndencies haggle slyly along the blithely express instructions? caref even gifts: fluffily ironic instructions breach slyly among the final, final excuses; quickly b ts. final dependencies print fluffily. quickly final requests against the   deposits. excuses nag carefully. slyly regular accounts use furiously. packages was s thely silent ideas. quickly final theodolites sleep  y unusual accounts use slyly packages. express, ironic  fluffily regular accounts affix slyly requests according to the blithely unusual deposits. regular requests  olites use. platelets sleep around the regular packages. fluffily regula ites across the carefully unusual platelets  ss accounts among the regular, unusual deposits was carefully after the bli es are fluffily furiously regular pinto beans! carefully regular  s. regular pinto beans use. fluffily unusual excuses sleep finally! regular, final deposits e to boost furiously unusual excuses. carefully regular foxes haggle stealthily along the packages. qu  pinto beans integrate. slyly careful theodolites wake carefully above the ironic, ironic packages. silen  regular requests. special multipliers are. blithely ve to sleep about the furiously sts. slyly unusual foxes grow alongside of the quickly iro he deposits. carefully ironic Tiresias nag a slyly bold platelets are fluffily carefully ironic platele en accounts sleep quickly regular accounts. furiously special requests sleep blithely. furiously daring cou regular requests need to boost fluffily ac ully idle ideas against the carefully even excuses unwind furiously after the requests! carefully bold deposits b d blithely after the unusual packages. always iro ole finally along the orbits. fluffily pending pinto beans b about the fluffily pending deposits. blithely regular deposits onic pinto beans. slyly bold pinto beans lose slyly across the slyly quic ns are across the ironic patterns. special, final platelets wake orbi blithely along the requests. quickly pending packages sleep blithely regular theodolites. caref ong the slyly unusual instructions wake slyly about the blithely even requests. slyly dogged pa l packages sleep. furiously even deposits unwind among the final, blithe pinto beans. re  above the quickly daring ideas. blithely final instructi ly pending packages cajole slyly slyly wake. silent, regular theodolites sleep slyly quickly regular accounts. bold accounts affix quickly deposits. fluffily bold gifts against the regular instructions haggle carefully along  across the furiously unusual accounts wake furiously deposits. bold, express a ecial excuses nag blithely between courts. even pains sleep even warhorses. bold, ironic requests around the patt ly. special, ironic pinto beans about the ruthlessly expr ounts. bold platelets nag slyly regular theodolites. ironic pinto beans across th around the regular requests. pending platelets as promise ironic accounts. furiously ironic foxes cajole bl lar theodolites use furiously alongsi unts alongside of the carefully special accounts integrate according to the carefully express requests:  ronic pinto beans integrate. quickly final pinto beans among the slyly regular packages haggle sl  are slyly. ironic packages use slyly. carefull , unusual packages. final dependencies use carefully along the pending, bold packages. final pinto bean sual requests according to the carefu excuses affix blithely after the deposits! carefully stealthy deposits  special accounts. fluffily final packages affix furiously quickly express excuses. carefully final p odolites sleep slyly above the regular instructions. furiously ironic packages grow carefully slyly regular i fully instructions. furiously regular theodolites grow slyly. furiously regular theodolites hagg riously ironic requests. furiou ithely special deposits nag above the quickly bold ide xes. slyly even requests above the sly deposits haggle enticingly ironic, silent packages. blithely final forges ven excuses nag furiously. carefully final pinto beans wake carefully. pending d kages. excuses haggle. fluffily final pinto beans toward the furiously bol l accounts. even theodolites boost along the ruthlessly ironic platelets. f affix furiously around the even, regular foxes. slyly final accounts above the care ruthlessly regular attainments nag someti ar deposits hang furiously sile ts shall have to cajole above the express deposits. pending de regular deposits wake furiously unusual decoys. regular deposits about the even id  even depths haggle alongside of the fluffily final deposits. blithely express  al dependencies sleep slyly c dependencies. blithely pending asymptotes sleep ca ironic requests haggle never requests. slowly regular somas cajol ld requests sleep according to the unusua  upon the packages. quick foxes haggle. blithely  final accounts boost furiously within the blithely   regular theodolites boost quickly. furiously bold deposits across the never fi equests sleep against the dolphins. c accounts against the slyly pending foxes dazzle among the bold instructions. furiously unusual theodolite egular requests. furiously final deposits thrash carefully: regular accou cajole slyly. fluffily unusual packages i ideas serve regular deposits. carefully ironic platelets wake carefully accord deposits. final asymptotes are furiously after the slyly e onic ideas sleep carefully. carefully p  unusual, ironic foxes at the blithely ironic requests grow closely about the furiously reg quests doze carefully along the deposits. fluffily unusual accounts affix care ing to the packages. carefully ironic requests use. even accounts are quickly alongside of the e ages dazzle carefully carefully regular accou heodolites nag at the slyly ironic foxes. carefully final asymptotes after the platelet  affix idly against the bold deposits. final, bold escapades are. fluffily express req fully. bold requests are carefull  slyly final courts. final, special instructions wake blithely. final account ts. blithely regular forges wake slyly. slyly pending deposits wake quickly above the  foxes are final, regular platelets. pending packages haggle carefully final dependencies. f sts cajole alongside of the blithely regular accounts. blithel usual pinto beans. final, final packages haggle furiously-- tithes about the  furiously final courts nag. furiously fina ven excuses? fluffily bold pinto beans affix  nt platelets. even packages are alongside of the qu g accounts kindle slyly. platelets haggle. blithely spec ully regular pinto beans. carefully final instructions after the carefully sp final theodolites nag across the furiously pending accounts. quickly express pains doze slyly against t  requests. ironically ironic accounts are across  y sly instructions. even asymptotes eat. pinto beans after the unusual, ironic accounts sleep final s wake blithely. pending accounts affix. slyly regular accounts about the quietly regular foxes nag re usual, express courts around the carefully even foxes are permanentl refully above the final epitaphs. final instructions was carefully against the fluffily ru nal accounts after the regular pinto beans cajole above the blithely special the gle slyly about the slyly final deposits. slyly regular accounts engage after the  ep. slyly final asymptotes wake furiously above the furiously furious accounts. furiously express packages s old platelets haggle slyly pending foxes. fi ions. quickly regular realms doubt carefully according to the final foxes. furiously regu nts. bold, ironic deposits shall cajole carefully alongside of the carefully special packages. furiously special  quests poach blithely stealthily ir ays integrate slyly ironic packages! bold, express ideas nts maintain closely above the foxes. final accounts about the slyly unusual courts believe slyly  fully. blithely ironic asymptotes  en requests solve slyly final platelets. blithely unusua equests should have to integrate about the special o . final, special platelets along the final foxes engage furiously regular dolphins. eve tions. unusual, even accounts detect according to the platelets. packages about the furiously  ackages. final deposits sleep quickly unusual dinos. furiously pending accou ns wake carefully. regular, silent pinto beans mold fluffily along the b ounts lose furiously. pending, final ideas alongside r pinto beans use about the even, even hockey players. furious, permanent forges dete ven ideas. furiously final sheaves haggle slyly unusual, special deposits. ironic  ole fluffily after the slyly ironic instructions. slyly blit e slyly regular, regular requests. final requests regular pinto beans are blithely according  ic ideas wake about the bold, even requests. furiously ironic sentiments about  quickly. final platelets integrate about the carefully reg he blithely express accounts. carefully even pa nic, silent deposits use against the carefully express deposits. pinto beans sleep   asymptotes. carefully even platelets cajole. quickly final deposits wake furiously furiou ajole slyly according to the un foxes must cajole fluffily against the regular deposits. ironic accounts cajole. slyly final theodolites wake car riously express grouches according to the carefully f o beans according to the final deposits snooze blithely fluffily unusual accounts. blithely unusual p  deposits haggle furiously. even deposits nag carefully regular deposits. regular acc lent pinto beans lose. instructions are carefully. final Tiresias aff ing deposits nod stealthily. express, silent packages after the carefully ironic id  carefully ironic pinto beans. pending, regular accounts sleep fluffily across the blithely silent de luffily even theodolites wake doggedly a  mold accounts. deposits snooze instead of the sly ironic packages against the furiously regular platelets doubt furiously after t s alongside of the regular, furious Tiresias haggle furiously regular requests. accounts bo furiously special instructions grow. fu he blithely final dolphins nag blithely blithely re  wake slyly fluffily idle accounts. quickly express packages wake carefully regular pinto beans: final pack cajole after the furiously even instructions! furiously bold excuses caj ously along the ideas. unusual, final ideas until the packages haggle slyly ab yly even somas nag! quickly regular theodolites mu ial notornis. regular packages poach furiously carefully spe arefully express accounts. silently final forges against the furi ly unusual requests. blithely ironic requests wake  against the pinto beans x-ray permanent accounts. ironic packages from the asymptotes cajol c sauternes sleep carefully blithely pending ideas. bl beans above the pinto beans run slyly alongside of the slyly silent pinto beans.  luffily regular patterns haggle after the quickly final p  permanent ideas eat slyly according to the pending courts. quickly bold instructions inte sly even requests use; idly unusual ideas hang carefully about the s are quickly furiously special deposits. silent deposit ing requests use pending dolphins. slyly even frays run blithely slyly  n deposits affix alongside of the speci al accounts. regular dolphins was carefully furiously ironic a  bold foxes sleep blithely accounts. daring, even excuses wake qu kages. blithely silent packages around ss requests integrate bravely pending ideas. regular courts cajole always. furious pinto beans x-ray ironic deposit ways according to the carefully final theodolites. silent depths against the furiously final pinto be ns; attainments cajole. quickly pending requests cajole blithely final, pending courts. regular   cajole. ironic deposits hang bold ideas. furiously enticing platele ly across the unusual, final foxes. ironically regular pinto beans sleep quickly against the quickly daring pack  lose quickly pending excuses. quickly final pinto beans into the depo e bold requests. even, unusual requests boost? pending pinto beans haggle blithely blithely dogged theodolites. furi  even accounts: ideas among the final, even instructions wake bl ructions. slyly unusual deposits above the ironically regular requests use after the slyly expres ts cajole around the fluffily special accounts. slyly ironic epitaphs haggle after the furiously thin depo ully ruthless deposits. quickly pending packages haggle against the furiously furious instructions. bl platelets are furiously across the unusual, even deposits. ir uffily ironic accounts. quickly d foxes. furiously close pint  unusual deposits are carefully above the  slyly. slyly regular instructions wake  deposits across the special theodolites are fluffily special accounts. foxes boost slyly f unts. fluffily thin asymptotes wake thinly regular instructions. slyly express theodolites promise sly  along the fluffily final asymptotes. furiously pending theodolites sle posits use furiously. bold asymptotes engage fu ans sleep quickly to the fluff ccounts. slyly unusual requests haggle quickly. deposits cajole a ly bold instructions. slyly express ideas can boost final, unusual acc en deposits affix according to the express requests. pending packages use carefully. bl  deposits doze blithely. furiously special packages past the slyly final requests cajole about the  y silent packages! regular pinto beans wake quickly theodolites! final requests use. slyly regular requests are q  express packages wake accounts. carefully regular pinto beans haggle blithely quickly regular ideas. slyly unusua ng asymptotes. carefully regular accounts sleep fluffily along the quickly careful accounts. carefully i about the ruthlessly regular deposits wake sl xes wake according to the furiously special dependencies. silent frays are fluffily un packages wake. quiet theodolites above the furiously ironic the express, regular ideas. fluffily ironic platelets  atelets mold. foxes are blithely. slyly bold asymptotes for  blithely bold packages besides the bold accounts haggle after the e  accounts after the slyly ironic deposits promise between the b gular ideas. quickly regular p ptotes. slyly final accounts haggle carefully after the carefully final ideas. ca nder. final deposits are carefully platelets. regular foxes haggle blithely above the  unts about the carefully final ideas wake blithel se furiously requests. furiously qu quests cajole. furiously regular requests lose blithely  ully. instructions shall are fluff , final foxes cajole after the blithely bold ideas. bold, special pinto nic theodolites nag blithely alongside of t fix packages. furiously pending accounts haggle. sly e about the quickly regular packages. slyly even theodolites cajole. slyly express instructions dazzle slyly deposit  the blithely unusual courts. pending requests sublate blithely unusual asymptotes. special ideas are carefull ole carefully carefully pending requests. final, even packages wake carefully fluffily q ades. fluffily ironic waters wake against the furiously even pinto beans. furiously ironic arefully ironic excuses poach for the regular ideas. furiously regular requests fully express pinto beans. quickly pending pinto beans wake blithely. blithely i packages are blithely across the ironic packages. pinto bea s solve furiously beside the unusual, even dugouts. slyly regular foxes cajole quickly d the final, even packages impress slyly regular foxes. even, thin requests sleep always. ironic,  the slyly ironic theodolites. ptotes. final gifts kindle about the express waters. slyly silent platelets ab pinto beans. regular, final requests play carefully carefully dogged somas. accounts cajole ages. requests was fluffily along the close courts. carefully special deposits sleep slyly bold dependenci aggle. blithely regular accounts engage blithely. brave platelets promise. final tly after the bold accounts. accounts use furiously bold requests. quietly regular requests according to the q yly pending foxes haggle blithely regular packages. bold  to the deposits. foxes along the ironic theodolites haggle along the ironic deposits. spe ndencies sleep quickly furiously final requests. r accounts boost blithely fluffily final ideas. bold, silent instru the quickly pending pinto beans. slyly special deposits are: braids use carefully regular requests.   affix ironically carefully final requests.   quietly slow deposits wake furiously furiously ironic acco packages. furiously bold excuses might boost. slyly final accounts haggle evenly. furi gular theodolites. slyly silent deposits use. even, eve avely slyly even packages. slyly final deposits boost blit yly ironic packages. even accounts haggle. excuses wake furiously blithely bold pinto beans. even accounts s press foxes haggle slyly instead of the daringly bold instructions. ironic accounts cajole bli re furiously. bold packages sleep slyly. furiously ironic platelets  thely. slyly final ideas cajole furiously. fluffily regular foxes  ously ironic requests. carefully pending accounts after the slyly ironic theodolites are slyly -- quickly regular deposits haggle slyly final even asymptotes wake quickly slyly express requests? regular asymp eposits. quickly even packages boost   fluffily pending notornis nag! fluffily busy packages haggle above the special, ironic asymptotes! furiously regu ruthlessly even accounts according to the ironic excuses are against the heodolites lose blithely after the slyly even instructions. furiously regular  gular multipliers. carefully final deposits above the slyly express dependencies poa  detect quickly? quickly express packages across t es. theodolites at the carefully final accounts use carefully slyly special packages ven courts nag alongside of the blithely special deposits. furiou sts are furiously. special courts haggle furiously quickly unusual pinto beans. theodolites sleep request as cajole. bold excuses doze slyly-- fluffily even accounts wake along the furiously enticing pinto bean e permanent, special foxes wake blithely along th ounts are carefully regular requests. quickly unusual instructions across the carefully ironic pa olites according to the slyly regular accounts thrash blithely final theodolites. regula uickly final accounts affix. do n instructions engage blithely final excuses. furiously regular deposits nag blithely. furi multipliers cajole carefully. blithely special notornis  foxes detect blithely unusual realms. slyly exp alongside of the regular requests. pend  pending ideas-- regular pearls serve about the blithely unusual accounts. blith y regular excuses are. final deposits should are ironic, even theodolites. final accounts after th y silent accounts wake bold, unusual ideas. pending packages at the carefully regula heodolites. bravely unusual deposits promise carefully. slyly even dolphins according to the slyly even packages  pecial packages cajole. furiously final asymptotes along the sile ithely regular pinto beans nag blithely fluffily special requests. fluffily daring pinto beans dazzle. nal pinto beans about the furiously bold instructions boost about the carefully even pinto beans. blithel ng, final accounts-- bold, regular  xes against the regular packages sleep blithely bold requests-- slyly regular requests use furiously? silently r  slyly ruthless requests use. even accounts about the carefully regular accounts wake slyly carefully f e fluffily regular asymptotes hinder against the special de  ironic pinto beans. doggedly ironic requests according to the bold ideas sleep carefully regular  unusual platelets. blithely quick foxes na gular packages above the excuses slee posits use. ideas boost caref sits cajole quickly ironic accounts. slyly even orbits cajole blithel  regular accounts around the special foxes kindle blithely across the even dependencies? slyly silent requests  totes! unusual, pending deposits boost slyly against the deposits. slyly regular platelets kindle blithely. or along the regular dependencies. packages wake blithely regular pearls? bli s sleep ironically; furiously special packages believe blithely. slow warthogs haggle carefully. fluffily express  oxes boost carefully. carefully pending frets among the theodoli  the dependencies use slyly special accounts. furiously unusual accoun  pending, even decoys nag. dependencies integrate furiously enticing instru sts alongside of the platelets affix carefull sts doze. pending, regular accounts boost carefully: ironic requests detect slyly slyly regular accou about the final, regular theodolites! blithely final packages are carefully furiously bold accounts. final foxes ar y regular packages are blithely even, ironic pinto beans. carefully ironic packages integrate slyly. even deposits  ly silent requests. slyly regular ideas cajole blithely quickly iro  above the fluffily permanent ideas. furiously regular instruc st the furiously pending accounts. slyly pending platelets snooze  pinto beans haggle. slyly silent accounts haggle furiously final as thinly quick packages. foxes wake. furiously silent pinto beans use. caref ily express accounts cajole along the slyly bold  sleep furiously. regular excuses boost alongside of the deposits. quickly ruthless accounts cajole ts detect furiously along the fluffily express requests! carefully bold dept final asymptotes was furiously. stealthily final ideas haggle bli final packages. slyly even platelets cajole. furiously even theodolites wake accounts. carefully final luffily. unusual accounts are pinto beans. express foxes about the carefully even  ins. express packages beside the pending deposits hang carefully special pinto beans. carefully even deposit s nag. regular accounts wake. furiously regular deposits about ost slyly furiously silent requests. r  the regular deposits! carefu fluffily regular packages during the regular requests haggle against the blithely unu ic deposits are furiously. even ideas use blithely. ca ndencies wake along the slyly regular deposits.  according to the packages affix quickly according to the carefully pending asymptotes. slyly ironi s. carefully final accounts lose stealthily? y regular accounts. furiously pending deposits th oxes. carefully express pinto beans will detect final packages. sauternes ca s. pinto beans detect fluffily after the ironic pi y players haggle accounts: regular, unusual excuses haggl ven, bold instructions cajole slyly regular theodolites. stealthily   even foxes are carefully pending deposits. even asympt ial instructions are slyly final requests. furiously ironic accounts after the final asy anent foxes-- bold packages sleep ironic accounts. requests use after the furiously ironic packages. l foxes sleep furiously. quickly unusual instructions snooze carefully even the ounts about the final instructions use fluffily somas. ironic, regular ideas wake bli unts. quickly unusual sheaves against the requests cajole carefully pending, unusual  atelets. carefully final requests are-- closely final packages are slyly. fur above the quickly bold deposits. furiously even requests snooze enticingly against the slyly unusual requests. b nts. quickly ironic accounts among the evenly ironic requests sleep according to en ideas haggle carefully special instructions. s xes. even, unusual requests wake. unusual asymptotes cajole furiously. even deposits slee ke slyly. foxes past the quic ly among the silent excuses. slyly  sts. bold excuses use furiously above the slyly ironic ideas. blithely unusual deposit  ideas haggle about the ironic, bold accounts. furiously express packages are deposits.  boost carefully carefully special packages. bold requests h  accounts. silent instructions sleep furiously across the ironic accounts. unusual, regular deposits sleep furio arefully bold dinos. blithely even platelets nod carefully slyly ironic deposits. regular   regular, ironic asymptotes use. bold, regular foxes wake quick ss instructions haggle carefully regular courts. carefully enticing pack  fluffily final ideas wake blithely accounts. express, ironic pac  requests? always ironic dinos doubt carefully carefully even accounts; sl blithely even foxes are above the furiously ironic courts. blithely bold pinto beans sleep  r after the blithely regular ideas. bold packages sleep accounts: es could use slyly according to the express, bold hocke unts. furiously unusual dependencies wake around the carefully final frets. ironic, even lites. express requests cajole quickly. furiously express pinto beans cajole carefully around the special ages cajole upon the slyly bold dolphins. final depo ove the doggedly silent ideas use above the bus lly carefully ironic requests. fluffily un ntegrate furiously through the bold excuses. blithely final instructions along the carefully special pinto beans . blithely final foxes wake special requests! fluffily regular pinto beans alongside of the pe ng accounts integrate alongside of the furiously ironic decoys? slyly regular d g around the regular instructions. final excuses boost carefully among the regular frays. blithely pending pinto be l platelets haggle carefully after the furiously bold gifts. carefully even fully regular dolphins wake blithely against the blithely un express packages. carefully dogged i s above the closely ironic accounts are slyly across th ironic accounts. slyly bold requests sleep ironically carefully unusual packages. packages use alongside of the s osits. furiously even packages nod according to the slyl ages sleep ironically. ironic, unusual packages unwind slyly regular frets. blithely express platelets eat. careful unts affix above the blithely regular excuses. final theodolites a uriously blithely regular packages. unusual pinto beans after the even, bold requests enga quests mold slyly for the final deposits. slyly ironic requests   always quickly final requests. furiously silent pains eat slyly. final, final deposits grow furio latelets are slyly quickly even packages. blithel lithely alongside of the packages. slyly ironic packages wake ironic requests. packages wake furiousl es. special theodolites hinder  sts are slyly blithely regular excuses. g the carefully final ideas eat carefully after the quickly final requests. quickly silent accounts wake quickly iro gle blithely against the carefully bold i deposits print fluffily regular, even requests-- final foxes are fluffily. slyly express  cording to the furiously final deposits. regular requests detect against  t the regular warthogs. quick s might grow according to the silent gifts. fluffily regular dinos eat accor al requests according to the ironic requests sleep quick ly even patterns according to the ideas haggle eve  even dependencies haggle caref y even pinto beans promise furiously regular, ironic packa  are boldly express packages. sl the always ironic ideas boost blithely unusual dolphins. requests use alongside of the regular, ev kly ironic pinto beans wake. foxes are slyly decoys. carefully regular ideas haggle si ounts are up the foxes. regular grouches cajole slyly bli le blithely quickly final instructions. qui quests. quickly regular ideas unwind carefu at the regular Tiresias. furiously ironic deposits among the ironic, regular co  are. quickly even deposits use. deposits sleep carefully quickly re y regular ideas. blithely bold accounts dete ongside of the furiously regular ideas. regular orbits a odolites. blithely final instructions kindle blithely. carefully unusual requests doubt carefully regular platelet  after the slyly even accounts haggle furiously among the furiously unusual requests. slyly ironic pint ly bold courts haggle blithely. thinly express braids haggle among the care ons. quickly express courts according to the fluffily regular foxes are slyly carefully special packages. unu jole slyly accounts. fluffily final deposits about the quickly silent deposits promise carefully above the c cial requests. express, even packages cajole carefully along the exp posits. ironic, final foxes haggl    Valid | Level        F       0: null null null null null null null null n\tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 77720 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          1           1 ing requests use pending dolphins. slyly even frays run blithely slyly               2:          1           1 unts alongside of the carefully special accounts integrate according to the carefully express requests:               3:          2           1 ithely regular pinto beans nag blithely fluffily special requests. fluffily daring pinto beans dazzle.              6:          1           1 ons. quickly express courts according to the fluffily regular foxes are slyly carefully special packages. unu             10:          1           1 n deposits affix alongside of the speci             11:          2           1 ongside of the furiously regular ideas. regular orbits a             12:          3           1 odolites. blithely final instructions kindle blithely. carefully unusual requests doubt carefully regular platelet             14:          1           1  slyly ruthless requests use. even accounts about the carefully regular accounts wake slyly carefully f             17:          1           1 posits. ironic, final foxes haggl             18:          2           1 ly bold courts haggle blithely. thinly express braids haggle among the care             19:          1           1 posits use. ideas boost caref             22:          1           1 xes against the regular packages sleep blithely bold requests-- slyly regular requests use furiously? silently r             23:          2           1  ironic pinto beans. doggedly ironic requests according to the bold ideas sleep carefully regular             25:          1           1 ronic pinto beans integrate. quickly final pinto beans among the slyly regular packages haggle sl             26:          1           1 against the pinto beans x-ray permanent accounts. ironic packages from the asymptotes cajol             27:          1           1 ly. special, ironic pinto beans about the ruthlessly expr             28:          3           1 nal pinto beans about the furiously bold instructions boost about the carefully even pinto beans. blithel             30:          1           1 al accounts. regular dolphins was carefully furiously ironic a             32:          1           1 around the regular requests. pending platelets             33:          1           1 ounts. bold platelets nag slyly regular theodolites. ironic pinto beans across th             34:          1           1 s are quickly furiously special deposits. silent deposit             35:          1           1 c sauternes sleep carefully blithely pending ideas. bl             38:          1           1  after the slyly even accounts haggle furiously among the furiously unusual requests. slyly ironic pint             39:          1           1  are slyly. ironic packages use slyly. carefull             40:          1           1 gular packages above the excuses slee             41:          1           1 lar theodolites use furiously alongsi             42:          2           1  unusual platelets. blithely quick foxes na             43:          3           1  are. quickly even deposits use. deposits sleep carefully quickly re             45:          1           1 sly even requests use; idly unusual ideas hang carefully about the             46:          1           1 as promise ironic accounts. furiously ironic foxes cajole bl             51:          1           1 , unusual packages. final dependencies use carefully along the pending, bold packages. final pinto bean             54:          1           1 beans above the pinto beans run slyly alongside of the slyly silent pinto beans.              55:          1           1 y regular ideas. blithely bold accounts dete             56:          1           1 luffily regular patterns haggle after the quickly final p             57:          1           1  permanent ideas eat slyly according to the pending courts. quickly bold instructions inte             58:          1           1 e fluffily regular asymptotes hinder against the special de             59:          1           1 ng, final accounts-- bold, regular              60:          4           1 at the regular Tiresias. furiously ironic deposits among the ironic, regular co             61:          2           1 cial requests. express, even packages cajole carefully along the exp             62:          4           1 jole slyly accounts. fluffily final deposits about the quickly silent deposits promise carefully above the c \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 1.4850128837636612E7    Upper Bound, 95% conf   : 1.5672324517760387E7    Lower Bound, 95% conf   : 1.40707950724144E7    Theta (double)          : 9.393857893437733E-5    Theta (long)            : 866430462125211    Theta (long) hex        : 000314038feae49b    EstMode?                : true    Empty?                  : false    Array Size Entries      : 1395    Retained Entries        : 1395    Seed Hash               : -27700 ### END SKETCH SUMMARY "
          },
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"result-alert alert-warning\" role\u003d\"alert\"\u003e\u003cbutton type\u003d\"button\" class\u003d\"close\" data-dismiss\u003d\"alert\" aria-label\u003d\"Close\"\u003e\u003cspan aria-hidden\u003d\"true\"\u003e\u0026times;\u003c/span\u003e\u003c/button\u003e\u003cstrong\u003eOutput is truncated\u003c/strong\u003e to 102400 bytes. Learn more about \u003cstrong\u003eZEPPELIN_INTERPRETER_OUTPUT_LIMIT\u003c/strong\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559758163127_-201055388",
      "id": "20190605-180923_1526605090",
      "dateCreated": "2019-06-05 18:09:23.127",
      "dateStarted": "2019-06-05 19:30:08.461",
      "dateFinished": "2019-06-05 19:30:16.071",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nLet\u0027s take a closer look at the `SYS.SYSTABLESTATISTICS` table by selecting key metrics to understand the characteristics of the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to select key metrics for the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:24.097",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at the \u003ccode\u003eSYS.SYSTABLESTATISTICS\u003c/code\u003e table by selecting key metrics to understand the characteristics of the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to select key metrics for the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559763161574_1107320760",
      "id": "20190605-193241_1371770104",
      "dateCreated": "2019-06-05 19:32:41.574",
      "dateStarted": "2019-06-06 17:13:24.098",
      "dateFinished": "2019-06-06 17:13:24.104",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nselect total_row_count, total_size, stats_type, sample_fraction from sys.systablestatistics where schemaname\u003d\u0027DEV3\u0027 and tablename\u003d\u0027CUSTOMER_BULK_IMPORT_EXAMPLE1\u0027;",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:36:39.966",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "TOTAL_ROW_COUNT": "string",
                      "TOTAL_SIZE": "string",
                      "STATS_TYPE": "string",
                      "SAMPLE_FRACTION": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TOTAL_ROW_COUNT\tTOTAL_SIZE\tSTATS_TYPE\tSAMPLE_FRACTION\n15000000\t2294789186\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559763342085_1959754644",
      "id": "20190605-193542_1348415475",
      "dateCreated": "2019-06-05 19:35:42.085",
      "dateStarted": "2019-06-05 19:36:38.874",
      "dateFinished": "2019-06-05 19:36:38.970",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nWe see that the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table has 15000000 rows, has a total size of 2294789186 bytes, has a `statsType` value of 2, and a `sampleFraction` value of 0.\n\nFor reference refer to these tables for an explanation of the `statsType` and `sampleFraction`\n\n#### statsType\n\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eStatistic Type Value\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e0\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e1\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e2\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e3\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\n#### sampleFraction\n\nThe sampling percentage, expressed as 0.0 to 1.0,\n\n* If statsType\u003d0 (full statistics), this value is not used, and is shown as 0.\n* If statsType\u003d1, this value is the percentage or rows to be sampled. A value of 0 means no rows, and a value of 1 means all rows (full statistics).\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:09.654",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eWe see that the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table has 15000000 rows, has a total size of 2294789186 bytes, has a \u003ccode\u003estatsType\u003c/code\u003e value of 2, and a \u003ccode\u003esampleFraction\u003c/code\u003e value of 0.\u003c/p\u003e\n\u003cp\u003eFor reference refer to these tables for an explanation of the \u003ccode\u003estatsType\u003c/code\u003e and \u003ccode\u003esampleFraction\u003c/code\u003e\u003c/p\u003e\n\u003ch4\u003estatsType\u003c/h4\u003e\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eStatistic Type Value\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e0\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e1\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e2\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e3\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003esampleFraction\u003c/h4\u003e\n\u003cp\u003eThe sampling percentage, expressed as 0.0 to 1.0,\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIf statsType\u003d0 (full statistics), this value is not used, and is shown as 0.\u003c/li\u003e\n  \u003cli\u003eIf statsType\u003d1, this value is the percentage or rows to be sampled. A value of 0 means no rows, and a value of 1 means all rows (full statistics).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559763489992_1892897487",
      "id": "20190605-193809_16325725",
      "dateCreated": "2019-06-05 19:38:09.992",
      "dateStarted": "2019-06-06 17:13:09.656",
      "dateFinished": "2019-06-06 17:13:09.662",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " %md\n\n## 3. Query Performance Problems\n\nWhen query performance is not up to par, there can be several reasons why a query doesn\u0027t perform as well as expected. In this section we will dive in and take a look at some of the more common problems that can lead to poor query performance and how you can resolve them. Before you read on the most important thing to remember is to make sure statistics have been collected on all your table.\n\nSpecifically we will take a look at:\n\n* Data Skew\n* Access Path\n* Nested Loop Joins\n \n### Data Skew\n\nIn the most simplest term data skew primarily refers to a non uniform distribution in a dataset. For example, let\u0027s say you have a column in a table whose range of values is from 1-10. The data in this column would be considered skewed if there is a disproportionally large number of rows for a particular value. So, if the table contains 10 million rows and 9 million of those rows have the value of `5` then the data would be considered skewed. This is particularly problematic when the column is used in a join condition.\n\nThis is particularly problematic because with skewed data a few tasks have to do significantly more work than other tasks and this defeats the purpose of parallelism and it could also lead to out of memory errors. Skewness could exists in the base table on certain columns and it could also occur after certain joins. With skewed data problems usually arise during the `MergeSortJoin` step or during grouped aggregates.\n\n#### Detecting Skew\n\nIf your query is executed in Spark you can use the Database Console (Spark UI) to determine if your query could be possibly affected by data skew. You can find your query in the Database Console and look at the Summary Metrics for the stage:\n\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew1.png\"\u003e\n\nHere we see that the `Shuffle Read Size` for the `Min`, `25th Percentile`, `Median`, and `75th Percentile` are relatively the same. However, for the `Max` the amount of data being read is significantly larger. This indicates that this stage in the query execution is suffering from data skewness.\n\nAnother way we can detect skew is to look at the individual tasks for a stage in the Database Console:\n\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew2.png\"\u003e\n\nHere we see that the first task listed has a `Shuffle Read Size / Records` value that is significantly larger than the other tasks. This is also an indication that this query is under performing due to skew issues in the data.\n\nYou can also use SQL to determine if there is skew in your data. Let\u0027s run through an example. We\u0027ve created some skewed data for you. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create the example.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 19:20:37.937",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e3. Query Performance Problems\u003c/h2\u003e\n\u003cp\u003eWhen query performance is not up to par, there can be several reasons why a query doesn\u0026rsquo;t perform as well as expected. In this section we will dive in and take a look at some of the more common problems that can lead to poor query performance and how you can resolve them. Before you read on the most important thing to remember is to make sure statistics have been collected on all your table.\u003c/p\u003e\n\u003cp\u003eSpecifically we will take a look at:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eData Skew\u003c/li\u003e\n  \u003cli\u003eAccess Path\u003c/li\u003e\n  \u003cli\u003eNested Loop Joins\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eData Skew\u003c/h3\u003e\n\u003cp\u003eIn the most simplest term data skew primarily refers to a non uniform distribution in a dataset. For example, let\u0026rsquo;s say you have a column in a table whose range of values is from 1-10. The data in this column would be considered skewed if there is a disproportionally large number of rows for a particular value. So, if the table contains 10 million rows and 9 million of those rows have the value of \u003ccode\u003e5\u003c/code\u003e then the data would be considered skewed. This is particularly problematic when the column is used in a join condition.\u003c/p\u003e\n\u003cp\u003eThis is particularly problematic because with skewed data a few tasks have to do significantly more work than other tasks and this defeats the purpose of parallelism and it could also lead to out of memory errors. Skewness could exists in the base table on certain columns and it could also occur after certain joins. With skewed data problems usually arise during the \u003ccode\u003eMergeSortJoin\u003c/code\u003e step or during grouped aggregates.\u003c/p\u003e\n\u003ch4\u003eDetecting Skew\u003c/h4\u003e\n\u003cp\u003eIf your query is executed in Spark you can use the Database Console (Spark UI) to determine if your query could be possibly affected by data skew. You can find your query in the Database Console and look at the Summary Metrics for the stage:\u003c/p\u003e\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew1.png\"\u003e\n\u003cp\u003eHere we see that the \u003ccode\u003eShuffle Read Size\u003c/code\u003e for the \u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003e25th Percentile\u003c/code\u003e, \u003ccode\u003eMedian\u003c/code\u003e, and \u003ccode\u003e75th Percentile\u003c/code\u003e are relatively the same. However, for the \u003ccode\u003eMax\u003c/code\u003e the amount of data being read is significantly larger. This indicates that this stage in the query execution is suffering from data skewness.\u003c/p\u003e\n\u003cp\u003eAnother way we can detect skew is to look at the individual tasks for a stage in the Database Console:\u003c/p\u003e\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew2.png\"\u003e\n\u003cp\u003eHere we see that the first task listed has a \u003ccode\u003eShuffle Read Size / Records\u003c/code\u003e value that is significantly larger than the other tasks. This is also an indication that this query is under performing due to skew issues in the data.\u003c/p\u003e\n\u003cp\u003eYou can also use SQL to determine if there is skew in your data. Let\u0026rsquo;s run through an example. We\u0026rsquo;ve created some skewed data for you. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create the example.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559764112091_-1490678783",
      "id": "20190605-194832_1949998783",
      "dateCreated": "2019-06-05 19:48:32.091",
      "dateStarted": "2019-06-06 19:20:37.937",
      "dateFinished": "2019-06-06 19:20:37.953",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE TABLE DEV3.LINEITEM_WITH_SKEW (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n );\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027LINEITEM_WITH_SKEW\u0027, null, \u0027s3a://splice-training/external/data/lineitem-with-skew.csv.gz\u0027, null, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\nANALYZE TABLE DEV3.LINEITEM_WITH_SKEW;",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:08:22.318",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "3": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n16486975\t0\t1\t369671075\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tLINEITEM_WITH_SKEW\t-All-\t16486975\t1492780174\t69\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559771421261_221758633",
      "id": "20190605-215021_1418264474",
      "dateCreated": "2019-06-05 21:50:21.261",
      "dateStarted": "2019-06-06 14:20:42.465",
      "dateFinished": "2019-06-06 14:32:17.071",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow that we have our example created let\u0027s click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to use SQL to detect the skewness of the data.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:12:36.879",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow that we have our example created let\u0026rsquo;s click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to use SQL to detect the skewness of the data.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559771566544_1231274781",
      "id": "20190605-215246_785513521",
      "dateCreated": "2019-06-05 21:52:46.544",
      "dateStarted": "2019-06-06 17:12:36.880",
      "dateFinished": "2019-06-06 17:12:36.885",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nSELECT COUNT(*) AS NUM_RECORDS, MIN(CC) AS SMALLEST_VALUE, MAX(CC) AS LARGEST_VALUE, AVG(CC) AS AVERAGE_VALUE FROM\n(SELECT L_ORDERKEY, COUNT(*) AS CC\n FROM DEV3.LINEITEM_WITH_SKEW\n GROUP BY 1) DT;\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 14:36:49.304",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "NUM_RECORDS": "string",
                      "SMALLEST_VALUE": "string",
                      "LARGEST_VALUE": "string",
                      "AVERAGE_VALUE": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUM_RECORDS\tSMALLEST_VALUE\tLARGEST_VALUE\tAVERAGE_VALUE\n1500000\t1\t10485766\t10\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559771694899_1367539777",
      "id": "20190605-215454_1409519102",
      "dateCreated": "2019-06-05 21:54:54.899",
      "dateStarted": "2019-06-06 14:36:19.888",
      "dateFinished": "2019-06-06 14:36:49.020",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nThe query we just ran is checking for skewness on the `L_ORDERKEY` column. This query groups the rows by the `L_ORDERKEY` and counts the number of records for each `L_ORDERKEY` value. A couple of things tell us that there is skew in this data. The difference between the `SMALLEST_VALUE` and `LARGEST_VALUE` is very big. Also, the difference between the `AVERAGE_VALUE` and the `LARGEST_VALUE` is also very big. There is an average of 10 records per order key value but there this one order key that has 10,485,766 rows.\n\n#### Handling Skew\n\nWe can\u0027t change the data to eliminate skew but there are a few things that we can try that will help alleviate and in some cases avoid skewness of data.\n\n##### Broadcast Join\n\nIn most cases the shuffling of data during a mergesort join is problematic when there is skewness of data in one of the join columns. This presents itself in the spark tasks where you see that one task reads the majority of the data therby taking much longer to complete compared to all other tasks for the stage. If the right hand side of the join is small enough you can try hinting the join to use the `BROADCAST` join strategy.\n\nFor example:\n\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L --SPLICE-PROPERTIES joinStrategy\u003dBROADCAST\nON O.O_ORDERKEY \u003d L.L_ORDERKEY;\n\u003c/pre\u003e\n\nNote that we wouldn\u0027t actually recommend the query above because we know the right hand side table `LINEITEM_WITH_SKEW` is a large table. The example is purely for demonstrating how to apply a hint to use the `BROADCAST` join strategy.\n\n##### Split the Skewed Table and use Union All\n\nAnother method for handling skew is to split the query into two parts with one part extracting the skewed value and the second part handling the remaining values then using a `UNION ALL` to merge the result sets. We know that our skewed data is on the order key value of `1`.\n\nHere is an example of a rewrite:\n\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003d 1\nUNION ALL\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003c\u003e 1\n\u003c/pre\u003e\n\n##### Introduce a Non-Skewed Join Column\n\nIf possible you can introduce a non-skewed join column to the query. This is typically accomplished by rewriting the query to use the `WITH` statement.\n\nFor example:\n\n\u003cpre\u003e\nWITH DT as (SELECT * FROM DEV3.ORDERS O)\nSELECT * FROM DT\nWHERE EXISTS (SELECT 1 FROM DEV3.LINEITEM_WITH_SKEW L WHERE L.L_ORDERKEY \u003d DT.O_ORDERKEY)\n\u003c/pre\u003e\n\n##### Other Methods and Future Improvements\n\nIf you are joining multiple tables you may be able to alleviate skew issues by delaying the skewed join. This can be accomplished by using the `joinOrder\u003dFIXED` method and by experimenting with the order of tables in which they are joined.\n\nConstant improvements are being made to the optimizer to help with skewness and reduce the need for rewrites or query hints. Some improvements that are being worked on include salting skewed values to make them unique and pushiing aggregation down before the join.\n\n### Access Path\n\nThe access path to the data can have a huge affect on the performance of a query. Access path refers to how we are reading the data. Are we scanning the entire table? Are we using a primary key?\n\nA full table scan appears as a `TableScan` operation in the explain plan. Primary key access also displays as a `TableScan` but the number of rows scanned would be smaller than the total number of rows in the table\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see the explain plan for selecting from a table using a full table scan.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:11:16.600",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eThe query we just ran is checking for skewness on the \u003ccode\u003eL_ORDERKEY\u003c/code\u003e column. This query groups the rows by the \u003ccode\u003eL_ORDERKEY\u003c/code\u003e and counts the number of records for each \u003ccode\u003eL_ORDERKEY\u003c/code\u003e value. A couple of things tell us that there is skew in this data. The difference between the \u003ccode\u003eSMALLEST_VALUE\u003c/code\u003e and \u003ccode\u003eLARGEST_VALUE\u003c/code\u003e is very big. Also, the difference between the \u003ccode\u003eAVERAGE_VALUE\u003c/code\u003e and the \u003ccode\u003eLARGEST_VALUE\u003c/code\u003e is also very big. There is an average of 10 records per order key value but there this one order key that has 10,485,766 rows.\u003c/p\u003e\n\u003ch4\u003eHandling Skew\u003c/h4\u003e\n\u003cp\u003eWe can\u0026rsquo;t change the data to eliminate skew but there are a few things that we can try that will help alleviate and in some cases avoid skewness of data.\u003c/p\u003e\n\u003ch5\u003eBroadcast Join\u003c/h5\u003e\n\u003cp\u003eIn most cases the shuffling of data during a mergesort join is problematic when there is skewness of data in one of the join columns. This presents itself in the spark tasks where you see that one task reads the majority of the data therby taking much longer to complete compared to all other tasks for the stage. If the right hand side of the join is small enough you can try hinting the join to use the \u003ccode\u003eBROADCAST\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L --SPLICE-PROPERTIES joinStrategy\u003dBROADCAST\nON O.O_ORDERKEY \u003d L.L_ORDERKEY;\n\u003c/pre\u003e\n\u003cp\u003eNote that we wouldn\u0026rsquo;t actually recommend the query above because we know the right hand side table \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e is a large table. The example is purely for demonstrating how to apply a hint to use the \u003ccode\u003eBROADCAST\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003ch5\u003eSplit the Skewed Table and use Union All\u003c/h5\u003e\n\u003cp\u003eAnother method for handling skew is to split the query into two parts with one part extracting the skewed value and the second part handling the remaining values then using a \u003ccode\u003eUNION ALL\u003c/code\u003e to merge the result sets. We know that our skewed data is on the order key value of \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is an example of a rewrite:\u003c/p\u003e\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003d 1\nUNION ALL\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003c\u003e 1\n\u003c/pre\u003e\n\u003ch5\u003eIntroduce a Non-Skewed Join Column\u003c/h5\u003e\n\u003cp\u003eIf possible you can introduce a non-skewed join column to the query. This is typically accomplished by rewriting the query to use the \u003ccode\u003eWITH\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\nWITH DT as (SELECT * FROM DEV3.ORDERS O)\nSELECT * FROM DT\nWHERE EXISTS (SELECT 1 FROM DEV3.LINEITEM_WITH_SKEW L WHERE L.L_ORDERKEY \u003d DT.O_ORDERKEY)\n\u003c/pre\u003e\n\u003ch5\u003eOther Methods and Future Improvements\u003c/h5\u003e\n\u003cp\u003eIf you are joining multiple tables you may be able to alleviate skew issues by delaying the skewed join. This can be accomplished by using the \u003ccode\u003ejoinOrder\u003dFIXED\u003c/code\u003e method and by experimenting with the order of tables in which they are joined.\u003c/p\u003e\n\u003cp\u003eConstant improvements are being made to the optimizer to help with skewness and reduce the need for rewrites or query hints. Some improvements that are being worked on include salting skewed values to make them unique and pushiing aggregation down before the join.\u003c/p\u003e\n\u003ch3\u003eAccess Path\u003c/h3\u003e\n\u003cp\u003eThe access path to the data can have a huge affect on the performance of a query. Access path refers to how we are reading the data. Are we scanning the entire table? Are we using a primary key?\u003c/p\u003e\n\u003cp\u003eA full table scan appears as a \u003ccode\u003eTableScan\u003c/code\u003e operation in the explain plan. Primary key access also displays as a \u003ccode\u003eTableScan\u003c/code\u003e but the number of rows scanned would be smaller than the total number of rows in the table\u003c/p\u003e\n\u003cp\u003eclick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see the explain plan for selecting from a table using a full table scan.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559831860209_-23237565",
      "id": "20190606-143740_975770926",
      "dateCreated": "2019-06-06 14:37:40.209",
      "dateStarted": "2019-06-06 17:07:23.311",
      "dateFinished": "2019-06-06 17:07:23.323",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select * from DEV3.LINEITEM_WITH_SKEW;\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:07:35.291",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "O_ORDERKEY": "string",
                      "O_CUSTKEY": "string",
                      "O_ORDERSTATUS": "string",
                      "O_TOTALPRICE": "string",
                      "O_ORDERDATE": "string",
                      "O_ORDERPRIORITY": "string",
                      "O_CLERK": "string",
                      "O_SHIPPRIORITY": "string",
                      "O_COMMENT": "string",
                      "L_ORDERKEY": "string",
                      "L_PARTKEY": "string",
                      "L_SUPPKEY": "string",
                      "L_LINENUMBER": "string",
                      "L_QUANTITY": "string",
                      "L_EXTENDEDPRICE": "string",
                      "L_DISCOUNT": "string",
                      "L_TAX": "string",
                      "L_RETURNFLAG": "string",
                      "L_LINESTATUS": "string",
                      "L_SHIPDATE": "string",
                      "L_COMMITDATE": "string",
                      "L_RECEIPTDATE": "string",
                      "L_SHIPINSTRUCT": "string",
                      "L_SHIPMODE": "string",
                      "L_COMMENT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d210693.508,outputRows\u003d16486975,outputHeapSize\u003d1.382 GB,partitions\u003d69)\n    -\u003e  TableScan[LINEITEM_WITH_SKEW(1744)](n\u003d1,totalCost\u003d31329.252,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d1.382 GB,partitions\u003d69)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559836312942_1198819883",
      "id": "20190606-155152_1430084522",
      "dateCreated": "2019-06-06 15:51:52.942",
      "dateStarted": "2019-06-06 17:07:35.313",
      "dateFinished": "2019-06-06 17:07:35.329",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `TableScan` operation is performed on the `LINEITEM_WITH_SKEW` table. Note that the number of `scannedRows` is 16486975. This is the total number of rows in the table.\n\nNow click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see the explain plan for selecting from a table using a primary key access path.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:56:48.120",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eTableScan\u003c/code\u003e operation is performed on the \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e table. Note that the number of \u003ccode\u003escannedRows\u003c/code\u003e is 16486975. This is the total number of rows in the table.\u003c/p\u003e\n\u003cp\u003eNow click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see the explain plan for selecting from a table using a primary key access path.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559840859562_-1653376678",
      "id": "20190606-170739_1448771423",
      "dateCreated": "2019-06-06 17:07:39.562",
      "dateStarted": "2019-06-06 17:16:36.371",
      "dateFinished": "2019-06-06 17:16:36.376",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select * from DEV3.LINEITEM_WITH_SKEW WHERE L_ORDERKEY \u003d 10;",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:04:43.216",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d3,updateMode\u003dREAD_ONLY (1),engine\u003dcontrol)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d8.038,outputRows\u003d3,outputHeapSize\u003d270 B,partitions\u003d69)\n    -\u003e  TableScan[LINEITEM_WITH_SKEW(1744)](n\u003d1,totalCost\u003d4.006,scannedRows\u003d3,outputRows\u003d3,outputHeapSize\u003d270 B,partitions\u003d69,preds\u003d[(L_ORDERKEY[0:1] \u003d 10)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559840649598_-201793566",
      "id": "20190606-170409_777962589",
      "dateCreated": "2019-06-06 17:04:09.598",
      "dateStarted": "2019-06-06 17:04:43.235",
      "dateFinished": "2019-06-06 17:04:43.262",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `TableScan` operation is performed on the `LINEITEM_WITH_SKEW` table but notice that the number of `scannedRows` is 3. Reading through 3 rows is a whole lot faster than reading through 16486975 rows.\n\nIndexes are another access path that can help improve the peformance of a query. In Splice Machine we refer to indexes as either a covering index or a non-covering index. \n\n#### Covering Index\n\nIf all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a covering index for this query. When the number of rows accessed is the same, scanning a covering index is usually more favorable than scanning the base table as the index usually will have a smaller row size.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create an index and view the index access path in the explain plan.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:55:46.405",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eTableScan\u003c/code\u003e operation is performed on the \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e table but notice that the number of \u003ccode\u003escannedRows\u003c/code\u003e is 3. Reading through 3 rows is a whole lot faster than reading through 16486975 rows.\u003c/p\u003e\n\u003cp\u003eIndexes are another access path that can help improve the peformance of a query. In Splice Machine we refer to indexes as either a covering index or a non-covering index. \u003c/p\u003e\n\u003ch4\u003eCovering Index\u003c/h4\u003e\n\u003cp\u003eIf all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a covering index for this query. When the number of rows accessed is the same, scanning a covering index is usually more favorable than scanning the base table as the index usually will have a smaller row size.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create an index and view the index access path in the explain plan.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559841291021_-300398730",
      "id": "20190606-171451_146932109",
      "dateCreated": "2019-06-06 17:14:51.021",
      "dateStarted": "2019-06-06 17:29:29.924",
      "dateFinished": "2019-06-06 17:29:29.930",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE INDEX DEV3.IDX_LINEITEM1 ON DEV3.LINEITEM_WITH_SKEW(L_PARTKEY, L_QUANTITY);\n\nEXPLAIN SELECT L_PARTKEY, L_QUANTITY FROM DEV3.LINEITEM_WITH_SKEW; ",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:32:05.896",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "2": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d184989.605,outputRows\u003d16486975,outputHeapSize\u003d176.886 MB,partitions\u003d69)\n    -\u003e  IndexScan[IDX_LINEITEM1(1777)](n\u003d1,totalCost\u003d18304.542,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d176.886 MB,partitions\u003d69,baseTable\u003dLINEITEM_WITH_SKEW(1744))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559836167039_108811212",
      "id": "20190606-154927_2089212219",
      "dateCreated": "2019-06-06 15:49:27.039",
      "dateStarted": "2019-06-06 17:32:05.918",
      "dateFinished": "2019-06-06 17:35:36.640",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `IndexScan` operation is performed using the `IDX_LINEITEM1` index.\n\n#### Non-Covering Index\n\nIf not all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a non-covering index. The use of a non-covering index incurs the extra cost to lookup the values of column(s) not covered by the index from the base table for each qualified row. This may or may not be a better choice than a full table scan depending on the data and the query.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to view the explain plan for a query that uses a non-covering index.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:42:01.792",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eIndexScan\u003c/code\u003e operation is performed using the \u003ccode\u003eIDX_LINEITEM1\u003c/code\u003e index.\u003c/p\u003e\n\u003ch4\u003eNon-Covering Index\u003c/h4\u003e\n\u003cp\u003eIf not all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a non-covering index. The use of a non-covering index incurs the extra cost to lookup the values of column(s) not covered by the index from the base table for each qualified row. This may or may not be a better choice than a full table scan depending on the data and the query.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to view the explain plan for a query that uses a non-covering index.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559842572789_2075740225",
      "id": "20190606-173612_579152941",
      "dateCreated": "2019-06-06 17:36:12.789",
      "dateStarted": "2019-06-06 17:42:01.792",
      "dateFinished": "2019-06-06 17:42:01.797",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nEXPLAIN SELECT L_PARTKEY, L_QUANTITY, L_EXTENDEDPRICE FROM DEV3.LINEITEM_WITH_SKEW --splice-properties index\u003dIDX_LINEITEM1",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:45:20.748",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d4,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d3,totalCost\u003d66133795.261,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d69)\n    -\u003e  IndexLookup(n\u003d2,totalCost\u003d65966204.542,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d69)\n      -\u003e  IndexScan[IDX_LINEITEM1(1777)](n\u003d1,totalCost\u003d18304.542,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d69,baseTable\u003dLINEITEM_WITH_SKEW(1744))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559842929062_-1393012132",
      "id": "20190606-174209_1145609668",
      "dateCreated": "2019-06-06 17:42:09.062",
      "dateStarted": "2019-06-06 17:45:20.771",
      "dateFinished": "2019-06-06 17:45:20.789",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that there is an additional step `IndexLookup` that needs to be performed for every row returned by the `IndexScan` step. As previously stated, this may or may not be as perfomant when compared to doing a full table scan. It really depends on the amount of data and the particular query.\n\n### Nested Loop Joins\n\nNested loop joins work for all kinds of join conditions (equality or non-equality). When an equality join condition is present, nested loop join’s performance usually is not as good as the other 3 join strategies (broadcast, sortmerge and merge join). The exception is when the left hand side table has a small amount of rows to read and the join with the right hand side table uses a leading pk/index column with low selectivity.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create some tables and load some data.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:35:20.924",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that there is an additional step \u003ccode\u003eIndexLookup\u003c/code\u003e that needs to be performed for every row returned by the \u003ccode\u003eIndexScan\u003c/code\u003e step. As previously stated, this may or may not be as perfomant when compared to doing a full table scan. It really depends on the amount of data and the particular query.\u003c/p\u003e\n\u003ch3\u003eNested Loop Joins\u003c/h3\u003e\n\u003cp\u003eNested loop joins work for all kinds of join conditions (equality or non-equality). When an equality join condition is present, nested loop join’s performance usually is not as good as the other 3 join strategies (broadcast, sortmerge and merge join). The exception is when the left hand side table has a small amount of rows to read and the join with the right hand side table uses a leading pk/index column with low selectivity.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create some tables and load some data.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559843136152_365547232",
      "id": "20190606-174536_192468277",
      "dateCreated": "2019-06-06 17:45:36.152",
      "dateStarted": "2019-06-06 18:35:20.924",
      "dateFinished": "2019-06-06 18:35:20.931",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE TABLE DEV3.LINEITEM (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n);\n\nCREATE TABLE DEV3.SUPPLIER (\n S_SUPPKEY INTEGER NOT NULL PRIMARY KEY,\n S_NAME VARCHAR(25) ,\n S_ADDRESS VARCHAR(40) ,\n S_NATIONKEY INTEGER ,\n S_PHONE VARCHAR(15) ,\n S_ACCTBAL DECIMAL(15,2),\n S_COMMENT VARCHAR(101)\n); \n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027LINEITEM\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/lineitem\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027SUPPLIER\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/supplier\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\nANALYZE TABLE DEV3.LINEITEM;\n\nANALYZE TABLE DEV3.SUPPLIER;",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:37:00.771",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "O_ORDERKEY": "string",
                      "O_CUSTKEY": "string",
                      "O_ORDERSTATUS": "string",
                      "O_TOTALPRICE": "string",
                      "O_ORDERDATE": "string",
                      "O_ORDERPRIORITY": "string",
                      "O_CLERK": "string",
                      "O_SHIPPRIORITY": "string",
                      "O_COMMENT": "string",
                      "L_ORDERKEY": "string",
                      "L_PARTKEY": "string",
                      "L_SUPPKEY": "string",
                      "L_LINENUMBER": "string",
                      "L_QUANTITY": "string",
                      "L_EXTENDEDPRICE": "string",
                      "L_DISCOUNT": "string",
                      "L_TAX": "string",
                      "L_RETURNFLAG": "string",
                      "L_LINESTATUS": "string",
                      "L_SHIPDATE": "string",
                      "L_COMMITDATE": "string",
                      "L_RECEIPTDATE": "string",
                      "L_SHIPINSTRUCT": "string",
                      "L_SHIPMODE": "string",
                      "L_COMMENT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "4": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "5": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n6001215\t0\t1\t759863287\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n10000\t0\t1\t1409184\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tLINEITEM\t-All-\t6001215\t528106920\t15\t2\t0.0\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\n"
          },
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d8,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dcontrol)\n  -\u003e  ScrollInsensitive(n\u003d7,totalCost\u003d84.451,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n    -\u003e  ProjectRestrict(n\u003d6,totalCost\u003d5.074,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n      -\u003e  GroupBy(n\u003d5,totalCost\u003d1.068,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n        -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.002,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n          -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d1.068,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n            -\u003e  TableScan[SUPPLIER(1840)](n\u003d2,totalCost\u003d4.002,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15,preds\u003d[(L_SUPPKEY[1:3] \u003d S_SUPPKEY[2:1])])\n            -\u003e  TableScan[LINEITEM(1824)](n\u003d1,totalCost\u003d4.006,scannedRows\u003d3,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d15,preds\u003d[(L_PARTKEY[0:2] \u003d 1),(L_ORDERKEY[0:1] \u003d 5120486)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559843786150_305412682",
      "id": "20190606-175626_19528643",
      "dateCreated": "2019-06-06 17:56:26.150",
      "dateStarted": "2019-06-06 18:18:51.187",
      "dateFinished": "2019-06-06 18:22:21.781",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow that we are all setup click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see an example of a perfect use case for a nested loop join.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:36:37.184",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow that we are all setup click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see an example of a perfect use case for a nested loop join.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559846130621_-1425673930",
      "id": "20190606-183530_57730438",
      "dateCreated": "2019-06-06 18:35:30.621",
      "dateStarted": "2019-06-06 18:36:37.185",
      "dateFinished": "2019-06-06 18:36:37.191",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nEXPLAIN select count(*) from \ndev3.lineitem, dev3.supplier\nwhere l_suppkey\u003d s_suppkey and l_partkey \u003d 1 and  L_orderkey \u003d 5120486;",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:37:06.258",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d8,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dcontrol)\n  -\u003e  ScrollInsensitive(n\u003d7,totalCost\u003d84.451,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n    -\u003e  ProjectRestrict(n\u003d6,totalCost\u003d5.074,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n      -\u003e  GroupBy(n\u003d5,totalCost\u003d1.068,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n        -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.002,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n          -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d1.068,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15)\n            -\u003e  TableScan[SUPPLIER(1840)](n\u003d2,totalCost\u003d4.002,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d15,preds\u003d[(L_SUPPKEY[1:3] \u003d S_SUPPKEY[2:1])])\n            -\u003e  TableScan[LINEITEM(1824)](n\u003d1,totalCost\u003d4.006,scannedRows\u003d3,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d15,preds\u003d[(L_PARTKEY[0:2] \u003d 1),(L_ORDERKEY[0:1] \u003d 5120486)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559845023227_271836833",
      "id": "20190606-181703_1285210065",
      "dateCreated": "2019-06-06 18:17:03.227",
      "dateStarted": "2019-06-06 18:37:06.284",
      "dateFinished": "2019-06-06 18:37:06.320",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that both tables have a very small number of `scannedRows` which is the perfect case for a nested loop join.\n\nIn the event that your query uses a nested loop join on tables with many rows on both sides of the join the recommended solution would be to apply a hint to use either a `BROADCAST` or `SORTMERGE` join strategy.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 19:20:53.147",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that both tables have a very small number of \u003ccode\u003escannedRows\u003c/code\u003e which is the perfect case for a nested loop join.\u003c/p\u003e\n\u003cp\u003eIn the event that your query uses a nested loop join on tables with many rows on both sides of the join the recommended solution would be to apply a hint to use either a \u003ccode\u003eBROADCAST\u003c/code\u003e or \u003ccode\u003eSORTMERGE\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559847747495_-141520462",
      "id": "20190606-190227_194318523",
      "dateCreated": "2019-06-06 19:02:27.495",
      "dateStarted": "2019-06-06 19:20:53.148",
      "dateFinished": "2019-06-06 19:20:53.153",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\nThe next notebook in this class, [*Prepared Statements*](/#/notebook/2EBF46WCA), teaches you how to use prepared statements for querying your databases.\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-31 17:47:07.910",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eThe next notebook in this class, \u003ca href\u003d\"/#/notebook/2EBF46WCA\"\u003e\u003cem\u003ePrepared Statements\u003c/em\u003e\u003c/a\u003e, teaches you how to use prepared statements for querying your databases.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559324811337_1783166124",
      "id": "20190531-174651_964241124",
      "dateCreated": "2019-05-31 17:46:51.337",
      "dateStarted": "2019-05-31 17:47:07.910",
      "dateFinished": "2019-05-31 17:47:07.924",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training /Advanced Developer/f. Query Optimization",
  "id": "2EETJQH1J",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}