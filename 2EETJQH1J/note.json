{
  "paragraphs": [
    {
      "text": "%md\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n# Query Optimization\n\nThis notebook shows you advanced query optimization techniques for boosting the performance of your Splice Machine queries.\n\nWith a perfect sql optimizer, users do not need to worry about the efficiency of their SQL statements. It is optimizer’s responsibility to convert the SQL into a semantically equivalent and more performant execution plan. In reality some sql statements require some manual tuning or rewriting due to:\n\n* Limitations in the optimizer\u0027s heuristic rewrite functionality\n* Limitations in the search space the optimizer explores\n* Inaccurate statistics and/or cost estimation\n* Parsing time concerns\n \nIn this notebook we will show you how to read a query explain plan and how you can use statistics to understand the characteristics of a table. These are two essential things you will need to understand in order to properly optimize queries in Splice Machine.\n\nNext, we will show you some query performance problems that you may encounter and how to resolve them.\n\n1. *Understanding the Query Execution Plan*\n2. *Understanding Database Statistics*\n3. *Query Performance Problems*\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:04:51.244",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003ch1\u003eQuery Optimization\u003c/h1\u003e\n\u003cp\u003eThis notebook shows you advanced query optimization techniques for boosting the performance of your Splice Machine queries.\u003c/p\u003e\n\u003cp\u003eWith a perfect sql optimizer, users do not need to worry about the efficiency of their SQL statements. It is optimizer’s responsibility to convert the SQL into a semantically equivalent and more performant execution plan. In reality some sql statements require some manual tuning or rewriting due to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLimitations in the optimizer\u0026rsquo;s heuristic rewrite functionality\u003c/li\u003e\n  \u003cli\u003eLimitations in the search space the optimizer explores\u003c/li\u003e\n  \u003cli\u003eInaccurate statistics and/or cost estimation\u003c/li\u003e\n  \u003cli\u003eParsing time concerns\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this notebook we will show you how to read a query explain plan and how you can use statistics to understand the characteristics of a table. These are two essential things you will need to understand in order to properly optimize queries in Splice Machine.\u003c/p\u003e\n\u003cp\u003eNext, we will show you some query performance problems that you may encounter and how to resolve them.\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cem\u003eUnderstanding the Query Execution Plan\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eUnderstanding Database Statistics\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eQuery Performance Problems\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559318834685_-2061822643",
      "id": "20190531-160714_265949446",
      "dateCreated": "2019-05-31 16:07:14.685",
      "dateStarted": "2019-06-10 18:04:47.451",
      "dateFinished": "2019-06-10 18:04:47.948",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 1. Understanding the Query Execution Plan\n\nThis section describes more fully what information is in the Explain plan for a query; the key pieces of information in a plan include the:\n\n*  ordering of the joins and other steps in the query\n*  use of Tables vs Indexes\n*  need for IndexLookup, which can slow a query down\n*  join Strategies employed\n*  actual row count and cost estimates at each step\n*  presence of predicate pushdowns where available\n*  indication of which *engine* will run the query: *control* or *Spark*\n\nWe\u0027ll delve a bit deeper into pushing down predicates and join ordering/strategies to help you understand plans.\n\n### Explain and Predicates\n\nLet\u0027s start with a query variant that is based on the `customer_bulk_import_example1` and `customer_bulk_import_example2` tables that we created earlier in this class. Click the  \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to display the plan for this query. \n",
      "user": "anonymous",
      "dateUpdated": "2019-06-05 19:48:53.070",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e1. Understanding the Query Execution Plan\u003c/h2\u003e\n\u003cp\u003eThis section describes more fully what information is in the Explain plan for a query; the key pieces of information in a plan include the:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eordering of the joins and other steps in the query\u003c/li\u003e\n  \u003cli\u003euse of Tables vs Indexes\u003c/li\u003e\n  \u003cli\u003eneed for IndexLookup, which can slow a query down\u003c/li\u003e\n  \u003cli\u003ejoin Strategies employed\u003c/li\u003e\n  \u003cli\u003eactual row count and cost estimates at each step\u003c/li\u003e\n  \u003cli\u003epresence of predicate pushdowns where available\u003c/li\u003e\n  \u003cli\u003eindication of which \u003cem\u003eengine\u003c/em\u003e will run the query: \u003cem\u003econtrol\u003c/em\u003e or \u003cem\u003eSpark\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe\u0026rsquo;ll delve a bit deeper into pushing down predicates and join ordering/strategies to help you understand plans.\u003c/p\u003e\n\u003ch3\u003eExplain and Predicates\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start with a query variant that is based on the \u003ccode\u003ecustomer_bulk_import_example1\u003c/code\u003e and \u003ccode\u003ecustomer_bulk_import_example2\u003c/code\u003e tables that we created earlier in this class. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to display the plan for this query.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559324807566_1564645782",
      "id": "20190531-174647_369128840",
      "dateCreated": "2019-05-31 17:46:47.566",
      "dateStarted": "2019-06-05 16:47:08.517",
      "dateFinished": "2019-06-05 16:47:08.530",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select a.c_custkey, a.c_nationkey from\n    dev3.customer_bulk_import_example1 a\n    ,dev3.customer_bulk_import_example2 b\n     where a.c_custkey \u003d b.c_custkey\n     and a.c_nationkey \u003d 100\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:06:04.026",
      "config": {
        "enabled": true,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d6,rows\u003d646875000,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d12975154.281,outputRows\u003d646875000,outputHeapSize\u003d1.219 GB,partitions\u003d144)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d30004.04,outputRows\u003d15000020,outputHeapSize\u003d1.219 GB,partitions\u003d144)\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d18526.39,outputRows\u003d646875000,outputHeapSize\u003d1.219 GB,partitions\u003d144,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d30004.04,scannedRows\u003d15000020,outputRows\u003d15000020,outputHeapSize\u003d1.219 GB,partitions\u003d144)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1437504,scannedRows\u003d718750000,outputRows\u003d646875000,outputHeapSize\u003d1.205 GB,partitions\u003d144,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559750851424_-600476239",
      "id": "20190605-160731_2050721181",
      "dateCreated": "2019-06-05 16:07:31.424",
      "dateStarted": "2019-06-10 18:06:04.270",
      "dateFinished": "2019-06-10 18:06:04.978",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n\u003cbr/\u003e\nYou’ll notice that on the very right of the plan are two lines with *preds\u003d* on them. *Preds* is short for *predicates*, which in databases are true/false conditions that are tested during query execution.\n\n### About Predicates\n\nStarting on the bottom line, we see a `TableScan` with the preds specification on it; this is called a *Predicate Pushdown*. A pushdown means: when we perform this `TableScan`, we\u0027ll bring this predicate (`A.C_NATIONKEY \u003d 100`) along with us, and will perform the scan using this predicate, passing up to the next part of the plan ONLY the rows that match. Predicate pushdowns are extremely efficient when performed on keyed results (primary keys or indexes), because only the minimal number of rows are pushed up to the next step.\n\nThe other kind of predicate shown here is of the form `[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])]`. You can ignore the numbers for now; the key part is `A.C_CUSTKEY \u003d B.C_CUSTKEY`. You can see that this is the join predicate, required for the actual join operation.\n\nThe main takeaway is that, as with most databases: when you can *push down* a predicate that filters a lot of data with a keyed filter, it helps create efficient scans for that step. If the filter is not keyed, this becomes a potential opportunity for adding an index.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:14:22.948",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou’ll notice that on the very right of the plan are two lines with \u003cem\u003epreds\u003d\u003c/em\u003e on them. \u003cem\u003ePreds\u003c/em\u003e is short for \u003cem\u003epredicates\u003c/em\u003e, which in databases are true/false conditions that are tested during query execution.\u003c/p\u003e\n\u003ch3\u003eAbout Predicates\u003c/h3\u003e\n\u003cp\u003eStarting on the bottom line, we see a \u003ccode\u003eTableScan\u003c/code\u003e with the preds specification on it; this is called a \u003cem\u003ePredicate Pushdown\u003c/em\u003e. A pushdown means: when we perform this \u003ccode\u003eTableScan\u003c/code\u003e, we\u0026rsquo;ll bring this predicate (\u003ccode\u003eA.C_NATIONKEY \u003d 100\u003c/code\u003e) along with us, and will perform the scan using this predicate, passing up to the next part of the plan ONLY the rows that match. Predicate pushdowns are extremely efficient when performed on keyed results (primary keys or indexes), because only the minimal number of rows are pushed up to the next step.\u003c/p\u003e\n\u003cp\u003eThe other kind of predicate shown here is of the form \u003ccode\u003e[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])]\u003c/code\u003e. You can ignore the numbers for now; the key part is \u003ccode\u003eA.C_CUSTKEY \u003d B.C_CUSTKEY\u003c/code\u003e. You can see that this is the join predicate, required for the actual join operation.\u003c/p\u003e\n\u003cp\u003eThe main takeaway is that, as with most databases: when you can \u003cem\u003epush down\u003c/em\u003e a predicate that filters a lot of data with a keyed filter, it helps create efficient scans for that step. If the filter is not keyed, this becomes a potential opportunity for adding an index.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559753121122_-170699142",
      "id": "20190605-164521_219571127",
      "dateCreated": "2019-06-05 16:45:21.122",
      "dateStarted": "2019-06-06 17:14:22.949",
      "dateFinished": "2019-06-06 17:14:22.955",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Join Ordering\n\nThe actual join ordering is part of the optimization process: do I get a better cost when I start with the `customer_bulk_import_example1` table and join table `customer_bulk_import_example2` with it, or the other way around?\n\nSmart join ordering depends a lot on the situation. Generally speaking, the sooner you can filter out rows (thus working with fewer rows at each step of the query), the faster the query will run.\n\nWhen you look at an explain plan, if you are unsure of the ordering, remember again the order is *bottom up*. Another way to view this is to look at the counts on each row of the plan (n\u003d1, n\u003d2, etc.). This dictates the table ordering being used.",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:07:43.786",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eJoin Ordering\u003c/h3\u003e\n\u003cp\u003eThe actual join ordering is part of the optimization process: do I get a better cost when I start with the \u003ccode\u003ecustomer_bulk_import_example1\u003c/code\u003e table and join table \u003ccode\u003ecustomer_bulk_import_example2\u003c/code\u003e with it, or the other way around?\u003c/p\u003e\n\u003cp\u003eSmart join ordering depends a lot on the situation. Generally speaking, the sooner you can filter out rows (thus working with fewer rows at each step of the query), the faster the query will run.\u003c/p\u003e\n\u003cp\u003eWhen you look at an explain plan, if you are unsure of the ordering, remember again the order is \u003cem\u003ebottom up\u003c/em\u003e. Another way to view this is to look at the counts on each row of the plan (n\u003d1, n\u003d2, etc.). This dictates the table ordering being used.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559754591184_1443740413",
      "id": "20190605-170951_606376220",
      "dateCreated": "2019-06-05 17:09:51.184",
      "dateStarted": "2019-06-10 18:07:12.164",
      "dateFinished": "2019-06-10 18:07:12.292",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Join Strategy\n\nIn Splice Machine there are four possible join strategies:\n\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eJoin Strategy\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eBROADCAST\u003c/td\u003e\n            \u003ctd\u003eRead the results of the Right Result Set (RHS) into memory, then for each row in the left result set (LHS), perform a local lookup to determine the right side of the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eBROADCAST\u003c/i\u003e will only work if at least one of the following is true:\u003cbr/\u003e\u003cbr/\u003e\n                \u003cul\u003e\n                    \u003cli\u003eThere is at least one equijoin (\u003d) predicate that does not include a function call.\u003c/li\u003e\n                    \u003cli\u003eThere is at least one inequality join predicate, the RHS is a base table, and the join is evaluated in Spark.\u003c/li\u003e\n                \u003c/ul\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eSORTMERGE\u003c/td\u003e\n            \u003ctd\u003eRe-sort both the left and right sides according to the join keys, then perform a \u003ci\u003eMERGE\u003c/i\u003e join on the results.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eSORTMERGE\u003c/i\u003e requires an equijoin predicate with no function calls.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eMERGE\u003c/td\u003e\n            \u003ctd\u003eRead the Right and Left result sets simultaneously in order and join them together as they are read.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eMERGE\u003c/i\u003e joins require that both the left and right result sets be sorted according to the join keys. \u003ci\u003eMERGE\u003c/i\u003e requires an equijoin predicate that does not include a function call.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eNESTEDLOOP\u003c/td\u003e\n            \u003ctd\u003eFor each row on the left, fetch the values on the right that match the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eNESTEDLOOP\u003c/i\u003e is the only join that can work with any join predicate of any type; however this type of join is generally very slow.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\nIn our example above we see that the plan uses a `MergeJoin` to join the `CUSTOMER_BULK_IMPORT_EXAMPLE1` table with the `CUSTOMER_BULK_IMPORT_EXAMPLE2` table.\n\n\u003cpre\u003e\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\u003c/pre\u003e\n\nReading this from the bottom up we see:\n\n1. `CUSTOMER_BULK_IMPORT_EXAMPLE1` is scanned and becomes the left hand side of the join\n2. `CUSTOMER_BULK_IMPORT_EXAMPLE2` is scanned and becomes the right hand side of the join\n3. The `MERGE` join strategy is used",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:08:47.551",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eJoin Strategy\u003c/h3\u003e\n\u003cp\u003eIn Splice Machine there are four possible join strategies:\u003c/p\u003e\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eJoin Strategy\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eBROADCAST\u003c/td\u003e\n            \u003ctd\u003eRead the results of the Right Result Set (RHS) into memory, then for each row in the left result set (LHS), perform a local lookup to determine the right side of the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eBROADCAST\u003c/i\u003e will only work if at least one of the following is true:\u003cbr/\u003e\u003cbr/\u003e\n                \u003cul\u003e\n                    \u003cli\u003eThere is at least one equijoin (\u003d) predicate that does not include a function call.\u003c/li\u003e\n                    \u003cli\u003eThere is at least one inequality join predicate, the RHS is a base table, and the join is evaluated in Spark.\u003c/li\u003e\n                \u003c/ul\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eSORTMERGE\u003c/td\u003e\n            \u003ctd\u003eRe-sort both the left and right sides according to the join keys, then perform a \u003ci\u003eMERGE\u003c/i\u003e join on the results.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eSORTMERGE\u003c/i\u003e requires an equijoin predicate with no function calls.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eMERGE\u003c/td\u003e\n            \u003ctd\u003eRead the Right and Left result sets simultaneously in order and join them together as they are read.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eMERGE\u003c/i\u003e joins require that both the left and right result sets be sorted according to the join keys. \u003ci\u003eMERGE\u003c/i\u003e requires an equijoin predicate that does not include a function call.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003eNESTEDLOOP\u003c/td\u003e\n            \u003ctd\u003eFor each row on the left, fetch the values on the right that match the join.\u003cbr/\u003e\u003cbr/\u003e\u003ci\u003eNESTEDLOOP\u003c/i\u003e is the only join that can work with any join predicate of any type; however this type of join is generally very slow.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIn our example above we see that the plan uses a \u003ccode\u003eMergeJoin\u003c/code\u003e to join the \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table with the \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e table.\u003c/p\u003e\n\u003cpre\u003e\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\u003c/pre\u003e\n\u003cp\u003eReading this from the bottom up we see:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e is scanned and becomes the left hand side of the join\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e is scanned and becomes the right hand side of the join\u003c/li\u003e\n  \u003cli\u003eThe \u003ccode\u003eMERGE\u003c/code\u003e join strategy is used\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559754769544_-56424977",
      "id": "20190605-171249_2032665476",
      "dateCreated": "2019-06-05 17:12:49.544",
      "dateStarted": "2019-06-10 18:07:40.020",
      "dateFinished": "2019-06-10 18:07:40.078",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## 2. Understanding Database Statistics\n\nDatabase statistics are a form of metadata (data about data) that assists the Splice Machine query optimizer; the statistics help the optimizer select the most efficient approach to running a query, based on information that has been gathered about the tables involved in the query.\n\nIn this section we will show you how to:\n\n* Collect Statistics\n* View Statistics\n\n### Collect Statistics\n\nYou can collect statistics on a schema or table using the `analyze` command. \n\nHere is the syntax for collecting statistics for a schema:\n\n\u003cpre\u003e\nANALYZE SCHEMA \u003ci\u003eschemaName\u003c/i\u003e\n\u003c/pre\u003e\n\nHere is the syntax for collecting statistics for a table:\n\n\u003cpre\u003e\nANALYZE TABLE \u003ci\u003eschemaName.tableName\u003c/i\u003e\n\u003c/pre\u003e\n\nLet\u0027s try collecting statistics on our `DEV3` schema by clicking the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph. ",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:09:20.815",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e2. Understanding Database Statistics\u003c/h2\u003e\n\u003cp\u003eDatabase statistics are a form of metadata (data about data) that assists the Splice Machine query optimizer; the statistics help the optimizer select the most efficient approach to running a query, based on information that has been gathered about the tables involved in the query.\u003c/p\u003e\n\u003cp\u003eIn this section we will show you how to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCollect Statistics\u003c/li\u003e\n  \u003cli\u003eView Statistics\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCollect Statistics\u003c/h3\u003e\n\u003cp\u003eYou can collect statistics on a schema or table using the \u003ccode\u003eanalyze\u003c/code\u003e command. \u003c/p\u003e\n\u003cp\u003eHere is the syntax for collecting statistics for a schema:\u003c/p\u003e\n\u003cpre\u003e\nANALYZE SCHEMA \u003ci\u003eschemaName\u003c/i\u003e\n\u003c/pre\u003e\n\u003cp\u003eHere is the syntax for collecting statistics for a table:\u003c/p\u003e\n\u003cpre\u003e\nANALYZE TABLE \u003ci\u003eschemaName.tableName\u003c/i\u003e\n\u003c/pre\u003e\n\u003cp\u003eLet\u0026rsquo;s try collecting statistics on our \u003ccode\u003eDEV3\u003c/code\u003e schema by clicking the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559756870445_-1085019509",
      "id": "20190605-174750_416169915",
      "dateCreated": "2019-06-05 17:47:50.445",
      "dateStarted": "2019-06-10 18:08:51.737",
      "dateFinished": "2019-06-10 18:08:52.019",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nanalyze schema DEV3;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:09:27.684",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "partitionSize": "string",
                      "statsType": "string",
                      "sampleFraction": "string",
                      "partitionCount": "string",
                      "partition": "string",
                      "tableName": "string",
                      "rowsCollected": "string",
                      "schemaName": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\t-All-\t15000000\t2294611260\t144\t2\t0.0\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\t-All-\t15000000\t2295000000\t4\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559757344878_-1775577382",
      "id": "20190605-175544_1100776431",
      "dateCreated": "2019-06-05 17:55:44.878",
      "dateStarted": "2019-06-10 18:09:27.779",
      "dateFinished": "2019-06-10 18:15:13.976",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow go back and rerun the explain for our query example. You should notice that the plan has changed.\n\nThis was the explain plan before we collected stats on the tables in the schema:\n\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d651515625,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d13126628.907,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d236254,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\nThis is the new explain plan after we collected the statistics:\n\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d268.81,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.003,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n      -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d260.8,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d4.003,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[1:1] \u003d B.C_CUSTKEY[2:1])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d37804,scannedRows\u003d15000000,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\nWith statistics collected the cost values are more accurate which allows the optimizer to choose a better plan. The new plan chooses the `NestedLoopJoin` join strategy because it now knows that the right hand side table, `CUSTOMER_BULK_IMPORT_EXAMPLE2` can have the predicate applied thus filtering the results to just one `scannedRow`.\n\nThis is a simple example on a small dataset but you can see how database statistics can help the optimizer choose a better plan for executing a query. The point is to ensure the best performance it is critical to collect statistics on your database tables in Splice Machine.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:51.932",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow go back and rerun the explain for our query example. You should notice that the plan has changed.\u003c/p\u003e\n\u003cp\u003eThis was the explain plan before we collected stats on the tables in the schema:\u003c/p\u003e\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d651515625,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d13126628.907,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d236254,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n      -\u003e  MergeJoin(n\u003d3,totalCost\u003d77202.976,outputRows\u003d651515625,outputHeapSize\u003d1.324 GB,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[4:1] \u003d B.C_CUSTKEY[4:3])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d236254,scannedRows\u003d118125000,outputRows\u003d118125000,outputHeapSize\u003d1.324 GB,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d1447816.5,scannedRows\u003d723906250,outputRows\u003d651515625,outputHeapSize\u003d1.214 GB,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\u003cp\u003eThis is the new explain plan after we collected the statistics:\u003c/p\u003e\n\u003cpre\u003e\nCursor(n\u003d6,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d5,totalCost\u003d268.81,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n    -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.003,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n      -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d260.8,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145)\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE2(1664)](n\u003d2,totalCost\u003d4.003,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d145,preds\u003d[(A.C_CUSTKEY[1:1] \u003d B.C_CUSTKEY[2:1])])\n        -\u003e  TableScan[CUSTOMER_BULK_IMPORT_EXAMPLE1(1648)](n\u003d1,totalCost\u003d37804,scannedRows\u003d15000000,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d145,preds\u003d[(A.C_NATIONKEY[0:2] \u003d 100)])\n\u003c/pre\u003e\n\u003cp\u003eWith statistics collected the cost values are more accurate which allows the optimizer to choose a better plan. The new plan chooses the \u003ccode\u003eNestedLoopJoin\u003c/code\u003e join strategy because it now knows that the right hand side table, \u003ccode\u003eCUSTOMER_BULK_IMPORT_EXAMPLE2\u003c/code\u003e can have the predicate applied thus filtering the results to just one \u003ccode\u003escannedRow\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a simple example on a small dataset but you can see how database statistics can help the optimizer choose a better plan for executing a query. The point is to ensure the best performance it is critical to collect statistics on your database tables in Splice Machine.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559758013758_54956928",
      "id": "20190605-180653_1971126487",
      "dateCreated": "2019-06-05 18:06:53.758",
      "dateStarted": "2019-06-06 17:13:51.933",
      "dateFinished": "2019-06-06 17:13:51.941",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### View Statistics\n\nSplice Machine provides two system tables you can query to view the statistics that have been collected for your database:\n\n* *SYS.SYSTABLESTATISTICS*\n* *SYS.SYSCOLUMNSTATISTICS*\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to view the contents of each of these system tables.",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:19:12.511",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eView Statistics\u003c/h3\u003e\n\u003cp\u003eSplice Machine provides two system tables you can query to view the statistics that have been collected for your database:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cem\u003eSYS.SYSTABLESTATISTICS\u003c/em\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cem\u003eSYS.SYSCOLUMNSTATISTICS\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to view the contents of each of these system tables.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559759368061_-2054976156",
      "id": "20190605-182928_378425934",
      "dateCreated": "2019-06-05 18:29:28.061",
      "dateStarted": "2019-06-10 18:19:05.694",
      "dateFinished": "2019-06-10 18:19:05.971",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nSELECT * FROM SYS.SYSTABLESTATISTICS;\nSELECT * FROM SYS.SYSCOLUMNSTATISTICS;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:19:21.688",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "SCHEMANAME": "string",
                      "TABLENAME": "string",
                      "CONGLOMERATENAME": "string",
                      "TOTAL_ROW_COUNT": "string",
                      "AVG_ROW_COUNT": "string",
                      "TOTAL_SIZE": "string",
                      "NUM_PARTITIONS": "string",
                      "AVG_PARTITION_SIZE": "string",
                      "ROW_WIDTH": "string",
                      "STATS_TYPE": "string",
                      "SAMPLE_FRACTION": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "MAX_VALUE": "string",
                      "MIN_VALUE": "string",
                      "TABLENAME": "string",
                      "NULL_COUNT": "string",
                      "COLUMNNAME": "string",
                      "QUANTILES": "string",
                      "FREQUENCIES": "string",
                      "NULL_FRACTION": "string",
                      "SCHEMANAME": "string",
                      "CARDINALITY": "string",
                      "THETA": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "SCHEMANAME\tTABLENAME\tCONGLOMERATENAME\tTOTAL_ROW_COUNT\tAVG_ROW_COUNT\tTOTAL_SIZE\tNUM_PARTITIONS\tAVG_PARTITION_SIZE\tROW_WIDTH\tSTATS_TYPE\tSAMPLE_FRACTION\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE1\t582f8014-016b-426c-1c59-0000010c3228\t15000000\t104166\t2294611260\t144\t15934800\t152\t2\t0.0\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\td89d8024-016b-426c-1c59-0000010c3228\t15000000\t3750000\t2295000000\t4\t573750000\t153\t2\t0.0\n"
          },
          {
            "type": "TABLE",
            "data": "SCHEMANAME\tTABLENAME\tCOLUMNNAME\tCARDINALITY\tNULL_COUNT\tNULL_FRACTION\tMIN_VALUE\tMAX_VALUE\tFREQUENCIES\tQUANTILES\tTHETA\nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\tC_ADDRESS\t14685739\t0\t0.0\t    v7 V,XPwu\tzzzzkdzae5mNwP\t ### ItemsSketch DATA DETAIL:     BaseBuffer   : JbH9UHbSMvqarivKJ8rvPQChfK6 Kq2JuoDUXbz8m2BMBr2NWIuvsPkF r0sO4IQJ,vMVnAp3b8HASacmC 1ER3wN0a2kiLhj265qrkZdHtEgz57P4zE2M Zct4EsWQghc BOSfyP,a8RssW 6gCbMYQLLw6B sVeCmaViYo08AL8G6mAdNuLfaUFv4LLVQoH1GmS anZQ4K9MbVq6MoDqA860LblTaZUX2 8hZfV503ETYh9jzjK8FTekVs1eDhmfr Atv4me6dyQ4MrtE BJh2emjvYSW X0lCdUxA,iqzA 6gR9Qq1X5I4HklN6KXGYWbOqwSJXSt de20jCru7JNRx8IuqRNqFHtKv74SvE7snQI LEsQYxPlSuQZe3n 4G7vamRUnNtKIoz QNClEwai5IIN2A6ked0F4UDgs80wyluq qh5uA79rVZ3bQIwmY BzayDOCaWup YcnVQviazMYEUy87tP sGwji1AGF1KE3qKjg2QzNO4zX 8aPJajab3cIlUClc2K2wto dJT ,p6FS,qfTgrNOpxpeWJ092X2zNajzoz,N nwdj,iOF,dpl,0bfD6TLPo OLCFopgZKwQh,5m1sv IWa7IG,38RYw5h,oJe,vFrMOlKoiVeXUrNH 9TqLJ7wcyIpD31K6nxwZj s69uTkgSCOOqsvEVo0  LIMouIFCChK91ySrq syX6quw v1l,MRjREI Rn7fmWc3prSeQnftBdsW1YFSIrHXLRdgOi uxb90ia0MF7e9xFUwlXAizKQ7LooqNo9bVIx rNIjMkNjtLk21Sw0f3Mf3Bm8 kg ih4hPJy6NEvPLFvl wFiK888leW5z8eLH mPLIPYy,JtTVNMv262OdWcVFk41mqgPvKbR 4Im34aSf,c9SpuQB3tp3QOothP3huXt5 jqxzrPD,qdW7 JW1737LCcGBjar,GrtKQb U,KAwjhNvpB5raF4enfnxAFq3Q0wAfGSQU0MWH TL7ya9hL 6opx,t  brkfdGWI5Uvf q7QTU0IE4WVgDz2,IG SyKPwgmDMV2UFq,2WBQP1Ll0FvEO wQEWxxAtCTGF a362ZydaemgqnjsW wDm i0byO8uTNilnO7LV l57A0Hb6ChELA8 9bDguZv2Bw3fmqAiB85F0kXkFzvCFxOuaEZ0t DZhP9W7ht0jhOW5aq,kr EFnA0O51FVnj sBMJyJ3yzEHOW4NY70RIDWAq0X2bv7lzHdbdLI bCYoDh9UrOBQKWxbdwfhNzxiZFoUFNgyU3 e1oM4J6 q2Hru,depSgo1qZ2QRyviwzePpo6Tm gDS HCmDc6Tx5UudQ1rx vACx2NMyyavgWqQcCA,MAzlJM 1ccUe NzKcNyMvtHMzb33tbwg5qQvNnWi26Oq fvwN8ACBM7UJvkOKwipbrC OOkP6utF4n1qtF99dpgIKc7bHGuufqst5dmlePk BjNfgUVOzx,cGn30TsiZw4Rs pRfImyajt4hEJjF ,jZy6 8OU6JblwPmeCmmRKUkcDOP45Y6S4R,35uRhRPW ,YPHoMq0a K0PO,gRHv,JyqVt7oigno,Q9 dVeoC7RjOcf VdxOGCd8oBd8IkaPv3n3,gjnrX1e44jQq0LMKx6Z CTK7c2sSK6Mrw741 4wQ4Ck7RYByuSdWCALzR6eyHD PBB5qVjptQJe JRboArOdhN,nT,6tHwIM4jS B,7HQqSxxm9 f7geUXypEdhj ON0SX14GyblsJYV9ZgSArvX7f XYkF2rmhDU5Xk Z72IRQtC4HL 18OtdEjVscW6TjXpDxO7Y9P4H06vs bJtEP7L5X q3sxCDJ1eZK6WClq6yiCR 3JIIwFlm15jcdhAsnlv9faXz3aIxbjRYl0 tIegHSJ,6qNvEazl8on10,J1ydovpQ cWNAJCDkw7 yLaUDa2hTeWMf1 GdjZqX7DCu5pWpTu nxpBbxO5TgsZpXUmrp9B4RoPI9Ks uMS9IkjtlWDvV109Z4DRYmoM 82v7VPRBB3Nl2Bfbq Ldlk uKY5NLiXoXROv1VFtC8vTUpOfYVEn4yGP1w8H XzZTW9pfQK1Bgt6 qILIeWnB BZoQg69qNP oIAkLupJVJXJvJ,Iatfbc3 P74h,B SK9dZydQVKKVOG2Re3f,m5Kp9q yr5pH2j3p 4cDa9YYQ,5TzsQ0z5 9yBJ3yFb93 nsFBudkVjW0l G7IPUywUP,o0eFsQi14jPXOK4Q ZUvA60jJtx 5Z6A1,im9TiejZuelaFVi18,lu45jPia XUGa95bVfl3OKQ4as2rZ ,ItJFvcpZkbdwa90 mAiChglb1A6yR6oP3NqKGF6gyb5K6OgMRQIwWZ1q 4a1RSqcSEaqiptS2lJr8WahzD cFNe3mQwpxlylYNLqCy9e0utxUt WIDrb7QMx6nbL gJzQCzPaRxN42homLfMwZV,s sMnAtaBP512beSvjTMFuUYOgPFG1, lkurw2mGRe yEFjl98, vGIKY Pe5UeXkOcLaTZVMVEamTFJ285xrB43PR, JZ0DrqnlpEuZPUWUK07f8VslVh,zqnONSw0QHVr 3Jner57VRqSAnm9 L 8CDZ5DXXejQ4luE89Dmk1Z  NImWr2UiaZeC0C NfxOWTaSvmHv5h9eD0VA0,0W txv,5Gf8K ZE8 FditPWT,pRZRVoActT8OXvTxxL3 D2TWI1JRU6vjHg ajD1m,gYY5mpQzhQYerpaq Sz7k1CXldaqStZQiT0lCncWp,wCD7MGyq FbRFkpBGV,5 LlhenjpzG fh5sE 8JG BpS01X8wkasm94eDHxOycYam9UB6ntoTb8uQ gZlGyjsbn A5MY2lVIAFTPKWmT9Ac 6o j6FdZCwpFPxa2hFeLkfvlE1jMlD9lWepYj PUKOzScRDFpgDMc9 qc6qruMwgyh0ueu5GmEEUX7 GIbSviQ5AkB r4vVvDc1QSDbqd4qS mtPkBK75sAahM4MbSdBr2vi2h yf4LgWXcF2V f8q5r7cAgEkgcm1FOdHFAGQt1h15X2NmbaK uBv6E0uHkDsxUEiKv a5G gOzlIeY0FTzwpvxO R1SY9Lp1ZjWMfy sy1ftssSskJzb DYkgnQn9J0JPepm,4QZWhEbtLu X3YeLWti5CyVHPtCLYZVb4B TEE2Hc8O8HhrDFV8,du PCVuruVEPjF1TFDs9TujsUNFhI56sYbC33t0NyEd OimUGRAxdxs5mLBi8IS jmNM4NqUsJbpAFBrwN1Ua4w ahoR8F Yu0,bxW2 NHfxtKSSx5Hvbn2ntHblb masY8czsJZquqbnOB qN6 ZB3tNWxCqHZs8,12XMZEnwIDAh bARt9xTnDZkvVnsOLM dIlgVRxfPoeoYp,10x5VbS8tZzBg2mX i,6AnLUgei2bF lE2NlcOMk86ySx8 qovajSS0SC0r 35OoLwOKd0ElW4qcPJV3309sP cmpxJu5h748bKngSXe 4dRrzRqvSA0y,rf57R80KGTUiQzxkvYH4 DxgxS,YIVZTAJYIQHpmIKD8SldT,X1lr b1pkp3t,QUVJyFh,u87W4AZ4e1nQ 12PhY2fYRg thP5IUKiyia1rEGm,bRa RMF4DQF6Zxp3m9X2 vdujNOGByn5bRs0GblmnPQFk L940GbMr2u2Vcah MF3kKl4hfXNr5bdd,00qFti3VpPEAQ 7tnZhzSp1hF 6L7Uq0eE00lgtJTMVFNcA2NR1,R3 MeYQ8IPJyh7RgRSznM HShUMTBR3UUIqUy2o8nkIrto6Wcip1emWVmYu4 xN4U4zWEoDALhGyp8G4j41CqLux7Xrk3Ar8U kN11Ma01X4D5cGHswmO1amsrkI2YL kFQ9TOmTFvtACQQyaqJ 67YBIXihVgFB0kRr8AF0xD4YI6dGb1N 93LKxrN7O2Ui82,MPog im,nmAWNXQDpUyLGSSf 2sCw25jLk3h6un,MlYwHBbsc37D X QxQ7lld5VXt,JITK9pfN7R8mDLSTHdMOPa7Zg2 WF3oLB8VGYrJBKluq LixoKSl0fgyXFykhDVWs8YwxVmMhlSlONIPmQ2T Ap7MPxHdeeH xJRv8 e,ipEa7n9NGRnkTt6m4JA1R7Sm9oXH16WDz8 9WlsJbhr1lf4SvEGdRQIYM,KnBSlmYJmV8RPQz CUJt,oHo7pz,EAy04JReTOoV3SWs9q  nDUPGl3jahIvdhCHK,Jo KPHkmR997mGFPPIDpKNaWBJY l1OahJhwsFPqcwzfjktrTU3ZKXXgOiRjMD GM43W39gr hVRGLEzXwdrXMZ6bu u,SsJiWWOw,ObZB3N,fk5 eKCw4c8tziNBdRs390KwHN6enaICpUgc1aSCG So4y7osoJ3Gz,k9KYHZCog7i3MepK czyWbwU4J0oYj84OJoMy8nDlna QuO5SJqyilqelcSNWUp7nj0Yzv3rqEggIR QfuAG7VbFYu,8t Gy,izlfEHgtKP1Xftn13KdVRrwCGMLZxfQ6wGv18 QMKmoZ35tYh6jsvhkfr0XUgjM7qsXUzka8LufneK mQAiF PodTZ9jM3W ,uA0WaDGOmB5Y5ujQ4IILC5goq dZxDgtziM3Plo,4le4hwpDbH 3OnqzTqrvy KKRIiL2L38cluYgwuaD,L fnc1cT gi5WMTaWDi4rzaUrEns2bOX5Dn SK9wf2MQv4R6rw5VmwJ5 KZBOfM5z1VCVZAHFHeIFCqJJ OW7VQoUCUNLNbsVRfXs,OH h9whHXA4QBeAeOQRu cZtYBEaO9of3JrQu2jq2 XR3OjUGeV5gb BZUj6B1Itf3Xlc1iSC9aSsH qHJdh XbxHGBa8,7xKoUICvBgcUMUHQjutU u rYL8w3jkeWCXnn7KoM3bQXm 9ae53d159gLqY40PHSsm9OlCSiKDd liyftw1VPqXFsMWBBdwRoJfk5fDpI7F7j SmqO,85EemTuY5vD0 iesPVmeFvxQPr91n9cFkOqFrj HjMSjiICQqK5zeSm PwdQANcBoc 9 YgJ7jtnDvv2 Kxl6ehnc,xOOL7q EXrlMBhfuPxVkYLYdg,TvXYWFH5m8FEQ Drb1H5U0xEWxcMsG4vhWxJ3SHzMEOJLSfvZarU0 de1,Sc Rp6Rhl8Kjp0cQqRNWzZDFBG 0LTuF w29lINMMTCTUao4T,Bnicog209Y0rQ 8PyXRkeBqlxbQGWhZyqOg5bm0SBbTZWK7LjTgR22 4fX502tjdoi SRykSqgNdPG3N8g1KwhNagoGkWlSIbpaqwUCq 97bfZA5ZJ2zR 0kkE9cpcl1LtDE RHp1MTRc4 FQzxcHWra1VulIrB3  uiDD SolA5ooKjfsvB,8VY wJBYtGfX4t tRDXLebRbYLa,,RvWzAGCBtZL6 K1n0C4C5vfVCjVHc9kS3 S5rW,5Gt7eq4o1a7p TfkexHThCRhkW95l03T bIrv9TOM twLHkANHOQ 9gbtBNOTQSsWzp fW0kGqN0,kjJMCKGqNNRl,UljT4yKtR7ItI nnsDC2CULIxlRD42g8l glac7dDgIaB0HEOyud 8HY8ftwBZVNo yhrrPHsmneHY3 Qk5xeN4vYh18 jTeZAcgxQUoKv BzEdLuH,rgIoQOCOvE8t 2s9aaax tsQukpF1AItAynmY9mW,2NfSUlrphrtsmHQ Q0lfi7Y8nSzCCLt6i1PafQNXyzV yamxIxY 3gt,ivruaiPSdTTd3WtGjPGlXWrW1syq LASLVdiomSc2k3mY3720X4t Kd2KVRB JlcojfU9BNExf7YAA WCBrXlHWWP7DQTBtfQaoFOEz4EwVSJSbhBtEeZFH g6qIjUTtwU7L49YqTQZpSAJ OJ9OuZev0b4fiaIOXLVCo0GcUod z6wvRyVkCaU5jAt8QJTIJy0id,QrcPTnWzI0 mKl436V,DDKdLBBzYA,aB54a2,WkSweqhrxxgUT 96VFTajwZb4U2kbmtl yCza2 fufyBR5fdI90aRfPOIX75o2ywLy1u Y2fJpEifMX IP30nk14Hg8aOjz10Cv cePV ND8a nEcyxelZBrA1OVn16wIhFha74rJurPJs v2Wxe6N5nJuxAKM3LSB7QHBVLnO59J5Q W3gNVhLQnyi0jAykSGxLt5 5HSv65vmprYeVvutLGQduAYQc2YR,J3NiT3c ,iDDC7EeJuHAa7ZY1KIbCbBpnboKU2nON89uHbl  lTxbAuocJRgrIQsDZdHsEJQawoc VFiQgi1ZUq e,dIqE8nPZiMvCx 6 5G9dP72iDzsiGAKc9UvfyMuKhfnyzdSH 4JvfcgNSiU0VHSa0EMMErh5zeIwuYu oXly8RgwLNsR DvGLiAo2oDxE77ZMZMXXIPJgUw Xt3xy5WElmA8oPgLbOIFBZh qGMtdbhXw6ME,NPTGLEWeRhLjtTMuGAtvY d21IVMlCF3NS01Hb,QbZHqueoW3Kl1 7IDWgIDsZsAU3ijw42ZGq6GhKzOudaGVJkqV   m5rDAnCqwtMtoIbdzNOFFnWvOU14w ZKf2gxk0R IhTJaRfIXsIyoeaOAYe7D,egFuMzhdVhg9Zzi MPtcZSD9HWoS6n7sbRb56FM0Fzw LM8Fu3aVD4Dn eS5uIekAlU nuVisiXXUFFdXNPwXDyaT9G V7Sc6umUvr6iTdlUdmSKlfnGK OeeYFV7f ORR ,LQXWC7mbvL8M9obQFcHOZa UbLwFmR,d, hAx7HAF04HmJFahlOJ 38,U2cbmL92difSYNpQe09g9FbNFIzoE 82x0ZvWNyUFXyHw5RzdiPUa0C7gh 1UPQfPiCk03jWqAk deUHEca0Cc TFXM,HnvOl iuV0s9, WOKW OYbS3IwfChhFjqoR1Yw egHV puPeY MoRZivYzXDAvD7 GmB03NQ7oi XTNXobD8ozR, Rl2Ioj7Q1rr,bzYs6XxznAWIAO1dV0ER ayIlygOzDO5iAhwZ 760l1pk0cNBhDCJwJz1EoB7doHjG6tWXWm hsfnXBE5oWGLION9h8RF6CcQH2JG26k RSrTFBqAva50CqHTT4T,ARMbvWCL 6SB7hvDcJ  8kSdD6g5UgIO1iZVFLoL12hlRvYAGadC VL2sGSxRphWiPZr4Vjnd 8OH DFaDL wVJ5PMd2zdnnGqGvG0 QeL7Bdb5bZ LXI1I2SE9uuA IfjZdOb,KzQ aR7KJHouQobSxZ2dErJNHUwt,JgdGvrquCbHU JzgEgAwgW2gnpHn4oCTbynuH0zsMqvcAXJ WEA6apmya8p9 t8EEbicEL NflhyvmyyQ9eXF0hoxHcOGCM,D DmLoIUT220wYC4pEe6qdd9Ip09K 1pujAzrThtOU6V2L2NFE9q t 3LTwEnUj1ThMZ6cdd,K kV0WDRFgHxKcydJRyWf ,pVtjKgV BTWgbZm9uc5aIG0RxIvlIkhIVAFjw6jxec m3MT0W4zpWxoxaNKAH4EkCB m QMvkbqFoctd0EQ7EdRer6FTuFlYSO Gcxx86W2lq5kENcH0k,7VKZv3fHkn3snDVxmXx d20hG5R,vYWli lLrbUPcLAEqV H dOIbRqMzO8717bklUPWYzcXa9qU6YGo T3mqdm,hn1V KA9rkg0jOAILz3 ToGmpRagsisdeqUzBF9lrpKitgVWs f7YTFR8RTi 7Xn6SIXCTF7yQ2XSgeTcmKEE09QbgVp,IiL1u Fyy7mGIU,l3x7d0EkOL rJDhHH8Ptb3KjB2 W wdlmCXrbspani,RkIXJA0Bs8cBvYcZbI v2a462 gDIyzA Qilqt2i0eJLBZGvF1K5mCBq0XA3haht915v9ro oOdYWmrJO8TUaA7oIyiNwtUozP3M 7E Vjxf HVfoBxdBz ANmMXyD,k, tEoWbRjH5o2TdSZBfOsmCG0lA3oWALesCbTwgzyN 8gvuHQX2xVLOMdXcSaj6XUw9kCxdweWvM,HGk uUi3exbJn3r7ewaIlYq PacNyLxFpFXn4KUJ0FASvrwW1gCd1NM 59mjGBlErAmPy4,xWvj2fl2BeNLkJBDB qULJMhVLFKS ki7bOppsn1a6jUy F5 R1Ol5,v6,rjKqulqpHJy QUD3Hp EFKrXgaECCFC6LU ruquItuFVdWFxDD bQY9qMajcK5 IY62Dr8 zEv4ANGkj,KiOsGvaXxoW1 ZTg NugTLaV0L5jt Z3 ,2px,rIuTpYWB8,6b xuswPykhmPQkBu4THz BEyDtFOnz1vqX0LOucU7ZKE rMSHNTahFANZW2,xVzlsYBqayFsD iNfGwqhqZXmUeAE7fNFLPntJOx, tswupEPeqqTIwFus5HQIwj5cJZ fKvBR QFoSZGlpKr1beCkzvLVseNIkh2Hw3h mFeaIMghgp4x6A,AwkiDVzR7zOlc9 o6ano0PctELYFf MzDNeCL4UiWMQgaJe7rcW B7 8jx0PZYyDPud OTiAPnZZ2JUxCChitMYVmkZ6P 0r6IKAWrMHO6TtFVe0UbsR8HB9,e8h 0fBgouSGDJF3OnZh75xreOO5cKObB92cYBaHOw ymnXtSPsonU0VUl5vXMpm823bupp 9CAI9QxeKy 1UwrDh5sqhvgC4ReAnxQ3FJSd ifY6n5HRWzurLmWMpY7lBSQdtOkpYtgnz5BiNG9X 20LJDvtn,cgfZEkymjnq NOc2sH5MM5oJaigsWkZipm1FIjms8Rm3zc RpqdM lTgU8jBV,qmBvQ,H3gYMeqX3m uP2 mZptwjwddaM4LjjKT4LCSXX MSIS,C fK0GTiyROgwdDZcojNHhQTZfPQJ x7Bsg 9Zt5 hYG1O1bDZZM2DCvrd YTmbHxN5Dq9Dh8miV0 RCe Wx9,WBp GUGUWw,OSEOWA q72FdhizhpCre9gBXNHBYC3SYvXJo5ET 5Kpu1u6mTmWrWOBiKwYenWuwWPbRpf t9kuFxNYXZFNq6 KgL eg1UYleS Sz9iKWqAc7r7,RU OOTmjrBHw4n7vwvnR5bmxf8 LUsIEeWZ0vSlLcWGkXFiebn7bKp,mVMRXzGXj dQsbABJk0yD,m33m sbC 2uM4 Dy2rxFShT3YSFsLZg9, vc3hLkY0udyCzd ZxRvxdyhEOAFHWr gweq9dqUmay c7iqn3dsaSqUzP O6tNJukxU3,m4tRxzIzbe06gfyTxobuU0Fmu AO044AZBKUJpW 5b7tG Fx5FfrU7hQ98RLzgRgm Lfle5GdpIRR0jTaX n5ej9OFvnmGxuYOd7qrlBfoBg ISFV6kl8gpICjXq6bs4jvTz2O0S3tAzFvwN l5 yP,NLMwmZr5HgneQ7xSUeFtexZKP 0GzB0E7Ixd9QIfe7Aqc1rg5 Vl3SBNZHe3wXm6aD5BOb0tbnqv ympb7R2DJ1aO0mWgVSGhstuCoZf1LBHG5ocC2 sKv6yK xUn5tNv3DcJVgvTMUHqFAqU moKznsBwKFtndqyZ3 iBq09RcS8cxecoGweQNtl sEzkqMFltc80gAH WdYYK4winSKDxW4aicZGIjMbpOZG1yi2Q4EXlE3 oGfzipe6FAUdF8iEl 6wz0JL JSV697tVdTk9NMdSTCCcO61sUDIvB cWZkO1KBobG33 FWxRuwjc526F tOqnnkMX,6g6TK39oKPhL hSor8nvnugeHDFmsTLzmLDMU9 Nd8m,Q0p7cSOBUDQYUZK95pDLFrii,QI htKAUVaHhBAgzBKC,jQP 0zlsuxAsu T7kZhqxsm37O4sWWE9L9nisS3Fqn eGO0rmqn2MJD6i TbHceFQuCBeMpjaoAa 4h8AFw5TtXYb P2z9,YzSh 0H,lgfiV706u8rtKNld0ueVlKP 5oYdXj1ZLQic4KeVAOQEAM ,LMcni7xznaCSTHK Rak5l fDOBY,bd0jE5a7 ntgXpEMa6vc,JSc8Xfk0WiNA58c5 oZJGRxYYXmVg O gPgTxYn88Zm I9nJ bdN1bKjtC1noA1xbYs, 4ji0BP695llBoqUi7UM,y7Cd7WUBr MjBYDjRdn8s5HQ8Va6cbIlmDld 6BYE0qHqJbjM,zaY6E,N qSAz fhRHZvSCvOXgpuQG v6oj8D4duoijTVznyenWxXwFgIp 7Y5bQ4zN8POjjiLRlOcma2HZWz4Dt nrj9jHlNcLqQsSImma iiwXlIuv247YOoFD9NOp2p RkGcOmjH56C,9Q0Tlrj7wI bW7DCqg1UpnaTTcaQB HgIgh1L0nVreO4 xdmXBquPHMdtq8MryFr 9RX,LqjG3FQzPwGh9 DxW3OyMT4dgKlpZacErLaRR eVbr67UxkdjQqga ,qwECs d154Xpi1NYEp8qztr9UgWIarWeBy9Ol URMsswB2E9,IaFT2EK 9  Hgf IIE z7lM,IeppK5h0kOxV h9cyvMckzbYDwdClTxRc Bb BUejKB4PIz9tx5k69DkRwKEUyP0T0i3RpQzLgY vPSUoHDRM5o3Q R4broJKzU7XA6qszBjUap4JafLp,78Dp1rF J7NmoIK747DtZdbO3ie366vDrL3RY vSf, QM74EgBImUPylwWuXDUDUVuKTR,VwYPTjAgq iT8EC0dOq r2qXUK imcHH4BHu9iMWgsF 90z7mThXlYOz 930y38MPVlzlfSakIxsLi,1ojrPfNblOd u9LZk2d5mGzquLOV0b3,qYq1qDALe mGs89zFRy9kqr1wiQn5n2RCQ3Ob dV3uPZgCk2gbnjOqU8GxlpoI hM8vpmo0T,aUTGc PFh5mp Zy3eA4tm0C6uHE5 2LvlLNUW4tQM1fWe82sC9yWNNq FRrzrx1GCRTIqjHrx2 HWj3sMisCEEg1SPQ RGs 9UX84oHYJamAebO7qLy9gMkm6bCdDgxoDe N3ypEOdc,KfGVwWEzIg1izDGblt5BK9kozV xdiFHsIqkktVgNYQd Sq8dF7Rkoq usKHrxXpv2DXu qRdzXNuaa4qul69V9wMucq8OpEOhA2,l pMQo8RBUgO ej0cIEnPyGJyEB4c qC128hMliGg8YNVjj40BKjG V60KKG4j5wKRJjft9 Q66B vLmzGYNlIhVePRpOfOeauDQ MyypqrxkZDW6i,5EQjHI8UDd n4XcWcFsN2sP64ekW XDm ZlumQX Wjj4AIOjGc95Iu1WVsgBRzNqFlaw 3s5cBAv5DKF8AV7yq2JDZB4Xh,1iuRzL4ha69CT rKNtWSe1TclxxbbsAQf,enT0owbo SJ8 Q7o9M quplBU5YkYY jhn6w9jZ8CcFhwAFWqYZadBGOQz8ZYR IQy8aCa1Q9Eo752FPjmdomAKtmNlUVX n8 EUJGpoKxEGTtvrBGDt YWGxyN3Pi tymcgj8JNr0D1L OsHV,ChXJeIONm91WzT08 AGKde7op WT984jXPnUw uvSxo0GAOAhnZEe8ceTLSEhmXJv5RYD ct s2EUve5Z7qye90zW34SVrLxbiaxKdhPAD qCBa4NuNyXplM Tf,l2EXvksvBFhbKFuac0K Wjjb 8ollY7kLwI2hJKP9dVuwyN 9AVr XAJPuwGGSD3MGKR BNQSHWMTeXWM HiS2ErJ96Kue cHpC Q7wbCoXBwYxYTiZDxyHi8KDuJXUJrKimJ 6SL1WuZj6cwaRCdaNY0 yZjXhWL6yQv0pufmEcUQoTVC, yDncJJ 3emQ49UZtlfjeKPKIqkt 6r7OkJDoyW    Valid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       4:  5qhPAlDp7sOTKrpL8JXdGpYSsiwxt2I6B9C  LKyFWhUGa  XLjIBGKqxr9wvRFV7Oa9WTzSb  u2A0QYAIZnzddS ,ADlf vdnV5 ,Lc7TewjEFrdK05sPGI4s ,Zl9P5VeH1eSOZ6 8DAoNhte1HwBFWDRfC ,msX5j3mW32PSrlVx,taeltmauxILflFJ21lHE 06jj0lCaWbFd 0Fbmmgd,er1mITXfqLbgK 0RdxukQuV Dv1SUvMlEwh0Ok89Z8udQ5Q5BRDa 0iUnPRyz3KaLiGeCEw9b2hbtJf0AUKPZt  1,S8uRm2BHOjVPT4  1FisLp9lCl 1f jVX3zgD ds 1qbhb8dpacy 2,ygIuXjjkE 2BsNoN66OCx,r8rvC3K401NuxpDz 2NVPVktBTuYCo 2clNnJe9qyllSI,WU,tAeW0 2rixI11RH0tD0t00iWg2m,M,F 39Otc79bxAEj2QFg5MLdH5oE1UAWPoobqdP9Lul 3L1O7eIHgEU8mcwcHQ9azhzNtRPhd6mqa49Imaa 3dnp3wixsUL0,ELNttyxGOPCwQwH 3rOg6oV1LBQ086fZUfyhtEZZTiLSQ 43V igNT7q3V 4OODzYxzVM,UB88vp1 4a0iDNKhCfdgpAjP 4usyz3NpyFO5AwLjPkHWLwMeQS3dHVliJp 5DiMGgcoitfOQe 5a99l8fP3kKz 5omVem baYi4OzXC8CSsIM46gRVkg 68GIH6TpoeS9 6OxF iMIhs 6Z cthiI0iIckPSEHj brnJLGE 6lTEbhKE7z7uVxJssT1c9fLd2K5m 7,ja6jdu6ZHPQBlRSt 7JD7CWUxm6HZKx6VuQZ8uw5fIO,gKk2euo8PUN 7bA43hu6ZC4hQlALVin87x0EtNJQ6Xc1e8D3 7nF7R0rq5m17C 812tnp5NX8jSz4in0dBGSFmxY99f82goA01yg1o0 8N 6,3hCAnDkFFmiXagtpgpE11irCtMVkI 8b0rHqRBaCVNowiIXsfStW8WVh 8ufv7EfHntEdXzTr 9CpAJt5ODvi0s 9QcP9lvllG6mjZKNweairc1EWxY Tgt4lNUDb2Wf 9b JoCkBtHHAIVgeA2qFfjWrsc,RMErS8v 1 9s4wPVCUIh6erSH7v AByqfAnYP2LPRvxo AamKzA0OAB8YpRfOp,poz Aw4mVY87VUoWYDbdLMuOgc B2CwjUIoHoO,Se BIHcvSiTM,5EwR3 BikTkIwtohvBOIJ8LX9 Bs7Lc1m OK C9t0S1b4CoOyCTVBPyo CO3DBqfz,xiSx,Sz7Xl CekUsLr7KffS69uHZhEEF CsKB2x4ZQbP7g,9ARKy1rJz4cD6L11TIn,Ns D6jfrZBKxe,Vut,,Mhznq4siMGE89xBoPZA DRlEaChTEJcQnUSpeexWL DbIFoox4,R9joXH6R7h uAbz DsFdIyy06vebGSyuacGaUuf7kpIQNUxO EEfuHWA,vVGt,PCDl86d ETferybyIVT22GbNk,AhZOBofLSlT6MAvSQN Ej0S,qLzM561U pyXaUBVdrEK F,37JV91F06pclq5BeEOqeKSfOCHiRbJ64Djm4 FAb0kluczWGjLwn9JXIq0MS o8BzLVQLJjAfPltw FScGNhrG0KdC2crqW32 FgfPmOIrjLTbnj,ItKIQ1Xub,XDyEwXw G6lKb,q9fVAadOvcQh60ev PL6O,pY2 01 GIt0gsh1WENy9baK69SQRb7Tzeo GWdN7AyIDki6gffXXvcJK8Uqkflziy Gu8qPrmJDVt12 sZtafVZT36 fAyCOsEt H5x PoesIxc,,e 3HC5vk4vUXymzds0JJZFAjK HNAZWhQvRM2zqxuzt 2p6,7QMBz94RuTvEWn HYsTcE18ZXuH Iu0Ro,hko9ltMxcisiZOnJP HlfmqA87m6ZNpGoP I3vWsbj2p9GYRFdY,W7Nqclt2B1GD JBHVP0 ILInNutgNMQgD05ZhndD,,JsdoexVPUE Ih1kO6zdreYmU2cB2U cnsk,GGKwh1 IxxWmSomxEqApZPWPGLJBem5On,fg1jL5ni J5Xtp,z0f5QXCsD,hm,PwtaPCUc8CO1LJq JPiDma7hCKvMIZLNxrBA1o17f07 JnhqWDCG7LwlL Jsi5SLxOKdSpw45kZypyuUoKyYQoOa2 KHXy 1K4Nl0plUgoJ KXxQEbIjBDIOV Kn7KYIKCTvfdtde0TXLKpzj2wFTMsYoolLgqyLZ KzjPp0V9XRr3udKI1ifVC4Y63Rw3gnkM aUTEfZ LH20nRpN4c56tgY82A8HQ LYjv6ZeUO8g76WO,xp2 LjQ3hFZh 5qcpIV0Q8OB0s M1ervK J0AZSI6ytY3Uh5HYZvo MEKJhXz,zaXOP8NQML G6DF53 MU9oTfzwgfRg MfljnoUtLlFO2WFnKauSeHom MsdkeDuUntmjoSJYfYehfX N2C6Ti8bSfV8Db NLaHZvkeZ0BnzykHv5RYqn4t6v NbxYryIrlT0Hhw4 NmX,JB123qjkK8ivGU1Qp3ai6QzZda O5KuEAyow6BHucy1Nfh OJFVtS9 GpBTlz,g218qLBN7KlxrVB2r OWM,UM1eisBxLxPlC3edkg9nBB,p,7gx9 Okgbryh4HDV7nmc5zpi4 P2mstvrUwZRBw9MsgThTfp cvzGrEtzF PH9CXL4n dvJsC7erMD8Y7xbbPSIC PWIkywkOFJYWbbF6wFGvn5hB36vkgRGcMO PktVowj3GvcRPLy2a,54lox Q4tyYYMs1zr QISuwETyUa3F6Td0j QZ5mhBLPX0w613Ad6hmWpROzkP2d58Z QqvxV49Z1MKqYAXn R7FlyLQJDAbq  Gw ROgfQygs7Wq3Sd Rb5EnPWAgAyqWpD1zM1MBUvV89UbfV RjQMElsIBtX4CCwU  S47TE9qcaeX7x0nb6DV8pZDSr7dnELM SPcct7gcXJZSnQ0dUD SXVBtZ833oxX I8Hce1UcAzSKehVwBg,ZAcjpi0b SyXCFGIAcwFNU3aX4 Y6zOadhlcAgplf7nhPL6 T4k ss5bk4D1,FdQ40dj6rLeWASoew4h TSDgXa8CtQbxce Tj3NhkTm3K8BrIq5KQEgCAqurR TzBZgnzj0DvTCeD8 xbocvkrVAU7xsLqw UDTKnaZT2wzN9,mUIQzy2kzKMZWwyZOj Spz UUuiJ60NMSOmR1N8bqE3LyroKa92ET0 UjpruSoQjH8GiE V13MpCkBivn7GddQ0oQ1Mu,PCZwAadw VL5vX98Jy8J1q,l Vf,lghzBkZW1SnktjoP5kIqqZEoKr VrKckc,5YtbvhKmLEdpo0Gdg5vklR UtOoTPgHOU W6opS0r,9E9JaJZ So1eqDA WLdJSG1Dw9rjdKmw,ze72TRd1rkN5uB WdWdbGk3VQdgCZvW0dRO2IHjvRxy0J0 Wsz4o3TZUj4ZHJvfatzxHFEZA X VrhKAROUE9I4wvHYHOGCHY sizg6C0Yy 96D3n XERdMfIZbIzno0AYLe,6eJnZ XUrwg8qa0RomiI lY XmfXhM4dAyxztco9qmALShFvw Y0IYeAJjTI5eF4u9VjGpS28UX9OBKY YD6GW0vFsP0uLojvRkwaRlH3KRMpMNN0LDbKrpo YLbgKxYx131DvY6BE3XZHPtyd,zO5mrvICeR2j YZ5h4l7jV  Yshs66x8GFC,C9ApwJA2Y3Tn Z44E nVMIriwhejPSLm9i5dXTcDzf ZIFhXaIdE3Zt9eXKUqoCQKH0Ze34CECzDohQOr2s ZYPWDaNViSge9 Zp9nMt70CQ4Tyflr7IfAh9Qg,zaiPsaAeeBVH a0VYulZYajQwUoAI7rCIJk33c9eNtQT7vKw03c aEks74d2MuhhOU aY Y,J9RO3zjLh tjs N89T40KgyO00AmFtgpb amanuNjYtkbmkf7YF6D7x5TKP26LM8 b3lhD2dOJuG0w8kVZce bLOuLTTJDF0bnMJn67X d7kHAFI ba7ar83,tXl bsx19WrGPJr c648IjfNGw23cmaak cMeXpXPjaoyzKsW5EpcU6iNxCaLFr ciTJwS9IZR1T csbZ  okJ4l d4kI2cPpL9K8kb6JPYk5nwrS4I dKlKWcRuQcmwBSL dj5diGpNFE6VLpzH, V2wZe9A7bXWr,d6 dtMPXrVGC6sfSXv1YOeDztpI9YysULUusSY e95TeLmReEzDf VULu54xaQhW8jqw7,AiqgtuM8D eV33B,UFSIdFw R ejtiH6pxcz W3lIE4eWQ1jyHiGeJyI2lcqU es8Xm09Cc9hGDVeGoTf8yejw2g19 f jrADDfKAwFP fQYnlIuAJ8K6uP1M fauDSGkf8A5MXKmr3WZ foWiwO6mCa dhuy4EYUVHbDFbt j g1Jv9Xw8JDwUZYFnn gHEOQR8z9fHTAFkVh83YjgmO0WG gXTK4ckkiXIj1lJTBqaiNqjh glN,BtEEVT9L4fNgKYDkOU1Ih7xKe8z, h1Cv3WnU,xq9TOi9JHtQA 6baPZGFETrW39r h9Nr2Ldrde7iRACURai4eTix, zE 0xYQsoG hN6xonYTXtbtThxoMM0vYhse5B hZgh2Jzd04Y9tDjRjt0Ayi ht3juemULtjLTzjqNhdQIObVMxhRNBqYLaOep iC8vWJu3fIfoQqclxISql28jsgcozym1T iMer2EKI3YYMUxqjYG iajE7n9KBJ2g0CZ4SKNPt  RVPIuYgcifd1vcK izXOuA4iyrL5KS7O9bKY9DSpK9 jEVsvwRKHyphgalm 5SSJXanz,lc jVIJ8Uu q ReEyY ZR jlomSRu0gmYtwJ5D6ogTcvMEkpKO2BHlv k gUGYmKI9wV kC2S844wfJ1iaIDxhZ kMBKN0wvJOx3aiRcWweqxWjDpp8M9EoJh54qyAM kfIvgrDcxR1SaX7jMM7a367v0yW2 kxFNPULfX fhKf9x6j64W5g2inC,fdBtQaz1GIt lCkW h4zym0PMBauZczdvdA nFMPC7 lURMW9M87ybQvf0Vo2LAcJn3Fj ljhS2oNDw0oV lumqIGRQ3zynA m9I4UdyLG286 mMQ04xswlP JMyUG6ZTkkN mMOj4Eav0J5LyT1CMYICY6JUnVFyWRLiMdePhKb2 mp3OMZ,M0mEskaC2wH,6iTd,0pVNlpW n VYSf0wv JFsdcvD nFlp3oZy7Od nbMB3P5qXUZa nxaN2sxXD3W0IIQSLc8QVxLfXFZnhehu3LP oCFgOcN7CtMBbIcD K2IvtVqGGdk oPOmhDCW1YjOyf6N89XrwTv3fNOFEv7d ogIT1dfAPiXZSuJlnJ,I zIDUANjjNtR6NHYe3 oxKEjm7yZRBcPLv2dmrc7rPzxQ pI2a3r3sd2pA22nULAPo4Q6Eqwtl0xCWN3v pVZ5OMwncDJKqN7J pgS5XedMMCRA5MZ52jOc165bO0jH pr6jNQy0YQpPSpDytshysbc9jK6ctid3 q3TE2Hv2,2Eu qLMSPJxsGzDUngB 2tPlq qcAZT9JqpVHJ8TDoQrXIBctMps qjqv7WssP9wnGrG0CAp r ,vIw8QJHZza3ZNFGaM3iKh rLUQWDRoi85gKXkKTAsqjJi rXNqgRPnTH rjnnjUWGDsUEUE0u s2XcOPHzFahub5JCtT7imb sCJB  JOrR1p6I0M sO3iVmNT sszEXqLZl4I75f sW9,M1ml80At6tcOQ,bJz,7FgVrYoBw DI yn8U snHh c1ZpyCUDIhweIfDM4VIPJ8UI3nHuS8Vqhtx t9XI7dGkeMC4tnDi tOqdJcwYU5 tT4wjpH3ycmHVS34 tjO24GESJWafuohaDqHM tylxUpwavxl3Y,Z uBcJh2J6KVr4ydDFtRIUqLzUSWCVsHSe uMdyhYtTeLQt1fkxKZ9Q EIWflaXga yVBB ugJnjrnzPV v2rnd1OCY1mc4uthr2v2af4 vJllm7RuXYLwh8mn7JJm3hbg7 vY0LDU fcp8Ave vhqb0FtxwPJALO8Px,sgRU4KI9GKLA w2OFEHOk1BxNg,AL21i8XoSfOqqQqbZ wAtwl1svU,qaRJi,k wQ7HGyUKYfbIGI wjugrQEf633tITsO wv0NygddvVtpi5pyWmy xHOsFBuHbOTNld4aivmb5knMZyFpxlAKJqR xZ1JzOe59ds7IXbivVGNnhFcF,ZMLyqmimTaRU xnrLZhlVyvvtz49V3gXac xx2j , HW3StwSMeRZJCL fV y8rl7u r8bQl40jGMXO ySNBoVLjTOcOde8AuU9dfublyiTKSCbayZ yaEQlegbdVF0g6 z YpcbR4TQXII0pAnUAa,7tXAET zEyxKy4cihTsTv, zU RzBs3kh5s6lEfOPd 9KU FzT9R0uFstdj1 zfexQQqkzC9yg7 zxYtLueP7cSY1 okyo0u9        T       5:  BDas8GzHHZ  MYopriv6GA5u2Q4xaGrWmKm XzEJfyZ  hZctgVNQUPKscumWehnzSZBJmxF7,CmqKQr  wSptZ670PTCPa9lKf1U ,6zq OhZUSvnOhpaWo8iHtj ,N3EnjDZzvKf5kxpYzIwLHbZ ,gQpUS2,NJfm7afElsfE0gPqmpnifsTsWvN ,wUHfkt3Pnsp3TBykc4aMVv,iyY,mx EPRuE 0FcMaOTCNYghN8UoKd9NVChSh 0TYMqmTUKSc5U85gmY5yq6tMamAUg1IOW1Y 0o8AEIRjVl5d1P3AwfDh7NL0vB8Ra1hN8e7Am4A 0wS8xptMBvuaq6,saO0H4mUW5kYegP6 1G,OWJ7SljrAaZhJOAdsCGK3QlT uFmz1C 1awowt8z 2mRX5cWwxJJe,9zW7ERjdZ1yNo 1kM,2aiWJTUIqiGX 1y68zoUdG Allehi4i 2IWk4OIHaldkI H5VjTrEEQOw0e 2Vhm6EEqT4IkGuWRD73Q 2rxazMGZewpckKYjM,vk 36X5759mDD7gEeWch3O2tAivHmSB9d6aeYl7kUg0 3PXgmdF6iYnRPitx7HPVc 3bxXuJUoGBNCqoc 3sePWYbAWfgqyyCAIqVun8PXZTd,tkxgh4 44zb9Z5Z SxbhJdFszxMVWUzyFXv33hUIVbdMl 4Iq9A3WH3chB4aw2UrYPAAtCMKRPaNhkhZTY 4YxnSKjFl4gxypk0k6TZp6H1Zcb 4uZ249J4zE8cJHUFTKlf 55ilka7LZwtjBc,2zZu5bFvW9 5HlK,ehDDDj0,B5O5AG0 5bpKoxYFW5GFXeUlPEt4FXFg7c5tZFcCX6S 5pXW eQqLUKydmq6kpZZgJEEOriL 63a80DpL6uzemg0g32Y4CAxASxjrnv 6Hcs9rDb8c2wyBT3u9JgR4LT6s8 6XM7tO0pbB7svlUjxcOVCRUsqK 6iFTWWpOCs 71ybJJLgimaCBKl7pM48f7Q6tgEWAHX0d 7LoGxMXZL8fO3zSPm3WnbsoJkDLakw5k 7YkBLGpW8xUG 7m B McCicuF5PGT2jWWuPl6 7yWUkS3U0UUey8pI7Mlgmlqm42 8C,W4IHUYB5F9W9Pk5Ac 8ak,YtOH6ZvYUvhwT,IhgUaz6UyZ1Z 8mhCGLx6XlZI7mqf Q4CIDWeCDeYe2nD7MAVRPa 94jckkVwyEP 9LUxm7Od5xyLAFwsLFxgGCkzUGXWWF 9bmj5MH3 rPEt 9wY i0W,iD59sgl4Ageg8oMzggTNWxML A1q6nm4hsjHe86 Ab8r55Bk1nGjo7sBSk AIpAopWc363DXSNCdRh2RVGOsq AUmJrQlC,FV AkL s PDdTZ93r5C Ay24Seg6S5hlbb8yIUcK BDH1xkglL4EVHtL85rZ7E1 BatyTzJ6pw BmTINCRNEJTkwExS,8DqRSTiz1bg C03lzE3i9HgrU UAUy 8QMX CKRBuYydNIPrl3tHESMm CZ,7Y FgN,wjpRCY6fKYyTFD,,CzlhnJlZ ClVCqN Y8Cuj D,blINSJ0n5kSk1uHS9e2kY02LmjA9 DL,MBE UujFK3xnz Dd71ME adrw,qjuoColZV8aOxpUCG1pkeVB DuRA7mzw5AdKwC93c86CKPigV E7fHSYevR1oNb4cNemOu4A0j EEHVBfnDz0Hu EYILwVplRpNX2KbX,zKKe4GmOjru77Aye7Xin EnHkwIbMfqG5QXykwxpk F2nhMp5VU5LIp4FYCVXEXmh7XBuuvpaZNXo,zvI F9xbc,6GJ 9fPVsxXNGpwKLfXPP99fas8 FUpLp9RNxRLuAK mnIrckA9B07Azu FrBeqOxAeLKSdx6quz1 G9lPjhtrujJXuXrM6ozDtVlfyDoD3G72oy6o GHuE 6o X8JuMPpqLRIMzux6 GW5UN1WR4KBt1O 3G,4jG40I4 Z8J55 GrGDHbeIAJ,6 6LNEAPbruYbv91,XY,q29qJ8W H3iF8,y2HnpTIgJz5M0DPQ qxYGJ0a HDX4DK9wfG4Gr4PFb7,SaN5Su7s HYl5x6GSa2wNhyP,p IlEoyOM mN HnGuVwopfe7iIiIU5JMbBgb,I I N fNZ0t673zHIrV2 IDtY669DMRKOG yi,tHf EhSBoUTWY66xqV IOvLftb1M8nW H09julVTkP7 Ie9gr20OCHuAc27rP1ShwXEZ9o5bU  Ip23PVvGG9V86HINhc0nndgoO8Uz8BPJI9iDWu8 JA4tHXFcw6CXtvMI4lMZC,3lctIMbKb JNNAnQSxY5f8aax Je3WmtVadI8KWHt JpVm1eWO2D5A1iVlTKsj6PIxydn K1tRJaSK0uotXomYL2ILO35M4 cBCPjCFvaxYMK KEeCelgLTvCQc8Mh KVmEbfxo1qfsZd KplsbPpnTYmyW9tWSRMqBqm1rjAwA,sswfjXt8 L5rv719,2d5YmjbX,,L8gPIRWY9NU LG0SI3Awk9m3tSDYmoJV3vMZEFvfQzPk1TNu5Zz LRTbtQKL,sv,uqHJYL0v4PsV1M3D LoW7Lo1uXMODVKZ M77bmLW4W,OR cOxIKyGR7nvMRka MOxENbFuISqqie87Hg5wOwJx MeIWaHQXy5UYPmtGXCKleBFzdLWm7hMmxnzPvu Mznv4urIz9BO6K0oZk i8L402o2Rvx3JDCM N9Kf,D KCYdXTYf5k NQDsU2g3Ef1qAkAA2gG0E0j1u NhnPcuTXcbZxf8Rf9vBJ9rK O FSAun dY 1f OCmK9MiGtNOyakfUnPsT OSK,CyYyPlclb9qFPCZvBXMbR2bvEfJj6UnL2zCj OpaBwFvWQ5inPqlCwcIQFc7LKZ4aN3XRqPD1ng P7xA 9I7tT17viCCxDCCLmh3pm7H2 PMcSHsCHXj PY1CucueQr7noGR9ssaVxOxNc3RtbE1vra2L0H PkDcNo7MMiSi6pbiVZ3H5 VY9UFkuyby Q1HrX,Yj7bUZTcIb QNcFvFRP53lfUVJMLCdHZCP4IFw QgqYGUxRWbDhVHi9 QsERLf3h,u7hAmTAQKkNwGuuBRDJae R5dJPudSKhpyLbLONmSvSEN227Da RLue2bRFLD2jS35 RWLxwmxNU24 RsCqVaq5JzNVkerJhlnfgzukT0 Rzo1y7UEopLahxp0MqzKhlU9ZisYJo7C SIiVbmo59UmGWz0hsMcsCCNbupIZp SdgsfV2BB4cg1hOUx,vVaMq C Sxhh9XZeinKCJsQIe2nb8svaeE TEN2,bKi4R2qvk TQBZa3laa, TedAvDhXQzkyQCF233s3Z5f  Tsuf0lOJ5w2bB51aUoG KQ6m UCvsDrUzPiu1UZDMVI UTuobOkHnaLG5UjMKy3Q7jGpQeV UEd5P UgYk,4 s og2 V DarNKNA5EWvM7EoATnpxBxcl,6bcuUu VCH59H,x9SFErZCkzn VSc1XcoIrvdMCE Vd8EIHkWHby3Pe3Ll78CWUt,3R W OT ma L1qkkDTKDVKzohsf WCgiT9Czb3qHSPf1YHd51p9ohFN WQsyM,Sh4eYq3N5K WdibogK4tWs9k7gxNRWLdpbMR,h7C X 8w8qjoHJ3Fdy8K4pLgJMD8k3dncDHqwx X9MtPBgBnQn XSECg49tAtyKO7nSQ5A3 21 XZ6vpgHRyTabs89yZOu7MuDzH,IBr1JSMkT Y1HDrhHM2qwmu7fV5zOOlEz4BCkU Y9Pf,lIv9iK7SAWjWdJjL YPjNkezOPCEXydshBvkEy8SQ4nv YnhuRE0E 7WnzdCOgs4oaKYpRrnFzssCEap Z4CkDd59yXPhQZEx1opOhCQ ZJf,sFgPX Oa,,uojGAQh ZY 0fZX9HwzYDEGB8V34UPynussHVTfGtIY9D2 ZlfYdPye8dltmzGz8IugRYtuKIapfFN29qL a2FmrW4rTqwiBenSY2EVeD0aM5m1GWbNcJusy aG wehBYZbmc8y3nEvlSX1  aXraB6MhKZMoMyMde ajIpd,WY6qFfiOrlkcXTl8J6 awD1F1QjOiUX5swHoRuMKEasspEiMD b61h6hXURu4dZE mtnea6 bQZz5xwU8H4e7RkVzXxeSJS bjjr1lIdEDUQUeve5PS2 bvK9mzDvloYIfBPNmHECxNh,QAz c9gsZPCqjImycP cIinvnCnMtO2w chFzbrS3M1NjdJVmx3 cqZwi0DdAhNT1t3YiyqXx6t s dGVa QEBRJ8VMw5UilizyTgmzEFFGG08 dSYYzrYF0BQ4AhV JmvuUCq9XyuvJcy99c547 R dkB5 nA0hVYGgL8QJ4JUrjA dzJi 5NtZMiy9,aeT7xdFUTrQWJHWJX lw, 7n2 eAryZfU8U3QmHeiqqtygbYYp9 ePsQ6YfhyZTlNvpQ emxcqGAe9eWo5mpF f1NJLQFxhdWoNwQsoJgQ2bj4 fBZ0PghDRHup99Zvh,2kr6 fOQez8IwieUEDavoPfVxVc2g7Dr7N3yBz fcxyBV2jVNwNvvG844lsI fpz7cq4PvjgEIy7DMC0I7lmdZBt1z g5uoBdTO3 jxEH AcBb9NkIr4hsFr8n2zBocl gE8Osyw7zTsMK8eM9uUq gWnPKg26SyZWShNE gs1AQooxtd h3gHMI47GrVVyemmXnP53ZAWXfX6L5EfNJs hJGBR6v2 D hbbT0SrUZvQ62tZ85fkVeHa4 hnot6kW3EdTpb6qoORsc REWIT2SGcSmi4i,zILz i0IVITh 0jQHgSUq2F2vfRsINAZzNYJu46EKfs2 iFkebpICju idcH5mVMUn ip3Vs,Yyhhf80Rmq3Kr,psAxclXZK7qWiV9AR j894KyfvUDlVBWgf0 jOeUlUDYtDuwX jarF5B8E28n0e0JOKYtWvIg2VnomNC3b jui5rR3hR9PF6V9JejIUQ k8k j2xhyAXtTAbL8Vf9D1cHLGcX9 kMBoZTSvIKJM9dlXbs2 kg0QdhdVlqOqJDKxAZQK kqA7ZlRwMU2TqEUU4JgHXD3PqioNCs6j3vk l79UtQly89KwgNwCm3eJ,OziH lICUj28IF0,,jLenk6kMU5 lX7CAnQLm5INaNsb,7LVXmu1P0epbKcXDbpGzkH llNReGlWrlUSRWoj6c7f,,5VDJ6 m4wmsZwh,oLECgg mNkzLJfLCcDfJJrZ68NaCms mfUca3HFb0B mvcOXR3WkD n11CJ3o9Y7z56EaSXoY nFbRrzLtLMPmQmJ nZEqUeUP47tjqu4 npcdnljmN9A0HZ4uW9nFBjtLB4E1w,ro6f o3fB4tmWVkj14 oDZDypVrnSyE2zGtNAc,2s n3QkWxy oa D7,LuLIZahvmDammIP Ym7vvc4vl2 oo4Ml,KrQ8eok p9sSVIUA0QT1kxJhQSiJ3v44uV3NQZGJtIt k8q pJ4cbUVLHfEGSyPv4AcM pbejIADeLirHZiSjh1ep1 prA9Z9WU37G3owiTOFdPErqAMreg0o6,S  q,VlY6XuR7 qIq0M6D9B 94YEuNf7zrp5Z qcbHF8kBKRUIJRdSHjBv3tD,4N5yo qpXOY4OMUjG1l4FV r7YRY4,CGFI7xhBF5Ig2Dm LL73MqyA rLYAsPUQXQ5Nw rX9mzoondf rr04UWYucbD loWBS29PQ3lgOaUv s0p93eX,5nCHtqDo5IHYVsuOBFfT1oBcmplL sE,gROwoVDqZ9WWvlzTGDmu7g906PqdKdkB sUzfyJCYr cA6jGz4dAAQ9ybd3l1 suBRt152NIXwL,Il4nt2zDKkHFjZDWFM t3T8P3pgT6mFtovcMnlhABPk352 tL0F3TjNHdXK,fHL93JsAgNY0Wvrpxb0r4t319 tVXvk8UmQie7NeVqu3a0 Sxmg tj6gMr6uCV7eBhjxP1cNuB3NPiUFf58 u aJKUwJp4uuY uEiAkVD44dRJguDERXWyndLEIoI3OKp uaHy1R8IWXkjGaz3JrM8exlBIN ulWLUwH2JvZ1M5PnDWem2nwdGhwYHCxuzbg1axha v4E1DJSn874pAPCyPl7yqflOQWv0fWcQZ vH7XNOyL8aAg042vA, vZJJlbDpNzQB3D8IR7bfYWFWM1Lz8ICHj y5R L vnEDF4yl7oCRyCJ7o w2iscrPa5nxabse9 wDEjUNtaqnUufNnfTS,aqZeGbwN E6RW7Xfk, wUj5vZZvHG8yg3Ok8MFsIOXbzkOHdnxQlLe58nR wlc45jau3gVtuA,wE,zaT  x0TUHEKczisnKCplGN7jK xEfw30ttI8AUDhqSiAbe10TJ3G78PaNX xWs9GlHgc,9YDOH7vf8I 0NqfZ6J22G4Bqo0Cj xmCmgni8Tyiqc82KF5OQq4nlWiZ5tBhMzb xzKSXIDnEi5xZY yCHLxogZkW35Z yVBNX9Lk9edAHDNxttjtDVJtxKv b75W7tK yh,vb1cjxYeiRQOB1F yuz TvzBw70JJH2f4LwLovCJDA zB23yUOnwcOgTc9nd,al zNMJ7UhfldOCxv4H4mRNRzDutNKpInPwh4k tZ zgC9C3xC doOl5b4S wCd9SKrgCeVQL2zjejA zsKrHc3M8EqlW8Y,oNlO8GXzuZU        T       6:  2p,0oSG87F7nSU1qroUKGa5ZqXwTZgaljGj5  GQUhos10HjR,VUPC  VlBCUh556Clp  fvpQUtIrTVg21QPoAUy04m90Il ,0GaFCOeBoDNfVvz R8UYhQN ,F1wNIFZmTtXYyqyjbUkiIP ,TBXVKqX82rFcNVMdorkby3P ,oGKDplGG02jV0eGbqdheEImoU6wHPzbMzi7Sd 07sGk8TLyr6Nxh6WbBZ xW3uNnW1qPX 0G1Kn6S,vZi2rW4NbNTgPmN2LYg4RGQp,p3,L 0SjU1iuceMFFzI646lMADeFq 0lcH7bXqpBcTJMtOdydKE 0xcpIytGAOYJlTGVG 1D4W5a  Wr6Ph,Ti57vMUoUXw3xR2o 1R5IUpLEpLfly wGlQOqC,aXxOp3G0auEaFk 1gtjzsTlBax 1wi6YFwl ZFNNcTBzkJCnu 2Fmy4WQOGpmakW, 2O VEW kll8CDeiG4Sa1kSE4bj 2lCYym11zy,W6xpteM 5wB6WV6jD2S,RG jYW 2urHf8XExsOcEcaIRtnZNs6x49hH g 3BXAKTTDbm2xHuarBkX2c,O5KD5mnvr8uEGI 3OH9anFfjUZ 3jdXZFR48QjUHNr0vSGvqOFSTWuv9zu 43TLnUXFe MzrM8 C 4HfCSXUU8z3YquSmdlTl0Rx9XOJEmFG 4W01ZojmpXXTSK np6ZnBhF1QmTK47D O 4iWhQt24CR7StlciAMkpl7NDu3kv0DCJ8voI 4v5ZbpAsit21ugnl 5CQF ,pD Ii6YJ 5PdxSFWBNOgRUdK1ZiiHb 5gFuBppxEY7Hg1zPBJ5w 5xI7GeY82RNf2ZGoFY,K 6BhGKTcDpd1r9c5YFjZTMFPv 6Nzhvx2SbXjwQyePPLguvZW54H0i9O95Loawgk 6d6hHTRlPYm  6yiiZ9iS0QYyXQQ2EXJEzuVRCw4ER5eTqr 79Yt4QfvzmiiPy1yMDguwiB3z8m3X5MnAitmV 7NymDtoi8Tfkhj8 UkDX2mo82j 7gdn5GyYohiCo9Ng8MuZmrGS1EGlI4myQ 7pA0cCizrIomEgu7LKqAs40Ni0Q9L8n 85KmR6 FAccVFcSYfkow 8Lr0OWBTSRXUNNdhh9mmCJhshYwzO 8dlQDn0EjdJHpQw 8wWxCGyLg,I8xW9cKLVHbhSkWPiXYzc 95JtvKW6LQDuLHHvKSJtiHjL,uFh3C7 9KMakh7fbqtLUIXX8zqV 9c0M64qNDJQHpdpr,7oemysqxF0Z 9vSzqHCh01hf9jK7n7vci226,P,y09T,xBJ9 aF AB1IiDxT,I9 AOsGJ1mHpkb78cCwzgBx9Fp56nC5lP5MyQ AinAHJaf78o36w ervlDH5 AtYeLd,xJDc,rvjI9GJ bdZ B4qKV49FCSgDMGfDu,QLiW2MNQotSIOtw6,XRJS BPtQ8,QsFgii BeTkmn4YU4NV1kfBXM3lM BxzIR7KacQO CB60vM426kN5LaXC5ZqGzqNBS7cp1Gfn CSfMUHiiZOR4CQE9gBDYlz CgeNdLaFZ,V,FOvjmOwVlc cXIj CzgqzPoPM4c6uP DBCXC2xf4wIiF6Vl DTfjEPxuLYOm,w5OKStqNEAqq4UWlXE Dh9uiZ1NlFmky5Z Dv9yF2idGIDAUHIR57 ED2KR,jZsW ETZgasA8NMVZuH 2RmXt3Z3jlfJpS0kwT3l6cHG Eh8NUfpgrr7ChJio2PiRJorv63yRgC5fBwVOu ExUQjpWKlK40ltTG71RtQz2wk4qd0F1wP0tyr0 F94sRHt164CfnF9 FNoBPVosTcuZeCVfIRdloBvpEYRjUADn3eIzvJm FiZr6dqh3sTZPgvFtD9XIT3 FvbwP1SAFJL0gXNav GF235Y5gMxao GTV2l5cSQM0o4LS5nVcLE12Ne1hWMPj3K2 Ghxo8OYzavJoTFeQNxY Gz9pqLwOs2,urrq1yyepMxfeUFUEfbno HFRdKpB3fvJDjV HYB  gNeP9ilFmO2gV64m Hnl1gp1ZieZyrt\tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 77720 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          4           1 j6FdZCwpFPxa2hFeLkfvlE1jMlD9lWepYj              1:          1           1 6SL1WuZj6cwaRCdaNY0              5:          1           1 1UwrDh5sqhvgC4ReAnxQ3FJSd              7:          1           1 6r7OkJDoyW              9:          1           1 jTeZAcgxQUoKv             10:          1           1 20LJDvtn,cgfZEkymjnq             11:          2           1 ymnXtSPsonU0VUl5vXMpm823bupp 9CAI9QxeKy             14:          1           1 qCBa4NuNyXplM             16:          1           1 3emQ49UZtlfjeKPKIqkt             20:          1           1 8ollY7kLwI2hJKP9dVuwyN             22:          1           1 LASLVdiomSc2k3mY3720X4t             23:          1           1 Tf,l2EXvksvBFhbKFuac0K Wjjb             28:          1           1 uP2 mZptwjwddaM4LjjKT4LCSXX             30:          1           1 ajD1m,gYY5mpQzhQYerpaq             31:          1           1 ifY6n5HRWzurLmWMpY7lBSQdtOkpYtgnz5BiNG9X             32:          1           1 PUKOzScRDFpgDMc9             33:          1           1 LlhenjpzG fh5sE 8JG             34:          3           1 0fBgouSGDJF3OnZh75xreOO5cKObB92cYBaHOw             35:          4           1 NOc2sH5MM5oJaigsWkZipm1FIjms8Rm3zc             36:          1           1 0r6IKAWrMHO6TtFVe0UbsR8HB9,e8h             37:          1           1 BzEdLuH,rgIoQOCOvE8t 2s9aaax             38:          7           1 BNQSHWMTeXWM             39:          1           1 Sz7k1CXldaqStZQiT0lCncWp,wCD7MGyq             40:          1           1 RpqdM lTgU8jBV,qmBvQ,H3gYMeqX3m             42:          1           1 MSIS,C fK0GTiyROgwdDZcojNHhQTZfPQJ             44:          1           1 yZjXhWL6yQv0pufmEcUQoTVC, yDncJJ             45:          1           1 Kd2KVRB JlcojfU9BNExf7YAA             46:          2           1 9AVr XAJPuwGGSD3MGKR             48:          1           1 D2TWI1JRU6vjHg             49:          2           1 BpS01X8wkasm94eDHxOycYam9UB6ntoTb8uQ             50:          1           1 Q0lfi7Y8nSzCCLt6i1PafQNXyzV             51:          1           1 HiS2ErJ96Kue             52:          1           1 glac7dDgIaB0HEOyud 8HY8ftwBZVNo             53:          2           1 cHpC Q7wbCoXBwYxYTiZDxyHi8KDuJXUJrKimJ             57:          1           1 gZlGyjsbn A5MY2lVIAFTPKWmT9Ac 6o             59:          1           1 FbRFkpBGV,5             60:          1           1 Qk5xeN4vYh18             61:          3           1 yamxIxY 3gt,ivruaiPSdTTd3WtGjPGlXWrW1syq             62:          1           1 yhrrPHsmneHY3             63:          2           1 tsQukpF1AItAynmY9mW,2NfSUlrphrtsmHQ \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 1.4685739391453233E7    Upper Bound, 95% conf   : 1.5628675316330913E7    Lower Bound, 95% conf   : 1.3799284551634213E7    Theta (double)          : 7.136174570889582E-5    Theta (long)            : 658195929872571    Theta (long) hex        : 000256a02e97b8bb    EstMode?                : true    Empty?                  : false    Array Size Entries      : 1048    Retained Entries        : 1048    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\tC_NATIONKEY\t25\t0\t0.0\t0\t24\t ### ItemsSketch DATA DETAIL:     BaseBuffer   : 12 12 10 22 16 23 21 19 4 19 10 12 16 5 14 18 15 18 15 12 0 24 20 10 15 19 21 3 19 16 18 15 15 7 5 8 14 17 9 21 0 3 1 12 9 17 23 0 19 11 19 7 2 17 13 9 8 2 1 16 11 21 7 7 3 1 16 16 20 20 20 5 23 7 12 23 0 13 21 2 18 0 21 12 21 7 17 12 20 23 1 14 5 16 22 18 13 4 2 22 19 4 0 23 13 5 7 23 22 10 9 7 18 13 24 15 8 24 19 9 20 6 17 12 10 22 3 18 5 22 20 20 10 13 16 1 18 5 4 13 2 3 4 7 6 9 3 3 10 22 1 19 18 16 9 8 14 6 11 20 0 6 20 0 8 11 14 23 19 18 5 24 3 16 6 12 2 9 9 4 12 4 8 14 1 24 7 21 19 24 5 3 18 16 0 14 24 0 2 3 1 4 4 24 19 23 6 23 21 2 15 14 10 17 2 4 8 4 7 24 15 13 6 12 4 21 16 24 15 4 6 4 17 23 2 0 15 24 24 12 10 15 5 22 23 6 1 11 6 22 3 8 18 20 17 8 4 21 0 8 8 7 2 5 18 2 15 2 5 15 5 14 5 18 22 1 21 24 19 18 24 10 7 20 14 14 1 7 15 3 0 22 23 24 13 18 14 16 11 17 15 2 16 23 8 5 20 11 2 4 3 19 19 11 0 7 17 21 23 12 15 12 19 18 13 22 10 20 16 14 7 4 10 2 2 4 18 6 8 2 21 16 22 24 0 7 2 11 6 9 17 4 19 12 2 24 19 13 13 0 21 22 20 11 10 18 1 18 23 3 15 12 12 23 11 18 13 6 3 2 12 10 3 7 0 22 15 24 19 13 8 1 11 0 3 3 8 16 10 5 6 23 7 4 2 7 2 5 16 8 2 7 13 24 6 10 8 3 20 18 20 21 20 8 22 12 23 6 10 16 22 4 8 11 6 10 11 14 18 19 9 2 4 0 10 17 10 11    Valid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       4: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24        T       5: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T       6: 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24        F       7: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       8: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       9: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        F      10: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F      11: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T      12: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24        T      13: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24        T      14: 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 ### END DATA DETAIL  ### ItemsSketch SUMMARY:     K                            : 256    N                            : 15,000,000    BaseBufferCount              : 448    CombinedBufferAllocatedCount : 4,352    Total Levels                 : 15    Valid Levels                 : 7    Level Bit Pattern            : 111001001110000    Valid Samples                : 2,240    Preamble Bytes               : 16    Normalized Rank Error        : 0.894%    Min Value                    : 0    Max Value                    : 24 ### END SKETCH SUMMARY \tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 0 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          1      599274 0              4:          1      599835 16              5:          1      600006 13              6:          3      600007 11              7:          1      599726 24              8:          2      599202 8             13:          1      600195 10             14:          1      601469 3             21:          1      601133 9             25:          1      599045 23             26:          2      600502 19             28:          1      599406 14             29:          1      599804 7             38:          1      600300 20             39:          1      600381 2             44:          1      600231 1             45:          1      599480 15             51:          1      600335 6             52:          1      599613 18             53:          1      601008 4             54:          1      600098 17             55:          3      600226 5             56:          2      598913 22             57:          5      599713 12             58:          8      600098 21 \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 25.0    Upper Bound, 95% conf   : 25.0    Lower Bound, 95% conf   : 25.0    Theta (double)          : 1.0    Theta (long)            : 9223372036854775807    Theta (long) hex        : 7fffffffffffffff    EstMode?                : false    Empty?                  : false    Array Size Entries      : 25    Retained Entries        : 25    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\tC_ACCTBAL\t1044786\t0\t0.0\t-999.99\t9999.99\t ### ItemsSketch DATA DETAIL:     BaseBuffer   : 1441.97 145.81 6628.59 7666.46 5158.08 9925.47 452.45 1256.13 693.43 3346.21 5773.1 6470.45 943.14 9348.9 995.99 6588.62 7019.43 9563.99 8006.44 -675.87 1608.06 8549.26 3407.99 -886.65 924.36 1628.32 8200.4 3171.58 7793.2 1423.87 3894.23 9385.41 9712.32 4053.34 -589.16 6919.61 3956.4 9198.6 4861.59 9721.13 9109.64 5828.72 6297.3 5699.68 4475.48 -580.11 5081.9 5570.23 6818.89 5058.18 2804.85 4101.71 9394.67 269.75 -319.57 5909.13 4753.98 5197.07 5218.4 711.37 7959.81 7626.32 1583.48 2517.12 8272.96 1707.56 8935.92 1015.06 8043.47 5601.52 4707.69 8201.27 6759.37 5759.58 -659.14 7717.33 2156.71 870.58 -169.25 2364.82 510.76 2216.55 5458.89 5581.14 3296.78 34.48 5467.2 2319.26 4828.84 9340.31 -413.03 8199.99 7367.62 9707.09 4114.15 9439.59 7261.6 9697.22 3204.65 2543.99 8758.34 8536.3 5682.01 4486.12 2194.94 5395.92 3261.29 8548.12 6257.69 -42.77 5039.5 1972.3 3368.88 1722.23 2436.74 -817.4 9836.33 9300.1 5843 4336.11 -69.86 866.37 6005.4 5759.53 9454.72 8614.34 8255.31 2126.69 2325.83 5148.86 8978.17 7116.7 5481.93 7847.38 -958.93 7154.58 4077.82 3961.19 1742.14 7095.32 9040.25 5588.26 1897.4 9628.43 2099.66 9972.78 3559.17 9885.97 7650.8 6087 2217.52 -130.36 6986.82 583.45 2939.55 2047.28 9545.99 2473.49 858.47 5293.44 7802.93 -150.68 6485.11 5293.04 1073.27 7451.42 -863.28 8804.1 7508.83 7015.88 4882.57 -599.99 908.35 7635.44 951.2 1844.16 5736.19 2114.77 -104.92 5538.91 8515.3 4675.39 4279.46 4904.14 9850.44 4423.21 933.57 2475.42 326.31 4175.23 2082.95 4177.3 3959.33 3418.79 4510.44 3948.92 4503.67 107.39 9780.34 3184.9 578.3 4422.83 5463.64 8422.1 251.74 4908.22 1464.83 -659.72 8974.86 6498.05 2719.77 4221.63 855.74 3422.67 3855.12 1008.85 2753.45 9277.9 6677.36 2462.43 2051.32 566.79 8907 -126.04 2556.79 3934.78 8755.97 1643.64 1558.29 8214.95 5780.05 2307.41 3650.27 1118.77 2197.63 6486.54 7259.3 4138.86 6826.9 7668.6 8145.79 9401.33 2203.71 9646.34 6101.59 5490.17 3338.23 3658.9 3151.43 -956.63 1792.84 1193.32 1055.71 9255.23 -281.74 3653.93 7659.47 8841.78 2791.9 6367.8 2651.21 6867.75 1294.1 809.58 8543.82 52.41 9740.66 7408.67 6578.95 9520.9 9914.12 7726.37 108.86 1563.26 3692.53 7346.71 -738.62 2935.49 -170.14 9357.08 6489.74 6029.18 9387.01 3585.43 226.51 9937.04 7990.24 2041.58 1817.29 5125.54 2023.72 9685.8 9372.48 1424.2 9439.2 776.78 7327.49 6213.15 -534.22 6284.17 5019.94 9171.63 2685.83 5703.21 8948.04 6808.91 2414.06 3005.42 8990.44 4477.17 5749.37 3727.46 424.04 7716.62 1200.27 7881.64 2757.16 5595.83 8076.18 5421.12 8787.12 8127.94 6346.73 546.34 6357.9 1175.24 5267.04 4077.62 552.11 4328.54 4728.63 8087.94 5040.08 6684.39 -488.89 4442.9 1832.43 6631.96 9326.28 5918.35 5749.67 8699.42 8144.69 1932.52 5832.02 6850.52 8805.92 5240.75 2290.11 9879.71 1294.14 1478.24 4737.83 8704.31 2431.99 7443.13 2794.96 2871.79 7078.94 8773.39 8465.8 8830.25 7069.11 8532.99 4998.78 5537.21 1825.27 7347.01 4199.67 5912.13 187.27 -665.37 2026.74 5334.48 4693.04 4002.2 9031.25 8329.91 1898.11 -577.14 -6.69 6504.99 9353.12 5973.2 3553.15 7841.12 3813.35 3025.49 5462.63 2432.75 9125.83 2964.49 3096.85 5745.57 5876.53 6797.88 4054.23 3452.58 472.32 5248.89 7105.29 730.96 7169.07 5615.93 4972.88 -882.13 -48.13 3006.78 9847.27 6140.52 -218.81 5392.59 2280.46 1611.74 4484.43 6819.74 8438.14 5916.8 1674.97 222.17 2939.82 6596.44 6463.8 -865.72 751.45 -356.61 -542.5 -902.97 1748.17 9480.48 1535.35 7635.99 -864.02 7383.11 5962.94 7232.79 9476.35 9033.29 9571.46 1583.44 1803.87 -423.35 -383.48 9856.14 1272.88 7198.02 8190.42 371.73    Valid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       4: -994.99 -955.44 -927.4 -884.52 -834.41 -795.25 -756.59 -718.42 -654.66 -627.93 -586.27 -548.9 -510.85 -447.59 -401.96 -333.66 -312.99 -268.99 -203.36 -162.33 -131.46 -100.21 -59.14 -12.74 22.51 62.83 109.99 142.04 180.96 225.64 255.15 295.77 344.87 402.15 429.43 460.78 511.33 539.63 600.43 624.77 694.13 727.08 770.38 811.58 847.14 858.56 914.06 951.28 1000.38 1043.8 1075.32 1113.01 1159.69 1199.29 1223.04 1282.62 1321.9 1370.8 1403.15 1459.14 1483.72 1507.33 1575.91 1637.25 1673.07 1711.19 1758.21 1801.91 1850 1880.46 1947.42 1994.92 2049.13 2103.39 2139.05 2171.15 2216.44 2244.54 2285.43 2320.27 2383.79 2418.59 2460.5 2490.14 2523.45 2564.16 2627.88 2650.27 2699.01 2722.52 2774.57 2808.09 2864.23 2906.47 2946.82 2975.79 3028.69 3078.9 3132.35 3179.02 3230.68 3273.61 3325.69 3357.25 3388.99 3427.87 3497.02 3525.7 3583.63 3624.33 3663.06 3699.91 3764.57 3817.13 3850.4 3898.35 3929.75 3975.81 3998.85 4044.41 4107 4142.84 4182.88 4219.29 4246.69 4280.25 4340.24 4388.19 4418.72 4453.3 4482.93 4520.66 4567.9 4605.31 4650.77 4694.17 4762.95 4810.85 4849.32 4870.39 4928.73 4961.42 5016.53 5047.3 5099.69 5139.98 5157.65 5237.52 5264.96 5334.93 5366.46 5415.25 5478.69 5520.98 5553.23 5607.69 5653.64 5681.33 5733.82 5765.72 5813.39 5839.67 5873.08 5904.57 5955.91 5988.62 6023.74 6091.47 6154.28 6200.38 6238.97 6292.8 6327.57 6380.77 6416.12 6471.12 6510.64 6570.05 6607.35 6636.68 6684.01 6740.87 6788.5 6834.8 6881.64 6948.58 6966.25 7014.58 7050.2 7107.21 7136.21 7183.76 7232.28 7265.55 7291.89 7336.56 7363.94 7423.99 7461.01 7503.78 7550.03 7587.37 7629.4 7678.96 7720.37 7777.67 7818.94 7857.31 7893.52 7938.67 7998.44 8044.43 8086.31 8117.15 8167.1 8196.66 8232.59 8279.75 8335.99 8365.93 8412.7 8444.89 8490.65 8555.89 8577.36 8633.68 8671.85 8720.01 8767.1 8805.3 8860.71 8895.32 8938.16 8978.38 9022.54 9099.79 9141.23 9182.09 9215.74 9252.71 9327.68 9365.76 9419.76 9448.41 9478.64 9512.04 9553.03 9597.92 9627.28 9677.28 9720.72 9767.65 9809.75 9874.31 9912.05 9966.93        T       5: -957.85 -922.36 -884.75 -839.71 -798.53 -751.77 -727.52 -654.13 -613.19 -571.12 -518.55 -467.47 -439.2 -386.41 -346.22 -302.41 -258.42 -217.7 -174.03 -119.78 -87.24 -32.47 -17.4 34.14 70.29 115.21 170.47 222.07 261.13 289.76 332.94 364.82 396.22 436.84 470.73 516.54 591.96 612.83 673.09 710.48 736.82 761.57 801.26 830.2 870.23 906.38 944.06 999.17 1044.6 1092.03 1123.82 1150.5 1191.5 1224.78 1260.23 1308.74 1356.88 1408.99 1446.65 1504.46 1575.64 1605.05 1655.64 1691.21 1725.55 1776.83 1803.27 1837.67 1888.59 1930.37 1968.26 2017.24 2068.84 2103.09 2132.3 2170.19 2214.51 2245.65 2299.27 2346.32 2387.1 2438.63 2478.28 2517.36 2560.83 2636.23 2676.52 2713.69 2769.21 2797.2 2839.33 2888.14 2946.83 2998.82 3048.93 3082.21 3123.59 3159.78 3219.56 3258.89 3300.17 3346.44 3387.37 3442.97 3479.64 3537.95 3574.14 3609.73 3639.59 3697.29 3754.8 3792.09 3842.23 3878.53 3927.85 3967 4014.25 4063.81 4105.64 4143.37 4175.27 4219.59 4252.31 4313.99 4346.83 4399.08 4440.53 4474.78 4512.31 4560.39 4590.97 4642.36 4678.13 4743.07 4777.6 4832.49 4869.34 4910.54 4948.79 4997.78 5033.08 5080.14 5126.11 5156.58 5225.31 5272.74 5294.66 5324.32 5365.9 5409.96 5448.75 5503.8 5552.56 5576.73 5612.62 5662.08 5694.29 5728.94 5751.39 5797.98 5848 5909.41 5956.91 5988.01 6031.85 6057.39 6106.09 6137.08 6170.32 6202.44 6258.89 6312.6 6369.31 6396.35 6426.11 6466.97 6497.19 6555.21 6597.89 6645.81 6685.06 6740.82 6771.69 6821.82 6868.97 6902.43 6948.35 7004.21 7031.63 7086.91 7132.72 7175.09 7207.74 7251.49 7299.77 7336.07 7376.47 7431.48 7448.61 7488.92 7567.07 7594.33 7622.45 7684.38 7722.12 7756.43 7816.68 7852.67 7925.65 7960.04 7999.38 8032.98 8057.71 8123.08 8164.71 8212.62 8252.41 8279.6 8327.13 8382.48 8429.17 8469.48 8510.42 8567.55 8605.86 8639.86 8681.74 8721.34 8773.79 8801.96 8893.81 8940.63 8984.19 9011.13 9057.36 9097.16 9157.33 9192.72 9233.34 9272.45 9323.18 9360.1 9393.87 9436.41 9496.45 9542.09 9571.44 9634.86 9669.3 9713.72 9768.33 9819.34 9855.9 9896.77 9942.41 9980.38        T       6: -955.83 -921.57 -880.76 -841.51 -778.76 -738.22 -693.92 -657.04 -614.72 -563.27 -530.87 -493.38 -432.23 -394.44 -364.81 -307.71 -268.75 -230.37 -201.19 -152.05 -100.98 -58.93 -30.66 13.3 69.07 112.34 138.91 184.34 219.2 262.46 316.2 350.82 400 435.56 487.81 528.3 551.09 596.9 641.07 674.93 710.77 770.64 798.58 841.72 891.19 938.78 966.62 1021.66 1055.44 1099.32 1162.65 1192.69 1252.34 1279.25 1326 1374.68 1417.29 1454.77 1490.86 1529.57 1579.47 1622.64 1666.15 1715.13 1755.87 1796.64 1833.04 1884.11 1914.41 1964.53 1998.67 2035.45 2091.44 2118.87 2170.62 2228.77 2285.82 2328.85 2356.39 2397.2 2435.51 2500.12 2537.43 2581.07 2620.66 2645.33 2709.88 2753.44 2790.35 2830.77 2870.34 2907.18 2956.95 2998.59 3052.92 3095.22 3127.4 3190.25 3242.01 3273.14 3312.12 3376.4 3403.75 3455.27 3479.06 3512.23 3560.69 3609.29 3645.36 3682.85 3721.91 3773.72 3824.07 3857.9 3899.78 3950.42 3979.11 4023.97 4055.76 4117.71 4161.15 4193.51 4251.79 4302.69 4341.41 4391.91 4426.59 4476.56 4522.11 4562.87 4609.61 4650.89 4686.27 4730.08 4778.03 4826.49 4859.62 4918.59 4958 5007.33 5048.45 5069.06 5105.18 5157.73 5185.57 5235.89 5281.41 5344.86 5370.97 5408.02 5457.64 5500.18 5546.85 5588.91 5650.01 5683.23 5741.91 5776.99 5831.93 5865.84 5910.09 5945.98 5990.04 6018.6 6050.09 6104.98 6148.89 6194.37 6239.12 6281.02 6323.85 6366.84 6405.5 6439.15 6485.36 6529.36 6587.13 6619.9 6641.59 6687.85 6736.61 6786.09 6820.68 6873.34 6913.69 6939.96 6992.09 7059.01 7098.5 7141.38 7182.52 7225.09 7259.59 7310.1 7362.77 7384.43 7424.19 7468.84 7500.98 7555.2 7599 7653.55 7688.33 7747.86 7781.64 7835.88 7878.42 7912.49 7956.74 7990.14 8028.24 8073.94 8135.31 8181.16 8211.88 8265.21 8296.2 8340.22 8403.01 8441.16 8479.9 8539.23 8573.53 8611.8 8655.15 8710.88 8748.88 8780 8832.22 8872.27 8920.2 8950 8994.37 9033.99 9075.54 9109.71 9157.66 9198.57 9237 9282.62 9333.59 9380.21 9412.22 9452.59 9503.91 9540.04 9597.7 9641.75 9682.52 9712.6 9758.65 9797.75 9849.87 9904.34 9945.16 9992.54        F       7: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       8: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T       9: -986.62 -940.53 -909.23 -857.81 -806.7 -763.25 -723.78 -669.81 -635.52 -593.85 -563.16 -513.49 -477.62 -428.42 -375.12 -343.57 -296.71 -261.18 -214.66 -167.87 -122.99 -81.77 -22.61 17.66 49.31 92.16 135.19 187.03 226.05 265.85 314.29 354.38 399.09 438.59 472.62 520.37 561.73 592.29 646.44 694.88 734.97 785.44 827.61 881.27 911.32 945.74 1007.4 1051.5 1086 1132.57 1187.82 1232.16 1271.4 1303.91 1363.56 1403.03 1440.06 1473.17 1511.6 1563.34 1598.41 1656.72 1698.62 1734.94 1763.52 1812.37 1849.04 1895.89 1931.37 1982.04 2022.72 2056.32 2096.08 2138.86 2188.65 2227.61 2269.61 2327.24 2369.38 2410.71 2455.97 2488.2 2536.54 2575.74 2623.36 2655.8 2704.28 2751.44 2797.53 2846.87 2877.66 2927.51 2969.27 3010.96 3057.88 3090.63 3127.95 3175.47 3225.67 3260 3310.81 3351.41 3391.08 3432.8 3469.31 3511.48 3575.93 3598.55 3655.75 3689.08 3740.45 3790.2 3820.4 3865.81 3907.74 3955.73 3993.92 4032.47 4075.66 4114.7 4160.59 4207.49 4269.79 4312.72 4352.21 4391.83 4432.4 4475.87 4524.06 4553.64 4612 4645.91 4693.3 4743.59 4795.11 4827.2 4867.11 4926.25 4961.54 5010.63 5047 5083.38 5134.23 5182.99 5217.93 5267.44 5303.92 5351.26 5390.35 5436.17 5472.78 5516.75 5568.87 5614.94 5650.53 5702.61 5729.26 5777.55 5827.93 5866.86 5901.22 5935.27 5990.09 6032.14 6077.2 6122.14 6162.63 6215.37 6233.08 6298.49 6328.6 6370.42 6417.17 6460.11 6502.1 6543.31 6592.3 6633.98 6678.11 6718.52 6770.2 6810.84 6843.17 6884.84 6913.06 6970.21 7005.65 7050.46 7086.95 7143.69 7170.44 7213.19 7266.74 7307.89 7343.54 7392.68 7441.55 7483.14 7526.05 7578.68 7612.35 7651.99 7695.99 7745.06 7792.4 7825.46 7868.94 7913.93 7961.03 7977.49 8043.23 8082.29 8118.97 8165.67 8216.86 8266.79 8303.36 8352.05 8387.54 8425.34 8478.78 8521.66 8569.89 8616.3 8643.84 8686.84 8741.9 8772.94 8819.98 8858.56 8904.81 8939.57 8976.17 9030.77 9066.39 9100.69 9145.85 9194.29 9236.73 9279.55 9324.19 9362.85 9415.29 9459.24 9497.76 9541.85 9590.65 9635.43 9669.76 9707.92 9748.37 9791.95 9840.77 9886.23 9926.1 9973.31        F      10: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F      11: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        T      12: -995.23 -948.82 -909.49 -865.48 -824.01 -773.41 -736.51 -693.76 -640.75 -604.26 -563.1 -516.7 -475.59 -430.94 -388.38 -346.22 -303.79 -265.02 -214.25 -160.23 -122.3 -87.99 -47.65 -1.79 31.54 80.55 123.2 163.19 215.77 261.82 305.34 338.97 392.43 433.86 477.05 513.73 554.49 600.97 641.43 682.28 718.69 763.27 806.68 857.03 897.19 939.18 979.65 1024.11 1068.58 1110.9 1157.41 1200.21 1237.94 1284.08 1326.18 1364.9 1409.01 1456.04 1496.46 1536.56 1579.66 1634.67 1671.95 1712.47 1763.6 1802.64 1847.69 1891.09 1930.07 1984.17 2025.07 2064.29 2104.74 2143.83 2191.52 2231.2 2267.02 2313.48 2367.29 2414.8 2448.64 2491.49 2537.35 2580.03 2631.2 2672.41 2705.04 2767.45 2805.64 2844.62 2874.02 2920.23 2957.27 2994.78 3049.75 3083.41 3134.34 3175.01 3232.04 3259.13 3315.05 3353.88 3392.69 3433.38 3488.14 3519.89 3557.65 3602.13 3653.42 3684.48 3731.55 3772.05 3820.78 3859.28 3904.22 3949.5 4001.17 4036 4078.82 4122.66 4158.27 4203.36 4251.03 4286.93 4334.02 4381.78 4420.22 4462.32 4508.49 4546.48 4596.25 4632.3 4679.84 4721.25 4762.91 4807.01 4856.28 4895.83 4932.56 4974.47 5014.82 5055.59 5099.44 5144.81 5183.85 5228.53 5274.52 5316.04 5345.08 5409.87 5447.18 5490.3 5531.79 5578.57 5613.98 5660.3 5702.39 5741.65 5788.09 5827.57 5873.83 5910.97 5957.81 5996.57 6053.27 6088.52 6136.88 6172.3 6222.15 6255.26 6305.58 6350.01 6395.21 6435.7 6479.49 6525.55 6564.53 6598.45 6648.59 6686.06 6740.07 6779.72 6815.45 6865.1 6909.04 6944.45 6987.64 7027.78 7079.43 7128.94 7164.73 7207.01 7253.61 7299.08 7341.2 7379.61 7420.22 7462.63 7510.09 7552.83 7593.82 7641.31 7681.85 7719.88 7768.11 7812.2 7864.01 7898.08 7941.38 7984.56 8026.09 8065.67 8117.56 8166.14 8208.46 8241.85 8286.08 8337.96 8374.76 8416.97 8455.86 8500.23 8545.24 8583.06 8635.45 8675.02 8719.01 8771.78 8800.92 8850.98 8897.26 8932.98 8986.26 9021.77 9076.21 9117.8 9153.16 9196.27 9246.3 9279.04 9321.5 9368.95 9417.16 9455.99 9493.26 9539.24 9580.17 9622.23 9670.37 9714.24 9755.52 9799.15 9833.01 9879.44 9915.56 9958.29        T      13: -988.92 -946.84 -896.76 -855.58 -814.63 -766.63 -722.69 -686.61 -635.88 -594.14 -553.18 -511.39 -463.24 -420.81 -380.16 -335.57 -294.54 -256.44 -209.59 -164.76 -120.32 -72.84 -31.41 6.44 47.5 91.18 136.21 183.66 217.76 265.89 314.35 352.05 387.85 432.59 474.31 519.18 559.29 601.43 641.46 686.91 732.81 770.44 823.41 859.08 899.38 949.15 986.95 1031.37 1083.96 1118.45 1161.1 1211.01 1250.57 1287.95 1330.21 1375.69 1407.31 1460.69 1509.79 1545.31 1586.53 1632.56 1670.46 1712.72 1758.84 1805.14 1841 1885.66 1929.49 1979.77 2021.53 2062.04 2100.86 2152.7 2197.02 2239.31 2279.83 2318.47 2367.32 2408.87 2445.1 2493.14 2541.81 2580.51 2623.89 2666.07 2711.37 2750.64 2793.48 2834.82 2884.14 2925.04 2965.12 3001.45 3050.3 3098.37 3142.12 3183.5 3224.64 3269.93 3318.92 3352.14 3397.65 3443.31 3490.2 3534.57 3571.06 3617.47 3660.17 3698.3 3741.56 3782.98 3837.17 3873.6 3920.87 3961.05 4004.66 4045.71 4083.9 4124.33 4172 4218.37 4263.4 4300.8 4341.5 4384.87 4427.34 4471.48 4512.14 4544.56 4603.87 4645.16 4685.51 4729.83 4767.33 4814.34 4870.07 4904.25 4938.71 4992.68 5024.44 5068.58 5121.01 5154.15 5194.47 5248.92 5292.56 5336.35 5376.12 5410.65 5465.19 5502.63 5541.13 5585.64 5629.76 5674.93 5717.09 5764.91 5807.34 5848.15 5886.83 5934.3 5975.28 6023.11 6061.43 6104.94 6141.99 6180.27 6230.21 6279.49 6320.4 6366.29 6414.09 6455.46 6486.41 6541.29 6572.82 6630.8 6659.9 6714.45 6751.94 6793.72 6826.54 6882.79 6925.38 6964.19 7014.56 7057.28 7094.35 7143.16 7183.63 7233.63 7272.63 7306.49 7350.19 7396.27 7444.77 7482.92 7529.38 7574.95 7604.14 7654.77 7690.91 7733.15 7772.09 7811.37 7864.64 7901.07 7946.36 7986.08 8027.89 8074.68 8125.02 8157.27 8198.34 8246.82 8285.8 8334.14 8379.52 8421.76 8464.16 8507.88 8545.42 8590.19 8628.78 8677.78 8720.75 8763.71 8811.26 8855.87 8895.01 8935.93 8974.47 9019.62 9063.63 9112.33 9153.05 9199 9241.81 9291.13 9322.96 9366.32 9416.45 9453.99 9496.49 9543.2 9580.13 9626.23 9680.96 9720.26 9756.63 9803.12 9841.67 9884.24 9925.71 9966.14        T      14: -984.63 -936.38 -903.82 -863.59 -824.47 -778.62 -737.03 -693.89 -651.06 -609.81 -571.38 -530.33 -482.77 -435.5 -395.13 -356.85 -293.63 -260.71 -223.22 -177.65 -135.47 -100.39 -59.62 -9.76 34.37 73.48 119 168.62 206.36 248.41 287.56 342.88 382.78 426.72 466.71 503.87 548.59 599.95 633.15 680.83 726.25 761.92 803.33 854.71 894.49 935.14 978.76 1029.58 1067.04 1112.4 1151.92 1191.29 1235.31 1269.78 1323.62 1372.38 1415.49 1457.2 1499.25 1538.72 1577.3 1625.51 1664.87 1707.14 1745.39 1793.81 1833.31 1880.27 1914.41 1964.95 2007.35 2048.6 2098.29 2133.41 2180.42 2227.16 2262.17 2307.6 2353.48 2397.33 2434.57 2482.72 2534.67 2565.05 2609.96 2653.55 2688.26 2734.73 2780.49 2821.25 2875.57 2911.63 2960.02 3002.07 3038.93 3084.28 3123.8 3163.81 3220.93 3255.21 3302.97 3339.5 3375.55 3418.28 3473.57 3516.12 3560.44 3591.88 3632.33 3672.5 3722.43 3770.64 3809.34 3859.71 3901.21 3943.6 3982.78 4033.65 4067.89 4110.24 4158.93 4198.09 4243.11 4285.43 4325.1 4377.72 4415.42 4450.46 4497.94 4542.69 4592.06 4630.01 4673.09 4717.39 4756.51 4804.23 4842.89 4891.01 4930.34 4972.14 5014.3 5056.02 5107.16 5143.31 5183.93 5227.41 5264.75 5322.31 5356.06 5402.79 5442.68 5491.5 5530.59 5575.37 5614.75 5658.07 5704.88 5741.05 5788.92 5825.89 5884.13 5913.23 5970.74 6006.4 6047.9 6088.41 6138.72 6178.34 6221.99 6264.42 6307.77 6351.04 6391.47 6427.83 6478.58 6522.17 6566.64 6611.31 6647.79 6692.31 6739.34 6782.6 6824.01 6873.11 6915.64 6959.18 6999.88 7046.2 7090.85 7134.21 7174.2 7207.82 7263.99 7300.14 7343.91 7386.86 7441.61 7478.6 7528.64 7566.2 7604.18 7656.43 7698.32 7734.53 7782.93 7827.85 7872.09 7909.77 7952.66 7993.34 8037.89 8080.85 8129.97 8171.44 8213.77 8252.48 8294.14 8335.65 8386.18 8427.33 8463.36 8507.34 8550.85 8599.28 8636.47 8680.69 8731.05 8765.78 8816.46 8858.43 8903.15 8950.2 8981.73 9024.16 9065.38 9107.7 9154.54 9197.06 9233.79 9272.58 9332.79 9369.79 9415.5 9451.28 9491.69 9535.96 9578.49 9627.83 9670.13 9714.96 9742.65 9796.61 9840.19 9886.13 9923.39 9966.53 ### END DATA DETAIL  ### ItemsSketch SUMMARY:     K                            : 256    N                            : 15,000,000    BaseBufferCount              : 448    CombinedBufferAllocatedCount : 4,352    Total Levels                 : 15    Valid Levels                 : 7    Level Bit Pattern            : 111001001110000    Valid Samples                : 2,240    Preamble Bytes               : 16    Normalized Rank Error        : 0.894%    Min Value                    : -999.99    Max Value                    : 9999.99 ### END SKETCH SUMMARY \tFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 77720 ReversePurgeItemHashMap          Index:     States      Values Keys              0:          1           1 5682.01              1:          1           1 3422.67              3:          1           1 9033.29              4:          1           1 8190.42              5:          1           1 -42.77              7:          1           1 9571.46             11:          1           1 4486.12             12:          1           1 6684.39             15:          1           1 -423.35             16:          2           1 5039.5             23:          1           1 2051.32             27:          1           1 371.73             28:          2           1 7198.02             29:          1           1 1175.24             31:          1           1 3855.12             34:          1           1 8087.94             35:          1           1 5267.04             36:          1           1 6257.69             37:          3           1 -488.89             38:          2           1 4328.54             39:          5           1 1272.88             40:          4           1 1803.87             41:          3           1 1583.44             42:          1           1 566.79             43:          1           1 2194.94             44:          1           1 5395.92             45:          1           1 2753.45             46:          1           1 1008.85             47:          3           1 5040.08             48:          1           1 2462.43             49:          1           1 6677.36             50:          8           1 9856.14             51:          1           1 552.11             53:          1           1 -383.48             54:          1           1 8548.12             56:          1           1 4077.62             57:          1           1 8907             59:          1           1 9277.9             61:          1           1 4728.63             63:          1           1 3261.29 \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 1044786.8027316225    Upper Bound, 95% conf   : 1174649.4853171862    Lower Bound, 95% conf   : 929098.9142022848    Theta (double)          : 2.8618278793171646E-4    Theta (long)            : 2639570323638534    Theta (long) hex        : 000960acdb800906    EstMode?                : true    Empty?                  : false    Array Size Entries      : 299    Retained Entries        : 299    Seed Hash               : -27700 ### END SKETCH SUMMARY \nDEV3\tCUSTOMER_BULK_IMPORT_EXAMPLE2\tC_MKTSEGMENT\t5\t0\t0.0\tAUTOMOBILE\tMACHINERY\t ### ItemsSketch DATA DETAIL:     BaseBufferalid | Level        F       0: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       1: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       2: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       3: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null nullnull null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F       8: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null nullnull null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null        F      11: null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null nulltFrequentItemsSketch\u003cT\u003e:   Stream Length    : 15000000   Max Error Offset : 0 ReversePurgeItemHashMap          Index:     States      Values Keys              1:          1     3000019 HOUSEHOLD              3:          1     2999152 FURNITURE              5:          1     3002858 AUTOMOBILE              6:          1     3000188 BUILDING              7:          3     2997783 MACHINERY \t ### HeapCompactOrderedSketch SUMMARY:     Estimate                : 5.0    Upper Bound, 95% conf   : 5.0    Lower Bound, 95% conf   : 5.0    Theta (double)          : 1.0    Theta (long)            : 9223372036854775807    Theta (long) hex        : 7fffffffffffffff    EstMode?                : false    Empty?                  : false    Array Size Entries      : 5    Retained Entries        : 5    Seed Hash               : -27700 ### END SKETCH SUMMARY "
          },
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"result-alert alert-warning\" role\u003d\"alert\"\u003e\u003cbutton type\u003d\"button\" class\u003d\"close\" data-dismiss\u003d\"alert\" aria-label\u003d\"Close\"\u003e\u003cspan aria-hidden\u003d\"true\"\u003e\u0026times;\u003c/span\u003e\u003c/button\u003e\u003cstrong\u003eOutput is truncated\u003c/strong\u003e to 102400 bytes. Learn more about \u003cstrong\u003eZEPPELIN_INTERPRETER_OUTPUT_LIMIT\u003c/strong\u003e\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559758163127_-201055388",
      "id": "20190605-180923_1526605090",
      "dateCreated": "2019-06-05 18:09:23.127",
      "dateStarted": "2019-06-10 18:19:16.017",
      "dateFinished": "2019-06-10 18:19:19.532",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nLet\u0027s take a closer look at the `SYS.SYSTABLESTATISTICS` table by selecting key metrics to understand the characteristics of the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to select key metrics for the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:24.097",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eLet\u0026rsquo;s take a closer look at the \u003ccode\u003eSYS.SYSTABLESTATISTICS\u003c/code\u003e table by selecting key metrics to understand the characteristics of the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to select key metrics for the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559763161574_1107320760",
      "id": "20190605-193241_1371770104",
      "dateCreated": "2019-06-05 19:32:41.574",
      "dateStarted": "2019-06-06 17:13:24.098",
      "dateFinished": "2019-06-06 17:13:24.104",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nselect total_row_count, total_size, stats_type, sample_fraction from sys.systablestatistics where schemaname\u003d\u0027DEV3\u0027 and tablename\u003d\u0027CUSTOMER_BULK_IMPORT_EXAMPLE1\u0027;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 18:19:29.870",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "TOTAL_ROW_COUNT": "string",
                      "TOTAL_SIZE": "string",
                      "SAMPLE_FRACTION": "string",
                      "STATS_TYPE": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "TOTAL_ROW_COUNT\tTOTAL_SIZE\tSTATS_TYPE\tSAMPLE_FRACTION\n15000000\t2294611260\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559763342085_1959754644",
      "id": "20190605-193542_1348415475",
      "dateCreated": "2019-06-05 19:35:42.085",
      "dateStarted": "2019-06-10 18:19:30.082",
      "dateFinished": "2019-06-10 18:19:30.478",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nWe see that the `DEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1` table has 15000000 rows, has a total size of 2294789186 bytes, has a `statsType` value of 2, and a `sampleFraction` value of 0.\n\nFor reference refer to these tables for an explanation of the `statsType` and `sampleFraction`\n\n#### statsType\n\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eStatistic Type Value\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e0\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e1\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e2\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e3\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\n#### sampleFraction\n\nThe sampling percentage, expressed as 0.0 to 1.0,\n\n* If statsType\u003d0 (full statistics), this value is not used, and is shown as 0.\n* If statsType\u003d1, this value is the percentage or rows to be sampled. A value of 0 means no rows, and a value of 1 means all rows (full statistics).\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:13:09.654",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eWe see that the \u003ccode\u003eDEV3.CUSTOMER_BULK_IMPORT_EXAMPLE1\u003c/code\u003e table has 15000000 rows, has a total size of 2294789186 bytes, has a \u003ccode\u003estatsType\u003c/code\u003e value of 2, and a \u003ccode\u003esampleFraction\u003c/code\u003e value of 0.\u003c/p\u003e\n\u003cp\u003eFor reference refer to these tables for an explanation of the \u003ccode\u003estatsType\u003c/code\u003e and \u003ccode\u003esampleFraction\u003c/code\u003e\u003c/p\u003e\n\u003ch4\u003estatsType\u003c/h4\u003e\n\u003ctable class\u003d\"splicezep\"\u003e\n    \u003cthead\u003e\n        \u003ctr\u003e\n            \u003cth\u003eStatistic Type Value\u003c/th\u003e\n            \u003cth\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e0\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e1\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the unmerged partition values.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e2\u003c/td\u003e\n            \u003ctd\u003eFull table (not sampled) statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd class\u003d\"ItalicFont\"\u003e3\u003c/td\u003e\n            \u003ctd\u003eSampled statistics that reflect the table values after all partitions have been merged.\u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003esampleFraction\u003c/h4\u003e\n\u003cp\u003eThe sampling percentage, expressed as 0.0 to 1.0,\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIf statsType\u003d0 (full statistics), this value is not used, and is shown as 0.\u003c/li\u003e\n  \u003cli\u003eIf statsType\u003d1, this value is the percentage or rows to be sampled. A value of 0 means no rows, and a value of 1 means all rows (full statistics).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559763489992_1892897487",
      "id": "20190605-193809_16325725",
      "dateCreated": "2019-06-05 19:38:09.992",
      "dateStarted": "2019-06-06 17:13:09.656",
      "dateFinished": "2019-06-06 17:13:09.662",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " %md\n\n## 3. Query Performance Problems\n\nWhen query performance is not up to par, there can be several reasons why a query doesn\u0027t perform as well as expected. In this section we will dive in and take a look at some of the more common problems that can lead to poor query performance and how you can resolve them. Before you read on the most important thing to remember is to make sure statistics have been collected on all your table.\n\nSpecifically we will take a look at:\n\n* Data Skew\n* Access Path\n* Nested Loop Joins\n \n### Data Skew\n\nIn the most simplest term data skew primarily refers to a non uniform distribution in a dataset. For example, let\u0027s say you have a column in a table whose range of values is from 1-10. The data in this column would be considered skewed if there is a disproportionally large number of rows for a particular value. So, if the table contains 10 million rows and 9 million of those rows have the value of `5` then the data would be considered skewed. This is particularly problematic when the column is used in a join condition.\n\nThis is particularly problematic because with skewed data a few tasks have to do significantly more work than other tasks and this defeats the purpose of parallelism and it could also lead to out of memory errors. Skewness could exists in the base table on certain columns and it could also occur after certain joins. With skewed data problems usually arise during the `MergeSortJoin` step or during grouped aggregates.\n\n#### Detecting Skew\n\nIf your query is executed in Spark you can use the Database Console (Spark UI) to determine if your query could be possibly affected by data skew. You can find your query in the Database Console and look at the Summary Metrics for the stage:\n\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew1.png\"\u003e\n\nHere we see that the `Shuffle Read Size` for the `Min`, `25th Percentile`, `Median`, and `75th Percentile` are relatively the same. However, for the `Max` the amount of data being read is significantly larger. This indicates that this stage in the query execution is suffering from data skewness.\n\nAnother way we can detect skew is to look at the individual tasks for a stage in the Database Console:\n\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew2.png\"\u003e\n\nHere we see that the first task listed has a `Shuffle Read Size / Records` value that is significantly larger than the other tasks. This is also an indication that this query is under performing due to skew issues in the data.\n\nYou can also use SQL to determine if there is skew in your data. Let\u0027s run through an example. We\u0027ve created some skewed data for you. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create the example.\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 19:20:37.937",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e3. Query Performance Problems\u003c/h2\u003e\n\u003cp\u003eWhen query performance is not up to par, there can be several reasons why a query doesn\u0026rsquo;t perform as well as expected. In this section we will dive in and take a look at some of the more common problems that can lead to poor query performance and how you can resolve them. Before you read on the most important thing to remember is to make sure statistics have been collected on all your table.\u003c/p\u003e\n\u003cp\u003eSpecifically we will take a look at:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eData Skew\u003c/li\u003e\n  \u003cli\u003eAccess Path\u003c/li\u003e\n  \u003cli\u003eNested Loop Joins\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eData Skew\u003c/h3\u003e\n\u003cp\u003eIn the most simplest term data skew primarily refers to a non uniform distribution in a dataset. For example, let\u0026rsquo;s say you have a column in a table whose range of values is from 1-10. The data in this column would be considered skewed if there is a disproportionally large number of rows for a particular value. So, if the table contains 10 million rows and 9 million of those rows have the value of \u003ccode\u003e5\u003c/code\u003e then the data would be considered skewed. This is particularly problematic when the column is used in a join condition.\u003c/p\u003e\n\u003cp\u003eThis is particularly problematic because with skewed data a few tasks have to do significantly more work than other tasks and this defeats the purpose of parallelism and it could also lead to out of memory errors. Skewness could exists in the base table on certain columns and it could also occur after certain joins. With skewed data problems usually arise during the \u003ccode\u003eMergeSortJoin\u003c/code\u003e step or during grouped aggregates.\u003c/p\u003e\n\u003ch4\u003eDetecting Skew\u003c/h4\u003e\n\u003cp\u003eIf your query is executed in Spark you can use the Database Console (Spark UI) to determine if your query could be possibly affected by data skew. You can find your query in the Database Console and look at the Summary Metrics for the stage:\u003c/p\u003e\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew1.png\"\u003e\n\u003cp\u003eHere we see that the \u003ccode\u003eShuffle Read Size\u003c/code\u003e for the \u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003e25th Percentile\u003c/code\u003e, \u003ccode\u003eMedian\u003c/code\u003e, and \u003ccode\u003e75th Percentile\u003c/code\u003e are relatively the same. However, for the \u003ccode\u003eMax\u003c/code\u003e the amount of data being read is significantly larger. This indicates that this stage in the query execution is suffering from data skewness.\u003c/p\u003e\n\u003cp\u003eAnother way we can detect skew is to look at the individual tasks for a stage in the Database Console:\u003c/p\u003e\n\u003cimg src\u003d\"https://splice-training.s3.amazonaws.com/external/images/skew2.png\"\u003e\n\u003cp\u003eHere we see that the first task listed has a \u003ccode\u003eShuffle Read Size / Records\u003c/code\u003e value that is significantly larger than the other tasks. This is also an indication that this query is under performing due to skew issues in the data.\u003c/p\u003e\n\u003cp\u003eYou can also use SQL to determine if there is skew in your data. Let\u0026rsquo;s run through an example. We\u0026rsquo;ve created some skewed data for you. Click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create the example.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559764112091_-1490678783",
      "id": "20190605-194832_1949998783",
      "dateCreated": "2019-06-05 19:48:32.091",
      "dateStarted": "2019-06-06 19:20:37.937",
      "dateFinished": "2019-06-06 19:20:37.953",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE TABLE DEV3.LINEITEM_WITH_SKEW (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n );\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027LINEITEM_WITH_SKEW\u0027, null, \u0027s3a://splice-training/external/data/lineitem-with-skew.csv.gz\u0027, null, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\nANALYZE TABLE DEV3.LINEITEM_WITH_SKEW;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:50:45.580",
      "config": {
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "2": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "schemaName": "string",
                      "tableName": "string",
                      "partition": "string",
                      "rowsCollected": "string",
                      "partitionSize": "string",
                      "partitionCount": "string",
                      "statsType": "string",
                      "sampleFraction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "3": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "partitionSize": "string",
                      "statsType": "string",
                      "sampleFraction": "string",
                      "partitionCount": "string",
                      "partition": "string",
                      "tableName": "string",
                      "rowsCollected": "string",
                      "schemaName": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "completionSupport": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n16486975\t0\t1\t369671075\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tLINEITEM_WITH_SKEW\t-All-\t16486975\t1492858323\t70\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559771421261_221758633",
      "id": "20190605-215021_1418264474",
      "dateCreated": "2019-06-05 21:50:21.261",
      "dateStarted": "2019-06-10 18:20:06.997",
      "dateFinished": "2019-06-10 18:47:37.038",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow that we have our example created let\u0027s click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to use SQL to detect the skewness of the data.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:12:36.879",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow that we have our example created let\u0026rsquo;s click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to use SQL to detect the skewness of the data.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559771566544_1231274781",
      "id": "20190605-215246_785513521",
      "dateCreated": "2019-06-05 21:52:46.544",
      "dateStarted": "2019-06-06 17:12:36.880",
      "dateFinished": "2019-06-06 17:12:36.885",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nSELECT COUNT(*) AS NUM_RECORDS, MIN(CC) AS SMALLEST_VALUE, MAX(CC) AS LARGEST_VALUE, AVG(CC) AS AVERAGE_VALUE FROM\n(SELECT L_ORDERKEY, COUNT(*) AS CC\n FROM DEV3.LINEITEM_WITH_SKEW\n GROUP BY 1) DT;\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:12:58.639",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "LARGEST_VALUE": "string",
                      "NUM_RECORDS": "string",
                      "AVERAGE_VALUE": "string",
                      "SMALLEST_VALUE": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "completionSupport": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "NUM_RECORDS\tSMALLEST_VALUE\tLARGEST_VALUE\tAVERAGE_VALUE\n1500000\t1\t10485766\t10\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559771694899_1367539777",
      "id": "20190605-215454_1409519102",
      "dateCreated": "2019-06-05 21:54:54.899",
      "dateStarted": "2019-06-10 19:13:01.957",
      "dateFinished": "2019-06-10 19:14:48.214",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nThe query we just ran is checking for skewness on the `L_ORDERKEY` column. This query groups the rows by the `L_ORDERKEY` and counts the number of records for each `L_ORDERKEY` value. A couple of things tell us that there is skew in this data. The difference between the `SMALLEST_VALUE` and `LARGEST_VALUE` is very big. Also, the difference between the `AVERAGE_VALUE` and the `LARGEST_VALUE` is also very big. There is an average of 10 records per order key value but there this one order key that has 10,485,766 rows.\n\n#### Handling Skew\n\nWe can\u0027t change the data to eliminate skew but there are a few things that we can try that will help alleviate and in some cases avoid skewness of data.\n\n##### Broadcast Join\n\nIn most cases the shuffling of data during a mergesort join is problematic when there is skewness of data in one of the join columns. This presents itself in the spark tasks where you see that one task reads the majority of the data therby taking much longer to complete compared to all other tasks for the stage. If the right hand side of the join is small enough you can try hinting the join to use the `BROADCAST` join strategy.\n\nFor example:\n\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L --SPLICE-PROPERTIES joinStrategy\u003dBROADCAST\nON O.O_ORDERKEY \u003d L.L_ORDERKEY;\n\u003c/pre\u003e\n\nNote that we wouldn\u0027t actually recommend the query above because we know the right hand side table `LINEITEM_WITH_SKEW` is a large table. The example is purely for demonstrating how to apply a hint to use the `BROADCAST` join strategy.\n\n##### Split the Skewed Table and use Union All\n\nAnother method for handling skew is to split the query into two parts with one part extracting the skewed value and the second part handling the remaining values then using a `UNION ALL` to merge the result sets. We know that our skewed data is on the order key value of `1`.\n\nHere is an example of a rewrite:\n\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003d 1\nUNION ALL\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003c\u003e 1\n\u003c/pre\u003e\n\n##### Introduce a Non-Skewed Join Column\n\nIf possible you can introduce a non-skewed join column to the query. This is typically accomplished by rewriting the query to use the `WITH` statement.\n\nFor example:\n\n\u003cpre\u003e\nWITH DT as (SELECT * FROM DEV3.ORDERS O)\nSELECT * FROM DT\nWHERE EXISTS (SELECT 1 FROM DEV3.LINEITEM_WITH_SKEW L WHERE L.L_ORDERKEY \u003d DT.O_ORDERKEY)\n\u003c/pre\u003e\n\n##### Other Methods and Future Improvements\n\nIf you are joining multiple tables you may be able to alleviate skew issues by delaying the skewed join. This can be accomplished by using the `joinOrder\u003dFIXED` method and by experimenting with the order of tables in which they are joined.\n\nConstant improvements are being made to the optimizer to help with skewness and reduce the need for rewrites or query hints. Some improvements that are being worked on include salting skewed values to make them unique and pushiing aggregation down before the join.\n\n### Access Path\n\nThe access path to the data can have a huge affect on the performance of a query. Access path refers to how we are reading the data. Are we scanning the entire table? Are we using a primary key?\n\nA full table scan appears as a `TableScan` operation in the explain plan. Primary key access also displays as a `TableScan` but the number of rows scanned would be smaller than the total number of rows in the table\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see the explain plan for selecting from a table using a full table scan.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:11:16.600",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eThe query we just ran is checking for skewness on the \u003ccode\u003eL_ORDERKEY\u003c/code\u003e column. This query groups the rows by the \u003ccode\u003eL_ORDERKEY\u003c/code\u003e and counts the number of records for each \u003ccode\u003eL_ORDERKEY\u003c/code\u003e value. A couple of things tell us that there is skew in this data. The difference between the \u003ccode\u003eSMALLEST_VALUE\u003c/code\u003e and \u003ccode\u003eLARGEST_VALUE\u003c/code\u003e is very big. Also, the difference between the \u003ccode\u003eAVERAGE_VALUE\u003c/code\u003e and the \u003ccode\u003eLARGEST_VALUE\u003c/code\u003e is also very big. There is an average of 10 records per order key value but there this one order key that has 10,485,766 rows.\u003c/p\u003e\n\u003ch4\u003eHandling Skew\u003c/h4\u003e\n\u003cp\u003eWe can\u0026rsquo;t change the data to eliminate skew but there are a few things that we can try that will help alleviate and in some cases avoid skewness of data.\u003c/p\u003e\n\u003ch5\u003eBroadcast Join\u003c/h5\u003e\n\u003cp\u003eIn most cases the shuffling of data during a mergesort join is problematic when there is skewness of data in one of the join columns. This presents itself in the spark tasks where you see that one task reads the majority of the data therby taking much longer to complete compared to all other tasks for the stage. If the right hand side of the join is small enough you can try hinting the join to use the \u003ccode\u003eBROADCAST\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L --SPLICE-PROPERTIES joinStrategy\u003dBROADCAST\nON O.O_ORDERKEY \u003d L.L_ORDERKEY;\n\u003c/pre\u003e\n\u003cp\u003eNote that we wouldn\u0026rsquo;t actually recommend the query above because we know the right hand side table \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e is a large table. The example is purely for demonstrating how to apply a hint to use the \u003ccode\u003eBROADCAST\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003ch5\u003eSplit the Skewed Table and use Union All\u003c/h5\u003e\n\u003cp\u003eAnother method for handling skew is to split the query into two parts with one part extracting the skewed value and the second part handling the remaining values then using a \u003ccode\u003eUNION ALL\u003c/code\u003e to merge the result sets. We know that our skewed data is on the order key value of \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is an example of a rewrite:\u003c/p\u003e\n\u003cpre\u003e\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003d 1\nUNION ALL\nSELECT * FROM DEV3.ORDERS O\nJOIN DEV3.LINEITEM_WITH_SKEW L\nON O.O_ORDERKEY \u003d L.L_ORDERKEY\nWHERE O.O_ORDERKEY \u003c\u003e 1\n\u003c/pre\u003e\n\u003ch5\u003eIntroduce a Non-Skewed Join Column\u003c/h5\u003e\n\u003cp\u003eIf possible you can introduce a non-skewed join column to the query. This is typically accomplished by rewriting the query to use the \u003ccode\u003eWITH\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\nWITH DT as (SELECT * FROM DEV3.ORDERS O)\nSELECT * FROM DT\nWHERE EXISTS (SELECT 1 FROM DEV3.LINEITEM_WITH_SKEW L WHERE L.L_ORDERKEY \u003d DT.O_ORDERKEY)\n\u003c/pre\u003e\n\u003ch5\u003eOther Methods and Future Improvements\u003c/h5\u003e\n\u003cp\u003eIf you are joining multiple tables you may be able to alleviate skew issues by delaying the skewed join. This can be accomplished by using the \u003ccode\u003ejoinOrder\u003dFIXED\u003c/code\u003e method and by experimenting with the order of tables in which they are joined.\u003c/p\u003e\n\u003cp\u003eConstant improvements are being made to the optimizer to help with skewness and reduce the need for rewrites or query hints. Some improvements that are being worked on include salting skewed values to make them unique and pushiing aggregation down before the join.\u003c/p\u003e\n\u003ch3\u003eAccess Path\u003c/h3\u003e\n\u003cp\u003eThe access path to the data can have a huge affect on the performance of a query. Access path refers to how we are reading the data. Are we scanning the entire table? Are we using a primary key?\u003c/p\u003e\n\u003cp\u003eA full table scan appears as a \u003ccode\u003eTableScan\u003c/code\u003e operation in the explain plan. Primary key access also displays as a \u003ccode\u003eTableScan\u003c/code\u003e but the number of rows scanned would be smaller than the total number of rows in the table\u003c/p\u003e\n\u003cp\u003eclick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see the explain plan for selecting from a table using a full table scan.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559831860209_-23237565",
      "id": "20190606-143740_975770926",
      "dateCreated": "2019-06-06 14:37:40.209",
      "dateStarted": "2019-06-06 17:07:23.311",
      "dateFinished": "2019-06-06 17:07:23.323",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select * from DEV3.LINEITEM_WITH_SKEW;\n",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:15:14.437",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "L_ORDERKEY": "string",
                      "O_ORDERDATE": "string",
                      "O_COMMENT": "string",
                      "L_EXTENDEDPRICE": "string",
                      "L_TAX": "string",
                      "O_ORDERKEY": "string",
                      "L_SUPPKEY": "string",
                      "L_LINESTATUS": "string",
                      "L_PARTKEY": "string",
                      "L_COMMITDATE": "string",
                      "L_RETURNFLAG": "string",
                      "L_RECEIPTDATE": "string",
                      "L_SHIPMODE": "string",
                      "L_SHIPDATE": "string",
                      "L_QUANTITY": "string",
                      "L_COMMENT": "string",
                      "O_TOTALPRICE": "string",
                      "L_DISCOUNT": "string",
                      "O_CLERK": "string",
                      "O_SHIPPRIORITY": "string",
                      "L_SHIPINSTRUCT": "string",
                      "O_ORDERPRIORITY": "string",
                      "L_LINENUMBER": "string",
                      "O_CUSTKEY": "string",
                      "O_ORDERSTATUS": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d210693.508,outputRows\u003d16486975,outputHeapSize\u003d1.382 GB,partitions\u003d70)\n    -\u003e  TableScan[LINEITEM_WITH_SKEW(1680)](n\u003d1,totalCost\u003d31329.252,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d1.382 GB,partitions\u003d70)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559836312942_1198819883",
      "id": "20190606-155152_1430084522",
      "dateCreated": "2019-06-06 15:51:52.942",
      "dateStarted": "2019-06-10 19:15:15.112",
      "dateFinished": "2019-06-10 19:15:15.420",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `TableScan` operation is performed on the `LINEITEM_WITH_SKEW` table. Note that the number of `scannedRows` is 16486975. This is the total number of rows in the table.\n\nNow click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see the explain plan for selecting from a table using a primary key access path.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:56:48.120",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eTableScan\u003c/code\u003e operation is performed on the \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e table. Note that the number of \u003ccode\u003escannedRows\u003c/code\u003e is 16486975. This is the total number of rows in the table.\u003c/p\u003e\n\u003cp\u003eNow click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see the explain plan for selecting from a table using a primary key access path.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559840859562_-1653376678",
      "id": "20190606-170739_1448771423",
      "dateCreated": "2019-06-06 17:07:39.562",
      "dateStarted": "2019-06-06 17:16:36.371",
      "dateFinished": "2019-06-06 17:16:36.376",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nexplain select * from DEV3.LINEITEM_WITH_SKEW WHERE L_ORDERKEY \u003d 10;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:15:27.669",
      "config": {
        "enabled": true,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d3,updateMode\u003dREAD_ONLY (1),engine\u003dcontrol)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d8.038,outputRows\u003d3,outputHeapSize\u003d270 B,partitions\u003d70)\n    -\u003e  TableScan[LINEITEM_WITH_SKEW(1680)](n\u003d1,totalCost\u003d4.006,scannedRows\u003d3,outputRows\u003d3,outputHeapSize\u003d270 B,partitions\u003d70,preds\u003d[(L_ORDERKEY[0:1] \u003d 10)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559840649598_-201793566",
      "id": "20190606-170409_777962589",
      "dateCreated": "2019-06-06 17:04:09.598",
      "dateStarted": "2019-06-10 19:15:27.944",
      "dateFinished": "2019-06-10 19:15:28.227",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `TableScan` operation is performed on the `LINEITEM_WITH_SKEW` table but notice that the number of `scannedRows` is 3. Reading through 3 rows is a whole lot faster than reading through 16486975 rows.\n\nIndexes are another access path that can help improve the peformance of a query. In Splice Machine we refer to indexes as either a covering index or a non-covering index. \n\n#### Covering Index\n\nIf all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a covering index for this query. When the number of rows accessed is the same, scanning a covering index is usually more favorable than scanning the base table as the index usually will have a smaller row size.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create an index and view the index access path in the explain plan.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:55:46.405",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eTableScan\u003c/code\u003e operation is performed on the \u003ccode\u003eLINEITEM_WITH_SKEW\u003c/code\u003e table but notice that the number of \u003ccode\u003escannedRows\u003c/code\u003e is 3. Reading through 3 rows is a whole lot faster than reading through 16486975 rows.\u003c/p\u003e\n\u003cp\u003eIndexes are another access path that can help improve the peformance of a query. In Splice Machine we refer to indexes as either a covering index or a non-covering index. \u003c/p\u003e\n\u003ch4\u003eCovering Index\u003c/h4\u003e\n\u003cp\u003eIf all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a covering index for this query. When the number of rows accessed is the same, scanning a covering index is usually more favorable than scanning the base table as the index usually will have a smaller row size.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create an index and view the index access path in the explain plan.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559841291021_-300398730",
      "id": "20190606-171451_146932109",
      "dateCreated": "2019-06-06 17:14:51.021",
      "dateStarted": "2019-06-06 17:29:29.924",
      "dateFinished": "2019-06-06 17:29:29.930",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE INDEX DEV3.IDX_LINEITEM1 ON DEV3.LINEITEM_WITH_SKEW(L_PARTKEY, L_QUANTITY);\n\nEXPLAIN SELECT L_PARTKEY, L_QUANTITY FROM DEV3.LINEITEM_WITH_SKEW; ",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:15:37.413",
      "config": {
        "enabled": true,
        "results": {
          "2": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "partitionSize": "string",
                      "statsType": "string",
                      "sampleFraction": "string",
                      "partitionCount": "string",
                      "partition": "string",
                      "tableName": "string",
                      "rowsCollected": "string",
                      "schemaName": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "completionSupport": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d3,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d2,totalCost\u003d184989.605,outputRows\u003d16486975,outputHeapSize\u003d176.886 MB,partitions\u003d70)\n    -\u003e  IndexScan[IDX_LINEITEM1(1697)](n\u003d1,totalCost\u003d18304.542,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d176.886 MB,partitions\u003d70,baseTable\u003dLINEITEM_WITH_SKEW(1680))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559836167039_108811212",
      "id": "20190606-154927_2089212219",
      "dateCreated": "2019-06-06 15:49:27.039",
      "dateStarted": "2019-06-10 19:15:37.611",
      "dateFinished": "2019-06-10 19:25:19.939",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that the `IndexScan` operation is performed using the `IDX_LINEITEM1` index.\n\n#### Non-Covering Index\n\nIf not all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a non-covering index. The use of a non-covering index incurs the extra cost to lookup the values of column(s) not covered by the index from the base table for each qualified row. This may or may not be a better choice than a full table scan depending on the data and the query.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to view the explain plan for a query that uses a non-covering index.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 17:42:01.792",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that the \u003ccode\u003eIndexScan\u003c/code\u003e operation is performed using the \u003ccode\u003eIDX_LINEITEM1\u003c/code\u003e index.\u003c/p\u003e\n\u003ch4\u003eNon-Covering Index\u003c/h4\u003e\n\u003cp\u003eIf not all columns referenced in a query belonging to a particular table are covered by an index defined on that table, that index is called a non-covering index. The use of a non-covering index incurs the extra cost to lookup the values of column(s) not covered by the index from the base table for each qualified row. This may or may not be a better choice than a full table scan depending on the data and the query.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to view the explain plan for a query that uses a non-covering index.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559842572789_2075740225",
      "id": "20190606-173612_579152941",
      "dateCreated": "2019-06-06 17:36:12.789",
      "dateStarted": "2019-06-06 17:42:01.792",
      "dateFinished": "2019-06-06 17:42:01.797",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nEXPLAIN SELECT L_PARTKEY, L_QUANTITY, L_EXTENDEDPRICE FROM DEV3.LINEITEM_WITH_SKEW --splice-properties index\u003dIDX_LINEITEM1",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:25:46.088",
      "config": {
        "enabled": true,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "completionSupport": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d4,rows\u003d16486975,updateMode\u003dREAD_ONLY (1),engine\u003dSpark)\n  -\u003e  ScrollInsensitive(n\u003d3,totalCost\u003d66133795.261,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d70)\n    -\u003e  IndexLookup(n\u003d2,totalCost\u003d65966204.542,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d70)\n      -\u003e  IndexScan[IDX_LINEITEM1(1697)](n\u003d1,totalCost\u003d18304.542,scannedRows\u003d16486975,outputRows\u003d16486975,outputHeapSize\u003d265.329 MB,partitions\u003d70,baseTable\u003dLINEITEM_WITH_SKEW(1680))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559842929062_-1393012132",
      "id": "20190606-174209_1145609668",
      "dateCreated": "2019-06-06 17:42:09.062",
      "dateStarted": "2019-06-10 19:25:47.507",
      "dateFinished": "2019-06-10 19:25:49.770",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that there is an additional step `IndexLookup` that needs to be performed for every row returned by the `IndexScan` step. As previously stated, this may or may not be as perfomant when compared to doing a full table scan. It really depends on the amount of data and the particular query.\n\n### Nested Loop Joins\n\nNested loop joins work for all kinds of join conditions (equality or non-equality). When an equality join condition is present, nested loop join’s performance usually is not as good as the other 3 join strategies (broadcast, sortmerge and merge join). The exception is when the left hand side table has a small amount of rows to read and the join with the right hand side table uses a leading pk/index column with low selectivity.\n\nClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to create some tables and load some data.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:35:20.924",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that there is an additional step \u003ccode\u003eIndexLookup\u003c/code\u003e that needs to be performed for every row returned by the \u003ccode\u003eIndexScan\u003c/code\u003e step. As previously stated, this may or may not be as perfomant when compared to doing a full table scan. It really depends on the amount of data and the particular query.\u003c/p\u003e\n\u003ch3\u003eNested Loop Joins\u003c/h3\u003e\n\u003cp\u003eNested loop joins work for all kinds of join conditions (equality or non-equality). When an equality join condition is present, nested loop join’s performance usually is not as good as the other 3 join strategies (broadcast, sortmerge and merge join). The exception is when the left hand side table has a small amount of rows to read and the join with the right hand side table uses a leading pk/index column with low selectivity.\u003c/p\u003e\n\u003cp\u003eClick the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to create some tables and load some data.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559843136152_365547232",
      "id": "20190606-174536_192468277",
      "dateCreated": "2019-06-06 17:45:36.152",
      "dateStarted": "2019-06-06 18:35:20.924",
      "dateFinished": "2019-06-06 18:35:20.931",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nCREATE TABLE DEV3.LINEITEM (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n);\n\nCREATE TABLE DEV3.SUPPLIER (\n S_SUPPKEY INTEGER NOT NULL PRIMARY KEY,\n S_NAME VARCHAR(25) ,\n S_ADDRESS VARCHAR(40) ,\n S_NATIONKEY INTEGER ,\n S_PHONE VARCHAR(15) ,\n S_ACCTBAL DECIMAL(15,2),\n S_COMMENT VARCHAR(101)\n); \n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027LINEITEM\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/lineitem\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA (\u0027DEV3\u0027, \u0027SUPPLIER\u0027, null, \u0027s3a://splice-benchmark-data/flat/TPCH/1/supplier\u0027, \u0027|\u0027, null, null, null, null, 0, \u0027/tmp\u0027, true, null);\n\nANALYZE TABLE DEV3.LINEITEM;\n\nANALYZE TABLE DEV3.SUPPLIER;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:50:45.992",
      "config": {
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "L_ORDERKEY": "string",
                      "O_ORDERDATE": "string",
                      "O_COMMENT": "string",
                      "L_EXTENDEDPRICE": "string",
                      "L_TAX": "string",
                      "O_ORDERKEY": "string",
                      "L_SUPPKEY": "string",
                      "L_LINESTATUS": "string",
                      "L_PARTKEY": "string",
                      "L_COMMITDATE": "string",
                      "L_RETURNFLAG": "string",
                      "L_RECEIPTDATE": "string",
                      "L_SHIPMODE": "string",
                      "L_SHIPDATE": "string",
                      "L_QUANTITY": "string",
                      "L_COMMENT": "string",
                      "O_TOTALPRICE": "string",
                      "L_DISCOUNT": "string",
                      "O_CLERK": "string",
                      "O_SHIPPRIORITY": "string",
                      "L_SHIPINSTRUCT": "string",
                      "O_ORDERPRIORITY": "string",
                      "L_LINENUMBER": "string",
                      "O_CUSTKEY": "string",
                      "O_ORDERSTATUS": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          },
          "2": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "3": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "rowsImported": "string",
                      "failedRows": "string",
                      "files": "string",
                      "dataSize": "string",
                      "failedLog": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "4": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "partitionSize": "string",
                      "statsType": "string",
                      "sampleFraction": "string",
                      "partitionCount": "string",
                      "partition": "string",
                      "tableName": "string",
                      "rowsCollected": "string",
                      "schemaName": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          },
          "5": {
            "graph": {
              "commonSetting": {},
              "optionOpen": false,
              "setting": {
                "table": {
                  "updated": false,
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "updated": false,
                    "names": {
                      "partitionSize": "string",
                      "statsType": "string",
                      "sampleFraction": "string",
                      "partitionCount": "string",
                      "partition": "string",
                      "tableName": "string",
                      "rowsCollected": "string",
                      "schemaName": "string"
                    }
                  },
                  "tableOptionValue": {
                    "showPagination": false,
                    "useFilter": false,
                    "showAggregationFooter": false
                  },
                  "initialized": false,
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]"
                }
              },
              "mode": "table",
              "height": 300.0
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "completionSupport": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n6001215\t0\t1\t759863287\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n10000\t0\t1\t1409184\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tLINEITEM\t-All-\t6001215\t528106920\t13\t2\t0.0\n"
          },
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nDEV3\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559843786150_305412682",
      "id": "20190606-175626_19528643",
      "dateCreated": "2019-06-06 17:56:26.150",
      "dateStarted": "2019-06-10 19:26:32.272",
      "dateFinished": "2019-06-10 19:38:28.014",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nNow that we are all setup click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e *Run* button in the next paragraph to see an example of a perfect use case for a nested loop join.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 18:36:37.184",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eNow that we are all setup click the \u003cimg class\u003d\"inline\" src\u003d\"https://doc.splicemachine.com/zeppelin/images/zepPlayIcon.png\" alt\u003d\"Run Zep Paragraph Icon\"\u003e \u003cem\u003eRun\u003c/em\u003e button in the next paragraph to see an example of a perfect use case for a nested loop join.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559846130621_-1425673930",
      "id": "20190606-183530_57730438",
      "dateCreated": "2019-06-06 18:35:30.621",
      "dateStarted": "2019-06-06 18:36:37.185",
      "dateFinished": "2019-06-06 18:36:37.191",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%splicemachine\n\nEXPLAIN select count(*) from \ndev3.lineitem, dev3.supplier\nwhere l_suppkey\u003d s_suppkey and l_partkey \u003d 1 and  L_orderkey \u003d 5120486;",
      "user": "anonymous",
      "dateUpdated": "2019-06-10 19:49:58.784",
      "config": {
        "enabled": true,
        "results": {},
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n\u003d8,rows\u003d1,updateMode\u003dREAD_ONLY (1),engine\u003dcontrol)\n  -\u003e  ScrollInsensitive(n\u003d7,totalCost\u003d76.504,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n    -\u003e  ProjectRestrict(n\u003d6,totalCost\u003d5.238,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d1)\n      -\u003e  GroupBy(n\u003d5,totalCost\u003d1.232,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d13)\n        -\u003e  ProjectRestrict(n\u003d4,totalCost\u003d4.002,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d13)\n          -\u003e  NestedLoopJoin(n\u003d3,totalCost\u003d1.232,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d13)\n            -\u003e  TableScan[SUPPLIER(1728)](n\u003d2,totalCost\u003d4.002,scannedRows\u003d1,outputRows\u003d1,outputHeapSize\u003d19 B,partitions\u003d13,preds\u003d[(L_SUPPKEY[1:3] \u003d S_SUPPKEY[2:1])])\n            -\u003e  TableScan[LINEITEM(1712)](n\u003d1,totalCost\u003d4.006,scannedRows\u003d3,outputRows\u003d1,outputHeapSize\u003d0 B,partitions\u003d13,preds\u003d[(L_PARTKEY[0:2] \u003d 1),(L_ORDERKEY[0:1] \u003d 5120486)])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1559845023227_271836833",
      "id": "20190606-181703_1285210065",
      "dateCreated": "2019-06-06 18:17:03.227",
      "dateStarted": "2019-06-10 19:49:59.577",
      "dateFinished": "2019-06-10 19:50:00.834",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cbr/\u003e\nYou can see that both tables have a very small number of `scannedRows` which is the perfect case for a nested loop join.\n\nIn the event that your query uses a nested loop join on tables with many rows on both sides of the join the recommended solution would be to apply a hint to use either a `BROADCAST` or `SORTMERGE` join strategy.",
      "user": "anonymous",
      "dateUpdated": "2019-06-06 19:20:53.147",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003eYou can see that both tables have a very small number of \u003ccode\u003escannedRows\u003c/code\u003e which is the perfect case for a nested loop join.\u003c/p\u003e\n\u003cp\u003eIn the event that your query uses a nested loop join on tables with many rows on both sides of the join the recommended solution would be to apply a hint to use either a \u003ccode\u003eBROADCAST\u003c/code\u003e or \u003ccode\u003eSORTMERGE\u003c/code\u003e join strategy.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559847747495_-141520462",
      "id": "20190606-190227_194318523",
      "dateCreated": "2019-06-06 19:02:27.495",
      "dateStarted": "2019-06-06 19:20:53.148",
      "dateFinished": "2019-06-06 19:20:53.153",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\nThe next notebook in this class, [*Prepared Statements*](/#/notebook/2EBF46WCA), teaches you how to use prepared statements for querying your databases.\n",
      "user": "anonymous",
      "dateUpdated": "2019-05-31 17:47:07.910",
      "config": {
        "editorHide": true,
        "enabled": false,
        "results": {},
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "completionSupport": false,
          "language": "markdown"
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "msg": [
          {
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eThe next notebook in this class, \u003ca href\u003d\"/#/notebook/2EBF46WCA\"\u003e\u003cem\u003ePrepared Statements\u003c/em\u003e\u003c/a\u003e, teaches you how to use prepared statements for querying your databases.\u003c/p\u003e\n\u003c/div\u003e",
            "type": "HTML"
          }
        ],
        "code": "SUCCESS"
      },
      "apps": [],
      "jobName": "paragraph_1559324811337_1783166124",
      "id": "20190531-174651_964241124",
      "dateCreated": "2019-05-31 17:46:51.337",
      "dateStarted": "2019-05-31 17:47:07.910",
      "dateFinished": "2019-05-31 17:47:07.924",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training /Advanced Developer/f. Query Optimization",
  "id": "2EETJQH1J",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "splicemachine:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}