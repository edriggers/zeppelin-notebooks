{
  "noteForms": {}, 
  "angularObjects": {
    "splicemachine:shared_process": [], 
    "md:shared_process": []
  }, 
  "name": "Splice Machine Training / For All: Basic Training / Splice Machine Basics", 
  "info": {}, 
  "noteParams": {}, 
  "paragraphs": [
    {
      "status": "FINISHED", 
      "dateFinished": "2018-12-12 23:04:05.210", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n\n# Splice Machine Basics\n\nSplice Machine is a scale-out SQL RDBMS, Data Warehouse, and Machine Learning Platform in one, seamlessly integrating analytics and AI into your mission-critical applications.\n\nThis notebook gives a brief introduction to Splice Machine's capabilities in the following sections:\n\n<ul class=\"italic\">\n    <li>Hybrid Transactional and Analytical Processing</li>\n    <li>ANSI SQL Coverage</li>\n    <li>Architecture Overview</li>\n    <li>Technology Stack Overview</li>\n    <li>Internal Storage Using HBase</li>\n</ul>\n\nOnce you've read through this notebook, we encourage you to spend an hour or two learning more about Splice Machine by engaging in one or more of our [Training Classes](/#/notebook/2DWTR5ZBH).\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" />\n<h1>Splice Machine Basics</h1>\n<p>Splice Machine is a scale-out SQL RDBMS, Data Warehouse, and Machine Learning Platform in one, seamlessly integrating analytics and AI into your mission-critical applications.</p>\n<p>This notebook gives a brief introduction to Splice Machine&rsquo;s capabilities in the following sections:</p>\n<ul class=\"italic\">\n    <li>Hybrid Transactional and Analytical Processing</li>\n    <li>ANSI SQL Coverage</li>\n    <li>Architecture Overview</li>\n    <li>Technology Stack Overview</li>\n    <li>Internal Storage Using HBase</li>\n</ul>\n<p>Once you&rsquo;ve read through this notebook, we encourage you to spend an hour or two learning more about Splice Machine by engaging in one or more of our <a href=\"/#/notebook/2DWTR5ZBH\">Training Classes</a>.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232093_-508053973", 
      "user": "anonymous", 
      "dateStarted": "2018-12-12 23:04:05.199", 
      "dateUpdated": "2018-12-12 23:04:05.199", 
      "dateCreated": "2018-11-19 14:57:12.093", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-141757_1025631852", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Hybrid Transactional and Analytical Processing\n\nSplice Machine has a unique *Dual Engine* architecture that it uses to provide outstanding performance for concurrent transactional (OLTP) and analytical (OLAP) workloads. The SQL parser and cost-based optimizer analyze an incoming query and then determine the best execution plan based on query type, data sizes, available indexes and more. Based on that analysis, Splice Machine:\n\n* Deploys HBase for OLTP-type lookups, inserts and short range scans\n* Uses Spark for lightning-fast in-memory processing of analytical workloads.\n\nThe Dual Engine architecture gives you the best of multiple worlds in a hybrid database: the performance, scale-out, and resilience of HBase, the in-memory analytics performance of Spark, and the performance of a cost-based optimizer.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Hybrid Transactional and Analytical Processing</h2>\n<p>Splice Machine has a unique <em>Dual Engine</em> architecture that it uses to provide outstanding performance for concurrent transactional (OLTP) and analytical (OLAP) workloads. The SQL parser and cost-based optimizer analyze an incoming query and then determine the best execution plan based on query type, data sizes, available indexes and more. Based on that analysis, Splice Machine:</p>\n<ul>\n  <li>Deploys HBase for OLTP-type lookups, inserts and short range scans</li>\n  <li>Uses Spark for lightning-fast in-memory processing of analytical workloads.</li>\n</ul>\n<p>The Dual Engine architecture gives you the best of multiple worlds in a hybrid database: the performance, scale-out, and resilience of HBase, the in-memory analytics performance of Spark, and the performance of a cost-based optimizer.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232094_-885192667", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 04:17:41.159", 
      "dateCreated": "2018-11-19 14:57:12.094", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-141830_1881954222", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## ANSI SQL Coverage\n\nUnlike other Big Data systems, Splice Machine supports full [ANSI SQL-2003](https://doc.splicemachine.com/sqlref_sqlsummary.html); here's a quick summary of our coverage:\n\n<table class=\"splicezep\" summary=\"Summary of SQL features available in Splice Machine.\">\n    <colgroup>\n       <col>\n      <col>\n    </colgroup>\n    <thead>\n        <tr>\n            <th>Feature</th>\n            <th>Examples</th>\n        </tr>\n    </thead>\n   <tbody>\n        <tr>\n            <td><em>Aggregation functions</em></td>\n            <td><code>AVG, COUNT, MAX, MIN, STDDEV_POP, STDDEV_SAMP, SUM</code></td>\n        </tr>\n        <tr>\n            <td><em>Conditional functions</em></td>\n            <td><code>CASE, searched CASE</code></td>\n        </tr>\n        <tr>\n            <td><em>Data Types</em></td>\n            <td><code>INTEGER, REAL, CHARACTER, DATE, BOOLEAN, BIGINT</code></td>\n        </tr>\n        <tr>\n            <td><em>DDL</em></td>\n            <td><code>CREATE TABLE, CREATE&nbsp;SCHEMA, CREATE&nbsp;INDEX, ALTER&nbsp;TABLE, DELETE, UPDATE</code></td>\n        </tr>\n        <tr>\n            <td><em>DML</em></td>\n            <td><code>INSERT, DELETE, UPDATE, SELECT</code></td>\n        </tr>\n        <tr>\n            <td><em>Isolation Levels</em></td>\n            <td>Snapshot isolation</td>\n        </tr>\n        <tr>\n            <td><em>Joins</em></td>\n            <td><code>INNER&nbsp;JOIN, LEFT&nbsp;OUTER&nbsp;JOIN, RIGHT&nbsp;OUTER&nbsp;JOIN</code></td>\n        </tr>\n        <tr>\n            <td><em>Predicates</em></td>\n            <td><code>IN, BETWEEN, LIKE, EXISTS</code></td>\n        </tr>\n        <tr>\n            <td><em>Privileges</em></td>\n            <td>Privileges for <code>SELECT, DELETE, INSERT, EXECUTE</code></td>\n        </tr>\n        <tr>\n            <td><em>Query Specification</em></td>\n            <td><code>SELECT&nbsp;DISTINCT, GROUP&nbsp;BY, HAVING</code></td>\n        </tr>\n        <tr>\n            <td><em>SET&nbsp;functions</em></td>\n            <td><code>UNION, ABS, MOD, ALL, CHECK</code></td>\n        </tr>\n        <tr>\n            <td><em>String functions</em></td>\n            <td><code>CHAR, Concatenation (||), INSTR, LCASE&nbsp;(LOWER), LENGTH,<br>LTRIM, REGEXP_LIKE, REPLACE, RTRIM, SUBSTR, UCASE&nbsp;(UPPER), VARCHAR</code></td>\n        </tr>\n        <tr>\n            <td><em>Sub-queries</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>Transactions</em></td>\n            <td><code>COMMIT, ROLLBACK</code></td>\n        </tr>\n        <tr>\n            <td><em>Triggers</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>User-defined functions (UDFs)</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>Views</em></td>\n            <td>Including grouped views</td>\n        </tr>\n        <tr>\n            <td><em>Window functions</em></td>\n            <td><code>AVG, COUNT, DENSE_RANK, FIRST_VALUE, LAG, LAST_VALUE, LEAD, MAX, MIN, RANK, ROW_NUMBER, STDDEV_POP, STDDEV_SAMP, SUM</code></td>\n        </tr>\n    </tbody>\n</table>\n\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>ANSI SQL Coverage</h2>\n<p>Unlike other Big Data systems, Splice Machine supports full <a href=\"https://doc.splicemachine.com/sqlref_sqlsummary.html\">ANSI SQL-2003</a>; here&rsquo;s a quick summary of our coverage:</p>\n<table class=\"splicezep\" summary=\"Summary of SQL features available in Splice Machine.\">\n    <colgroup>\n       <col>\n      <col>\n    </colgroup>\n    <thead>\n        <tr>\n            <th>Feature</th>\n            <th>Examples</th>\n        </tr>\n    </thead>\n   <tbody>\n        <tr>\n            <td><em>Aggregation functions</em></td>\n            <td><code>AVG, COUNT, MAX, MIN, STDDEV_POP, STDDEV_SAMP, SUM</code></td>\n        </tr>\n        <tr>\n            <td><em>Conditional functions</em></td>\n            <td><code>CASE, searched CASE</code></td>\n        </tr>\n        <tr>\n            <td><em>Data Types</em></td>\n            <td><code>INTEGER, REAL, CHARACTER, DATE, BOOLEAN, BIGINT</code></td>\n        </tr>\n        <tr>\n            <td><em>DDL</em></td>\n            <td><code>CREATE TABLE, CREATE&nbsp;SCHEMA, CREATE&nbsp;INDEX, ALTER&nbsp;TABLE, DELETE, UPDATE</code></td>\n        </tr>\n        <tr>\n            <td><em>DML</em></td>\n            <td><code>INSERT, DELETE, UPDATE, SELECT</code></td>\n        </tr>\n        <tr>\n            <td><em>Isolation Levels</em></td>\n            <td>Snapshot isolation</td>\n        </tr>\n        <tr>\n            <td><em>Joins</em></td>\n            <td><code>INNER&nbsp;JOIN, LEFT&nbsp;OUTER&nbsp;JOIN, RIGHT&nbsp;OUTER&nbsp;JOIN</code></td>\n        </tr>\n        <tr>\n            <td><em>Predicates</em></td>\n            <td><code>IN, BETWEEN, LIKE, EXISTS</code></td>\n        </tr>\n        <tr>\n            <td><em>Privileges</em></td>\n            <td>Privileges for <code>SELECT, DELETE, INSERT, EXECUTE</code></td>\n        </tr>\n        <tr>\n            <td><em>Query Specification</em></td>\n            <td><code>SELECT&nbsp;DISTINCT, GROUP&nbsp;BY, HAVING</code></td>\n        </tr>\n        <tr>\n            <td><em>SET&nbsp;functions</em></td>\n            <td><code>UNION, ABS, MOD, ALL, CHECK</code></td>\n        </tr>\n        <tr>\n            <td><em>String functions</em></td>\n            <td><code>CHAR, Concatenation (||), INSTR, LCASE&nbsp;(LOWER), LENGTH,<br>LTRIM, REGEXP_LIKE, REPLACE, RTRIM, SUBSTR, UCASE&nbsp;(UPPER), VARCHAR</code></td>\n        </tr>\n        <tr>\n            <td><em>Sub-queries</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>Transactions</em></td>\n            <td><code>COMMIT, ROLLBACK</code></td>\n        </tr>\n        <tr>\n            <td><em>Triggers</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>User-defined functions (UDFs)</em></td>\n            <td>Yes</td>\n        </tr>\n        <tr>\n            <td><em>Views</em></td>\n            <td>Including grouped views</td>\n        </tr>\n        <tr>\n            <td><em>Window functions</em></td>\n            <td><code>AVG, COUNT, DENSE_RANK, FIRST_VALUE, LAG, LAST_VALUE, LEAD, MAX, MIN, RANK, ROW_NUMBER, STDDEV_POP, STDDEV_SAMP, SUM</code></td>\n        </tr>\n    </tbody>\n</table>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232095_631512533", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 04:17:48.852", 
      "dateCreated": "2018-11-19 14:57:12.095", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180113-194734_1961030416", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Architecture Overview\n\nThe following diagram is a high-level representation of the architecture of Splice Machine:\n\n<img class=\"fitwidth\" src=\"https://doc.splicemachine.com/zeppelin/images/spliceArch1.png\">\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Architecture Overview</h2>\n<p>The following diagram is a high-level representation of the architecture of Splice Machine:</p>\n<img class=\"fitwidth\" src=\"https://doc.splicemachine.com/zeppelin/images/spliceArch1.png\">\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232097_-1445725140", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 04:17:53.293", 
      "dateCreated": "2018-11-19 14:57:12.097", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-150608_1902680448", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Technology Stack Overview\n\nSplice Machine is built on open-sourced, proven, distributed database technology, including HBase/Hadoop and Spark.\n\n### HBase/Hadoop\n\nThe persistent, durable storage of operational data in Splice Machine resides in the Apache HBase key-value store. HBase:\n\n* is a non-relational (NoSQL) database that runs on top of HDFS\n* provides real-time read/write access to large datasets\n* scales linearly to handle huge data sets with billions of rows and millions of columns\n* is stored row-based and sorted by a primary key to deliver 1ms-10ms lookup speeds and short-range scans\n\n<img class=\"tiny\" src=\"https://hbase.apache.org/images/hbase_logo_with_orca.png\">\n\nHBase uses the Hadoop Distributed File System (HDFS) for reliable and replicated storage. HBase/HDFS provides auto-sharding and failover technology for scaling database tables across multiple servers. It is the only technology proven to scale to dozens of petabytes on commodity servers.\n\n### Spark In-Memory Computation Engine\n\nSplice Machine uses Spark for analytical processing.\n\nApache Spark is a fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports a general execution graph on sets of data.\n\n<img class=\"tiny\" src=\"https://spark.apache.org/docs/latest/img/spark-logo-hd.png\">\n\nSpark has very efficient in-memory processing that can spill to disk (instead of dropping the query) if the query processing exceeds available memory. Spark is also unique in its resilience to node failures, which may occur in a commodity cluster. Other in-memory technologies will drop all queries associated with a failed node, while Spark uses ancestry (as opposed to replicating data) to regenerate its in-memory Resilient Distributed Datasets (RDDs) on another node.\n\nThe main abstraction Spark provides is a resilient distributed dataset (RDD), which is a collection of elements partitioned across the nodes of the cluster that can be operated on in parallel. RDDs are created by starting with a file in the Hadoop file system (or any other Hadoop-supported file system), or an existing Scala collection in the driver program, and transforming it. Users may also ask Spark to persist an RDD in memory, allowing it to be reused efficiently across parallel operations. Finally, RDDs automatically recover from node failures.\n\nSpark is optimized to work on DataFrames, which are the main structure used by Spark. A DataFrame is a distributed collection of data (an RDD) organized into named columns, with a schema that specifies data types, that is designed to support efficiently operating on scalable, massive datasets.\n\n#### Spark RDD Operations\n\nRDDs support two types of operations: transformations, which create a new dataset from an existing one, and actions, which return a value to the driver program after running a computation on the dataset. For example, map is a transformation that passes each dataset element through a function and returns a new RDD representing the results. On the other hand, reduce is an action that aggregates all the elements of the RDD using some function and returns the final result to the driver program (although there is also a parallel reduceByKey that returns a distributed dataset).\n\nAll transformations in Spark are lazy, in that they do not compute their results right away. Instead, they just remember the transformations applied to some base dataset (e.g. a file). The transformations are only computed when an action requires a result to be returned to the driver program. This design enables Spark to run more efficiently. For example, we can realize that a dataset created through map will be used in a reduce and return only the result of the reduce to the driver, rather than the larger mapped dataset.\n\n#### Spark Acceleration\n\nSplice Machine accelerates generation of Spark RDDs by reading HBase HFiles in HDFS and augmenting it with any changes in Memstore that have not been flushed to HFiles. Splice Machine then uses the RDDs and Spark operators to distribute processing across Spark Workers.\n\n### Resource Isolation\n\nSplice Machine isolates the resources allocated to HBase and Spark from each other, so each can progress independent of the workload of the other. Combined with the MVCC locking mechanism, this ensures that the performance level of transactional workloads can remain high, even if large reports or analytic processes are running.\n\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Technology Stack Overview</h2>\n<p>Splice Machine is built on open-sourced, proven, distributed database technology, including HBase/Hadoop and Spark.</p>\n<h3>HBase/Hadoop</h3>\n<p>The persistent, durable storage of operational data in Splice Machine resides in the Apache HBase key-value store. HBase:</p>\n<ul>\n  <li>is a non-relational (NoSQL) database that runs on top of HDFS</li>\n  <li>provides real-time read/write access to large datasets</li>\n  <li>scales linearly to handle huge data sets with billions of rows and millions of columns</li>\n  <li>is stored row-based and sorted by a primary key to deliver 1ms-10ms lookup speeds and short-range scans</li>\n</ul>\n<img class=\"tiny\" src=\"https://hbase.apache.org/images/hbase_logo_with_orca.png\">\n<p>HBase uses the Hadoop Distributed File System (HDFS) for reliable and replicated storage. HBase/HDFS provides auto-sharding and failover technology for scaling database tables across multiple servers. It is the only technology proven to scale to dozens of petabytes on commodity servers.</p>\n<h3>Spark In-Memory Computation Engine</h3>\n<p>Splice Machine uses Spark for analytical processing.</p>\n<p>Apache Spark is a fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports a general execution graph on sets of data.</p>\n<img class=\"tiny\" src=\"https://spark.apache.org/docs/latest/img/spark-logo-hd.png\">\n<p>Spark has very efficient in-memory processing that can spill to disk (instead of dropping the query) if the query processing exceeds available memory. Spark is also unique in its resilience to node failures, which may occur in a commodity cluster. Other in-memory technologies will drop all queries associated with a failed node, while Spark uses ancestry (as opposed to replicating data) to regenerate its in-memory Resilient Distributed Datasets (RDDs) on another node.</p>\n<p>The main abstraction Spark provides is a resilient distributed dataset (RDD), which is a collection of elements partitioned across the nodes of the cluster that can be operated on in parallel. RDDs are created by starting with a file in the Hadoop file system (or any other Hadoop-supported file system), or an existing Scala collection in the driver program, and transforming it. Users may also ask Spark to persist an RDD in memory, allowing it to be reused efficiently across parallel operations. Finally, RDDs automatically recover from node failures.</p>\n<p>Spark is optimized to work on DataFrames, which are the main structure used by Spark. A DataFrame is a distributed collection of data (an RDD) organized into named columns, with a schema that specifies data types, that is designed to support efficiently operating on scalable, massive datasets.</p>\n<h4>Spark RDD Operations</h4>\n<p>RDDs support two types of operations: transformations, which create a new dataset from an existing one, and actions, which return a value to the driver program after running a computation on the dataset. For example, map is a transformation that passes each dataset element through a function and returns a new RDD representing the results. On the other hand, reduce is an action that aggregates all the elements of the RDD using some function and returns the final result to the driver program (although there is also a parallel reduceByKey that returns a distributed dataset).</p>\n<p>All transformations in Spark are lazy, in that they do not compute their results right away. Instead, they just remember the transformations applied to some base dataset (e.g. a file). The transformations are only computed when an action requires a result to be returned to the driver program. This design enables Spark to run more efficiently. For example, we can realize that a dataset created through map will be used in a reduce and return only the result of the reduce to the driver, rather than the larger mapped dataset.</p>\n<h4>Spark Acceleration</h4>\n<p>Splice Machine accelerates generation of Spark RDDs by reading HBase HFiles in HDFS and augmenting it with any changes in Memstore that have not been flushed to HFiles. Splice Machine then uses the RDDs and Spark operators to distribute processing across Spark Workers.</p>\n<h3>Resource Isolation</h3>\n<p>Splice Machine isolates the resources allocated to HBase and Spark from each other, so each can progress independent of the workload of the other. Combined with the MVCC locking mechanism, this ensures that the performance level of transactional workloads can remain high, even if large reports or analytic processes are running.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232099_1462329725", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-02 22:19:30.825", 
      "dateCreated": "2018-11-19 14:57:12.099", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-145332_2050347825", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Internal Storage Using HBase\n\nSplice Machine uses HBase to internally store data. HBase is modeled after Google Big Table, which is a large, distributed associative map stored as a Log-Structured Merge Tree. In HBase:\n\n* Users store data rows in labelled tables.\n* Each data row has a sortable key and an aribtrary number of columns.\n* \nHBase is often misunderstood because many call it a column-oriented datastore. This just means columns are grouped in separately separately stored column families. But all data is still ordered by row.\n\nAn HBase cluster has a service known as the *HBase Master* that coordinates the HBase Cluster and is responsible for administrative operations.\n\nSplice Machine also uses ZooKeeper, which is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services on a cluster. \n\nHere's a diagram showing how HBase operates in Splice Machine:\n<img class=\"splice\" src=\"https://s3.amazonaws.com/splice-examples/images/tutorials/hbases_storage_architecture2.png\">\n<br />\n### Region Servers and Regions\n\nHBase auto-shards the data in a table across *Region Servers*:\n\n* Each region server has a set of *Regions*.\n* Each region is a set of rows sorted by a primary key.\n* \nWhen a region server fails to respond, HBase makes its regions accessible on other region servers. HBase is resilient to region server failures as well as to failure of Hadoop Data Nodes. \n\n### HBase Data Storage\n\nHBase writes data to an in-memory store, called *memstore*. Once this memstore reaches a certain size, it is flushed to disk into a *store file*; everything is also written immediately to a log file for durability. \n\nThe store files created on disk are immutable. Sometimes the store files are merged together, this is done by a process called *compaction*. Store files are on the Hadoop Distributed File System (<em>HDFS</em>) and are replicated for fault-tolerance. \n\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Internal Storage Using HBase</h2>\n<p>Splice Machine uses HBase to internally store data. HBase is modeled after Google Big Table, which is a large, distributed associative map stored as a Log-Structured Merge Tree. In HBase:</p>\n<ul>\n  <li>Users store data rows in labelled tables.</li>\n  <li>Each data row has a sortable key and an aribtrary number of columns.</li>\n  <li>HBase is often misunderstood because many call it a column-oriented datastore. This just means columns are grouped in separately separately stored column families. But all data is still ordered by row.</li>\n</ul>\n<p>An HBase cluster has a service known as the <em>HBase Master</em> that coordinates the HBase Cluster and is responsible for administrative operations.</p>\n<p>Splice Machine also uses ZooKeeper, which is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services on a cluster. </p>\n<p>Here&rsquo;s a diagram showing how HBase operates in Splice Machine:<br/><img class=\"splice\" src=\"https://s3.amazonaws.com/splice-examples/images/tutorials/hbases_storage_architecture2.png\"><br/><br /></p>\n<h3>Region Servers and Regions</h3>\n<p>HBase auto-shards the data in a table across <em>Region Servers</em>:</p>\n<ul>\n  <li>Each region server has a set of <em>Regions</em>.</li>\n  <li>Each region is a set of rows sorted by a primary key.</li>\n  <li>When a region server fails to respond, HBase makes its regions accessible on other region servers. HBase is resilient to region server failures as well as to failure of Hadoop Data Nodes.</li>\n</ul>\n<h3>HBase Data Storage</h3>\n<p>HBase writes data to an in-memory store, called <em>memstore</em>. Once this memstore reaches a certain size, it is flushed to disk into a <em>store file</em>; everything is also written immediately to a log file for durability. </p>\n<p>The store files created on disk are immutable. Sometimes the store files are merged together, this is done by a process called <em>compaction</em>. Store files are on the Hadoop Distributed File System (<em>HDFS</em>) and are replicated for fault-tolerance.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232100_-730463153", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-01 04:18:01.200", 
      "dateCreated": "2018-11-19 14:57:12.100", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-141721_42146671", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "FINISHED", 
      "dateFinished": "2018-12-12 02:22:21.376", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n## Where to Go Next\n\nWe recommend that you work through the Splice Machine training class that best fits how you plan to work with Splice Machine; these are described in the [*Our Training Classes*](/#/notebook/2DWTR5ZBH) notebook. Each of our classes ranges from 1-3 hours time to complete.\n", 
      "apps": [], 
      "results": {
        "msg": [
          {
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>We recommend that you work through the Splice Machine training class that best fits how you plan to work with Splice Machine; these are described in the <a href=\"/#/notebook/2DWTR5ZBH\"><em>Our Training Classes</em></a> notebook. Each of our classes ranges from 1-3 hours time to complete.</p>\n</div>", 
            "type": "HTML"
          }
        ], 
        "code": "SUCCESS"
      }, 
      "jobName": "paragraph_1542668232101_1564913823", 
      "user": "anonymous", 
      "dateStarted": "2018-12-12 02:22:21.368", 
      "dateUpdated": "2018-12-12 02:22:21.366", 
      "dateCreated": "2018-11-19 14:57:12.101", 
      "config": {
        "editorHide": true, 
        "enabled": false, 
        "results": {}, 
        "editorMode": "ace/mode/markdown", 
        "fontSize": 9.0, 
        "tableHide": false, 
        "editorSetting": {
          "editOnDblClick": true, 
          "completionSupport": false, 
          "language": "markdown"
        }, 
        "colWidth": 12.0
      }, 
      "id": "20180125-142959_1101825868", 
      "progressUpdateIntervalMs": 500
    }, 
    {
      "status": "READY", 
      "settings": {
        "forms": {}, 
        "params": {}
      }, 
      "text": "%md\n", 
      "apps": [], 
      "jobName": "paragraph_1544581341352_184995613", 
      "user": "anonymous", 
      "dateUpdated": "2018-12-12 02:22:21.353", 
      "dateCreated": "2018-12-12 02:22:21.352", 
      "config": {
        "editorMode": "ace/mode/sql"
      }, 
      "id": "20181212-022221_1631759540", 
      "progressUpdateIntervalMs": 500
    }
  ], 
  "config": {
    "isZeppelinNotebookCronEnable": false
  }, 
  "id": "2DX2STBE7"
}