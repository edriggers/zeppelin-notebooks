{
  "paragraphs": [
    {
      "text": "%md\n# Decision Trees Example\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\nThis notebook provides an example of implementing a *Decision Tree* algorithm that:\n\n* Loads a data file\n* Parses the data as an RDD of LabeledPoint\n* Performs classification using a decision tree with Gini impurity as an impurity measure and a maximum tree depth of 5.\n\nThe \u003ca href\u003d\"https://spark.apache.org/docs/latest/mllib-decision-tree.html\" target\u003d\"_blank\"\u003eDecision Tree Algorithm\u003c/a\u003e is a greedy algorithm that performs a recursive binary partitioning of the feature space for predictive modeling. Here are some interesting points about this algorithm: \n\n* Locally optimal decisions are made at each node in hopes of a globally optimal decision\n* Because of it\u0027s greedy nature, it cannot guarantee the globally optimal tree\n\nAt its core (and most simplified), decision trees are simply a system of if-else statements, always taking the most optimal answer, resulting in (hopefully) the most optimal decision, as shown in this diagram:\n\n\u003cimg class\u003d\"splice\" src\u003d\"http://mines.humanoriented.com/classes/2010/fall/csci568/portfolio_exports/lguo/image/decisionTree/classification.jpg\"\u003e",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 07:13:03.558",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eDecision Trees\u003c/h1\u003e\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://doc.splicemachine.com/zeppelin/css/zepstyles2.css\" /\u003e\n\u003cp\u003eThis notebook provides an example of implementing a \u003cem\u003eDecision Trees Example\u003c/em\u003e algorithm that:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLoads a data file\u003c/li\u003e\n  \u003cli\u003eParses the data as an RDD of LabeledPoint\u003c/li\u003e\n  \u003cli\u003ePerforms classification using a decision tree with Gini impurity as an impurity measure and a maximum tree depth of 5.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://spark.apache.org/docs/latest/mllib-decision-tree.html\" target\u003d\"_blank\"\u003eDecision Tree Algorithm\u003c/a\u003e is a greedy algorithm that performs a recursive binary partitioning of the feature space for predictive modeling. Here are some interesting points about this algorithm: \u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLocally optimal decisions are made at each node in hopes of a globally optimal decision\u003c/li\u003e\n  \u003cli\u003eBecause of it\u0026rsquo;s greedy nature, it cannot guarantee the globally optimal tree\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt its core (and most simplified), decision trees are simply a system of if-else statements, always taking the most optimal answer, resulting in (hopefully) the most optimal decision, as shown in this diagram:\u003c/p\u003e\n\u003cimg class\u003d\"splice\" src\u003d\"http://mines.humanoriented.com/classes/2010/fall/csci568/portfolio_exports/lguo/image/decisionTree/classification.jpg\"\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542398443304_1947682620",
      "id": "20170620-141909_771490751",
      "dateCreated": "2018-11-16 12:00:43.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Decision Tree Example\n\nThe example in the next paragraph loads a LIBSVM data file, available from \u003ca href\u003d\"https://github.com/apache/spark/blob/master/data/mllib/sample_libsvm_data.txt\" target\u003d\"_blank\"\u003ehttps://github.com/apache/spark/blob/master/data/mllib/sample_libsvm_data.txt\u003c/a\u003e.\n\nIt then parses that data as an RDD of labeled points, and performs classification using a decision tree with Gini impurity as an impurity measure and a maximum tree depth of 5. The test error is calculated, to measure the accuracy of the algorithm.\n\nYou can learn more about decision trees with MLlib on \u003ca href\u003d\"https://spark.apache.org/docs/latest/mllib-decision-tree.html\" target\u003d\"_blank\"\u003eSpark\u0027s Decision Tree page\u003c/a\u003e.",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 07:13:09.994",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDecision Tree Example\u003c/h2\u003e\n\u003cp\u003eThe example in the next paragraph loads a LIBSVM data file, available from \u003ca href\u003d\"https://github.com/apache/spark/blob/master/data/mllib/sample_libsvm_data.txt\" target\u003d\"_blank\"\u003e\u003ca href\u003d\"https://github.com/apache/spark/blob/master/data/mllib/sample_libsvm_data.txt\"\u003ehttps://github.com/apache/spark/blob/master/data/mllib/sample_libsvm_data.txt\u003c/a\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt then parses that data as an RDD of labeled points, and performs classification using a decision tree with Gini impurity as an impurity measure and a maximum tree depth of 5. The test error is calculated, to measure the accuracy of the algorithm.\u003c/p\u003e\n\u003cp\u003eYou can learn more about decision trees with MLlib on \u003ca href\u003d\"https://spark.apache.org/docs/latest/mllib-decision-tree.html\" target\u003d\"_blank\"\u003eSpark\u0026rsquo;s Decision Tree page\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542767864123_962201816",
      "id": "20181120-183744_1917061299",
      "dateCreated": "2018-11-20 18:37:44.123",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.mllib.tree.DecisionTree\nimport org.apache.spark.mllib.tree.model.DecisionTreeModel\nimport org.apache.spark.mllib.util.MLUtils\n\n// Load and parse the data file.\nval data \u003d MLUtils.loadLibSVMFile(sc, \"/opt/data/sample_libsvm_data.txt\")\n// Split the data into training and test sets (30% held out for testing)\nval splits \u003d data.randomSplit(Array(0.7, 0.3))\nval (trainingData, testData) \u003d (splits(0), splits(1))\n\n// Train a DecisionTree model.\n//  Empty categoricalFeaturesInfo indicates all features are continuous.\nval numClasses \u003d 2\nval categoricalFeaturesInfo \u003d Map[Int, Int]()\nval impurity \u003d \"gini\"\nval maxDepth \u003d 5\nval maxBins \u003d 32\n\nval model \u003d DecisionTree.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,\n  impurity, maxDepth, maxBins)\n\n// Evaluate model on test instances and compute test error\nval labelAndPreds \u003d testData.map { point \u003d\u003e\n  val prediction \u003d model.predict(point.features)\n  (point.label, prediction)\n}\nval testErr \u003d labelAndPreds.filter(r \u003d\u003e r._1 !\u003d r._2).count().toDouble / testData.count()\nprintln(\"Test Error \u003d \" + testErr)\nprintln(\"Learned classification tree model:\\n\" + model.toDebugString)\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-03 04:32:10.161",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1542398443305_2007728913",
      "id": "20170620-153325_126659046",
      "dateCreated": "2018-11-16 12:00:43.000",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Where to Go Next\n\nThe final notebook in this class shows you an example of implementing a simple [*ETL Pipeline Example*](/#/notebook/2DWVX87QY) in a Splice Machine Zeppelin notebook.\n",
      "user": "anonymous",
      "dateUpdated": "2018-12-01 07:14:04.975",
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhere to Go Next\u003c/h2\u003e\n\u003cp\u003eThe final notebook in this class shows you an example of implementing a simple \u003ca href\u003d\"/#/notebook/2DWVX87QY\"\u003e\u003cem\u003eETL Pipeline Example\u003c/em\u003e\u003c/a\u003e in a Splice Machine Zeppelin notebook.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1542398443306_-1240311123",
      "id": "20170620-153620_626385294",
      "dateCreated": "2018-11-16 12:00:43.000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Splice Machine Training/For Data Scientists/g. Decision Trees Example",
  "id": "2DUQ8F96K",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}