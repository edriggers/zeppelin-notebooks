{
  "paragraphs": [
    {
      "title": "Tutorial Data Schema - TPC-H",
      "text": "%md\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n# The Life of a Query\n\nThis notebook walks you through using Splice Machine to create, populate, and query a sample database. We'll use the TPC-H benchmarking data as our sample dataset.\n\nTPC-H is a decision support benchmark. It consists of a suite of business-oriented ad hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions.\n\nWe demonstrate running and optimizing queries in Splice Machine, in these sections:\n\n<ul class=\"italic\">\n    <li>Creating our Database in Splice Machine</li>\n    <li>Examining a Query Execution Plan</li>\n    <li>Informing the Optimizer</li>\n    <li>Adding Indexes to the Database</li>\n    <li>A Glimpse at Splice Machine Benchmark Results</li>\n    <li>Running Queries</li>\n</ul>\n\n<p class=\"noteIcon\">The code paragraphs in this notebook use the <em>%splicemachine</em> interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.</p>\n",
      "user": "splice",
      "dateUpdated": "2018-07-27T16:41:45+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<link rel=\"stylesheet\" href=\"https://doc.splicemachine.com/zeppelin/css/zepstyles.css\" />\n<h1>The Life of a Query</h1>\n<p>This notebook walks you through using Splice Machine to create, populate, and query a sample database. We&rsquo;ll use the TPC-H benchmarking data as our sample dataset.</p>\n<p>TPC-H is a decision support benchmark. It consists of a suite of business-oriented ad hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions.</p>\n<p>We demonstrate running and optimizing queries in Splice Machine, in these sections:</p>\n<ul class=\"italic\">\n    <li>Creating our Database in Splice Machine</li>\n    <li>Examining a Query Execution Plan</li>\n    <li>Informing the Optimizer</li>\n    <li>Adding Indexes to the Database</li>\n    <li>A Glimpse at Splice Machine Benchmark Results</li>\n    <li>Running Queries</li>\n</ul>\n<p class=\"noteIcon\">The code paragraphs in this notebook use the <em>%splicemachine</em> interpreter, which is pre-configured to interact with Splice Machine using ANSI SQL.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200309_-833146173",
      "id": "20180113-213553_290656873",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-21T21:29:50+0000",
      "dateFinished": "2018-06-21T21:29:50+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:6955"
    },
    {
      "text": "%md\n## Creating our Database in Splice Machine\n\nNow we'll create our database in Splice Machine, in the following steps:\n\n<ol class=\"italic\">\n    <li>Create the Schema</li>\n    <li>Create the Tables</li>\n    <li>Import the Data</li>\n</ol>\n\nNow we'll create the TPC-H schema in Splice Machine, create our tables, import the TPC-H data and run queries against that data.",
      "user": "splice",
      "dateUpdated": "2018-05-22T00:52:11+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Creating our Database in Splice Machine</h2>\n<p>Now we&rsquo;ll create our database in Splice Machine, in the following steps:</p>\n<ol class=\"italic\">\n    <li>Create the Schema</li>\n    <li>Create the Tables</li>\n    <li>Import the Data</li>\n</ol>\n<p>Now we&rsquo;ll create the TPC-H schema in Splice Machine, create our tables, import the TPC-H data and run queries against that data.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200310_-831991927",
      "id": "20180125-195425_1198649470",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-05-22T00:52:11+0000",
      "dateFinished": "2018-05-22T00:52:11+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6956"
    },
    {
      "text": "%splicemachine\nCREATE SCHEMA TPCH1;",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:21:00+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "java.sql.SQLException: Schema 'TPCH1' already exists.\n\tat com.splicemachine.db.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:103)\n\tat com.splicemachine.db.client.am.SqlException.getSQLException(SqlException.java:368)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:905)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:580)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:692)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:95)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:490)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: com.splicemachine.db.client.am.SqlException: Schema 'TPCH1' already exists.\n\tat com.splicemachine.db.client.am.Statement.completeSqlca(Statement.java:1845)\n\tat com.splicemachine.db.client.am.Statement.completeExecuteImmediate(Statement.java:1433)\n\tat com.splicemachine.db.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:210)\n\tat com.splicemachine.db.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:61)\n\tat com.splicemachine.db.client.net.StatementReply.readExecuteImmediate(StatementReply.java:49)\n\tat com.splicemachine.db.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:128)\n\tat com.splicemachine.db.client.am.Statement.readExecuteImmediate(Statement.java:1429)\n\tat com.splicemachine.db.client.am.Statement.flowExecute(Statement.java:2153)\n\tat com.splicemachine.db.client.am.Statement.executeX(Statement.java:910)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:896)\n\t... 15 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200310_-831991927",
      "id": "20180115-053038_1611909604",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:21:00+0000",
      "dateFinished": "2018-06-06T20:21:00+0000",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6957"
    },
    {
      "text": "%md\n#### Overview of the TPC-H Schema\n\nHere's a view of the TPC-H schema:\n\n<img class=\"fit3qtrwidth\" src=\"https://s3.amazonaws.com/splice-examples/images/tutorials/sample-data-tpch-schema.png\">\n\n### 2. Create the Tables\n\nWe'll now create the TPCH tables in our schema. In case we're working on a database in which we may have already imported TPCH data, we'll first conditionally drop the tables we want to create:",
      "user": "splice",
      "dateUpdated": "2018-06-21T15:54:12+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Overview of the TPC-H Schema</h4>\n<p>Here&rsquo;s a view of the TPC-H schema:</p>\n<img class=\"fit3qtrwidth\" src=\"https://s3.amazonaws.com/splice-examples/images/tutorials/sample-data-tpch-schema.png\">\n<h3>2. Create the Tables</h3>\n<p>We&rsquo;ll now create the TPCH tables in our schema. In case we&rsquo;re working on a database in which we may have already imported TPCH data, we&rsquo;ll first conditionally drop the tables we want to create:</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200310_-831991927",
      "id": "20180125-201218_1888148548",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-21T15:54:12+0000",
      "dateFinished": "2018-06-21T15:54:12+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6958"
    },
    {
      "text": "%splicemachine\nDROP TABLE IF EXISTS TPCH1.LINEITEM;\nDROP TABLE IF EXISTS TPCH1.ORDERS;\nDROP TABLE IF EXISTS TPCH1.CUSTOMER;\nDROP TABLE IF EXISTS TPCH1.PARTSUPP;\nDROP TABLE IF EXISTS TPCH1.SUPPLIER;\nDROP TABLE IF EXISTS TPCH1.PART;\nDROP TABLE IF EXISTS TPCH1.REGION;\nDROP TABLE IF EXISTS TPCH1.NATION;",
      "user": "splice",
      "dateUpdated": "2018-07-04T17:53:05+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200311_-832376675",
      "id": "20180115-013106_1425678081",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-07-04T17:53:06+0000",
      "dateFinished": "2018-07-04T17:53:15+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6959"
    },
    {
      "text": "%splicemachine\nCREATE TABLE TPCH1.LINEITEM (\n L_ORDERKEY BIGINT NOT NULL,\n L_PARTKEY INTEGER NOT NULL,\n L_SUPPKEY INTEGER NOT NULL, \n L_LINENUMBER INTEGER NOT NULL, \n L_QUANTITY DECIMAL(15,2),\n L_EXTENDEDPRICE DECIMAL(15,2),\n L_DISCOUNT DECIMAL(15,2),\n L_TAX DECIMAL(15,2),\n L_RETURNFLAG VARCHAR(1), \n L_LINESTATUS VARCHAR(1),\n L_SHIPDATE DATE,\n L_COMMITDATE DATE,\n L_RECEIPTDATE DATE,\n L_SHIPINSTRUCT VARCHAR(25),\n L_SHIPMODE VARCHAR(10),\n L_COMMENT VARCHAR(44),\n PRIMARY KEY(L_ORDERKEY,L_LINENUMBER)\n );\n \n CREATE TABLE TPCH1.ORDERS (\n O_ORDERKEY BIGINT NOT NULL PRIMARY KEY,\n O_CUSTKEY INTEGER,\n O_ORDERSTATUS VARCHAR(1),\n O_TOTALPRICE DECIMAL(15,2),\n O_ORDERDATE DATE,\n O_ORDERPRIORITY VARCHAR(15),\n O_CLERK VARCHAR(15),\n O_SHIPPRIORITY INTEGER ,\n O_COMMENT VARCHAR(79)\n );\n \n CREATE TABLE TPCH1.CUSTOMER (\n C_CUSTKEY INTEGER NOT NULL PRIMARY KEY,\n C_NAME VARCHAR(25),\n C_ADDRESS VARCHAR(40),\n C_NATIONKEY INTEGER NOT NULL,\n C_PHONE VARCHAR(15),\n C_ACCTBAL DECIMAL(15,2),\n C_MKTSEGMENT VARCHAR(10),\n C_COMMENT VARCHAR(117)\n );\n \n CREATE TABLE TPCH1.PARTSUPP (\n PS_PARTKEY INTEGER NOT NULL ,\n PS_SUPPKEY INTEGER NOT NULL , \n PS_AVAILQTY INTEGER,\n PS_SUPPLYCOST DECIMAL(15,2),\n PS_COMMENT VARCHAR(199),\n PRIMARY KEY(PS_PARTKEY,PS_SUPPKEY) \n );\n \n CREATE TABLE TPCH1.SUPPLIER (\n S_SUPPKEY INTEGER NOT NULL PRIMARY KEY,\n S_NAME VARCHAR(25) ,\n S_ADDRESS VARCHAR(40) ,\n S_NATIONKEY INTEGER ,\n S_PHONE VARCHAR(15) ,\n S_ACCTBAL DECIMAL(15,2),\n S_COMMENT VARCHAR(101)\n );\n \n CREATE TABLE TPCH1.PART (\n P_PARTKEY INTEGER NOT NULL PRIMARY KEY,\n P_NAME VARCHAR(55) ,\n P_MFGR VARCHAR(25) ,\n P_BRAND VARCHAR(10) ,\n P_TYPE VARCHAR(25) ,\n P_SIZE INTEGER ,\n P_CONTAINER VARCHAR(10) ,\n P_RETAILPRICE DECIMAL(15,2),\n P_COMMENT VARCHAR(23)\n );\n \n CREATE TABLE TPCH1.REGION (\n R_REGIONKEY INTEGER NOT NULL PRIMARY KEY,\n R_NAME VARCHAR(25),\n R_COMMENT VARCHAR(152)\n );\n \n CREATE TABLE TPCH1.NATION (\n N_NATIONKEY INTEGER NOT NULL,\n N_NAME VARCHAR(25),\n N_REGIONKEY INTEGER NOT NULL,\n N_COMMENT VARCHAR(152),\n PRIMARY KEY (N_NATIONKEY)\n );",
      "user": "splice",
      "dateUpdated": "2018-07-04T17:11:10+0000",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "java.sql.SQLException: table 'ORDERS' already exists in schema 'TPCH1'.\n\tat com.splicemachine.db.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:103)\n\tat com.splicemachine.db.client.am.SqlException.getSQLException(SqlException.java:368)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:905)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:580)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:692)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:95)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:490)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: com.splicemachine.db.client.am.SqlException: table 'ORDERS' already exists in schema 'TPCH1'.\n\tat com.splicemachine.db.client.am.Statement.completeSqlca(Statement.java:1845)\n\tat com.splicemachine.db.client.am.Statement.completeExecuteImmediate(Statement.java:1433)\n\tat com.splicemachine.db.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:210)\n\tat com.splicemachine.db.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:61)\n\tat com.splicemachine.db.client.net.StatementReply.readExecuteImmediate(StatementReply.java:49)\n\tat com.splicemachine.db.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:128)\n\tat com.splicemachine.db.client.am.Statement.readExecuteImmediate(Statement.java:1429)\n\tat com.splicemachine.db.client.am.Statement.flowExecute(Statement.java:2153)\n\tat com.splicemachine.db.client.am.Statement.executeX(Statement.java:910)\n\tat com.splicemachine.db.client.am.Statement.execute(Statement.java:896)\n\t... 15 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200311_-832376675",
      "id": "20180129-104639_365354120",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-07-04T17:11:13+0000",
      "dateFinished": "2018-07-04T17:11:17+0000",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6960"
    },
    {
      "text": "%md\n### 3. Import the Data\n\nWe have pre-loaded flat files with the TPCH data into an S3 bucket to facilitate importing the data. All we need to do is run an `IMPORT` statement for each table.\n\n<p class=\"noteNote\">Importing this much data can take a few minutes; you'll see the result of each import displayed below the <code>IMPORT</code> statements as they complete.</p>\n",
      "user": "splice",
      "dateUpdated": "2018-07-04T18:13:14+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>3. Import the Data</h3>\n<p>We have pre-loaded flat files with the TPCH data into an S3 bucket to facilitate importing the data. All we need to do is run an <code>IMPORT</code> statement for each table.</p>\n<p class=\"noteNote\">Importing this much data can take a few minutes; you'll see the result of each import displayed below the <code>IMPORT</code> statements as they complete.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200311_-832376675",
      "id": "20180125-201815_611540808",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-07-04T18:13:14+0000",
      "dateFinished": "2018-07-04T18:13:16+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6961"
    },
    {
      "text": "%md\n",
      "user": "splice",
      "dateUpdated": "2018-04-03T19:54:50+0000",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1522785290634_-1870742208",
      "id": "20180403-195450_1901236835",
      "dateCreated": "2018-04-03T19:54:50+0000",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6962"
    },
    {
      "title": "Import Data",
      "text": "%splicemachine\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'LINEITEM', null, 's3a://splice-benchmark-data/flat/TPCH/1/lineitem', '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'ORDERS',   null, 's3a://splice-benchmark-data/flat/TPCH/1/orders',   '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'CUSTOMER', null, 's3a://splice-benchmark-data/flat/TPCH/1/customer', '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'PARTSUPP', null, 's3a://splice-benchmark-data/flat/TPCH/1/partsupp', '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'SUPPLIER', null, 's3a://splice-benchmark-data/flat/TPCH/1/supplier', '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'PART',     null, 's3a://splice-benchmark-data/flat/TPCH/1/part',     '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'REGION',   null, 's3a://splice-benchmark-data/flat/TPCH/1/region',   '|', null, null, null, null, 0, '/tmp', true, null);\n\ncall SYSCS_UTIL.IMPORT_DATA ('TPCH1', 'NATION',   null, 's3a://splice-benchmark-data/flat/TPCH/1/nation',   '|', null, null, null, null, 0, '/tmp', true, null);\n",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:21:27+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 96.946,
              "optionOpen": false
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "2": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "3": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "4": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "5": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "6": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          },
          "7": {
            "graph": {
              "mode": "table",
              "height": 89.0057,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n6001215\t0\t1\t759863287\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n1500000\t0\t1\t171952161\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n150000\t0\t1\t24346144\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n800000\t0\t1\t118984616\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n10000\t0\t1\t1409184\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n200000\t0\t1\t24135125\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n5\t0\t1\t389\tNONE\n"
          },
          {
            "type": "TABLE",
            "data": "rowsImported\tfailedRows\tfiles\tdataSize\tfailedLog\n25\t0\t1\t2224\tNONE\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200311_-832376675",
      "id": "20180115-012619_1984460020",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:21:27+0000",
      "dateFinished": "2018-06-06T20:23:15+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6963"
    },
    {
      "title": "Order Priority Checking Query (Q4)",
      "text": "%md\n## Examining a Query Execution Plan\n\nIn the next few sections of this notebook, we'll examine execution plans for TPC-H Query 4, which is known as the <em>Order Priority Checking Query</em>. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.\n\nSplice Machine generates an execution plan prior to running your query. You can use the `explain` command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries. \n<p class=\"noteIcon\">The <a href=\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target=\"_blank\">Reading Explain Plans</a> topic in our documentation describes how to read explain plans.</p>\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Examining a Query Execution Plan</h2>\n<p>In the next few sections of this notebook, we&rsquo;ll examine execution plans for TPC-H Query 4, which is known as the <em>Order Priority Checking Query</em>. This query counts the number of orders ordered in a given quarter of a given year in which at least one lineitem was received by the customer later than its committed date; you can use it to determine how well the order priority system is working and gives an assessment of customer satisfaction.</p>\n<p>Splice Machine generates an execution plan prior to running your query. You can use the <code>explain</code> command to generate and display the execution plan without actually running the query; this can help you to determine optimizing strategies for your queries.<br/><p class=\"noteIcon\">The <a href=\"https://doc.splicemachine.com/developers_tuning_explainplan_examples.html\" target=\"_blank\">Reading Explain Plans</a> topic in our documentation describes how to read explain plans.</p></p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200312_-834300420",
      "id": "20180122-173257_1568071437",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6964"
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain  select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:24:10+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=13,rows=1179878,updateMode=,engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=137993.043,outputRows=1179878,outputHeapSize=4.425 MB,partitions=2)\n    ->  OrderBy(n=11,totalCost=114310.259,outputRows=1179878,outputHeapSize=4.425 MB,partitions=2)\n      ->  ProjectRestrict(n=10,totalCost=34156.295,outputRows=1179878,outputHeapSize=4.425 MB,partitions=2)\n        ->  GroupBy(n=9,totalCost=6031.233,outputRows=1179878,outputHeapSize=4.425 MB,partitions=2)\n          ->  ProjectRestrict(n=8,totalCost=2347.75,outputRows=366874,outputHeapSize=4.425 MB,partitions=2)\n            ->  BroadcastJoin(n=7,totalCost=6031.233,outputRows=1179878,outputHeapSize=4.425 MB,partitions=2,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(7136)](n=6,totalCost=2347.75,scannedRows=1171875,outputRows=366874,outputHeapSize=4.425 MB,partitions=2,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=8845.366,outputRows=1456640,outputHeapSize=4.167 MB,partitions=2)\n                ->  Distinct(n=4,totalCost=4422.683,outputRows=1456640,outputHeapSize=4.167 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=8845.366,outputRows=1456640,outputHeapSize=4.167 MB,partitions=2)\n                    ->  ProjectRestrict(n=2,totalCost=8845.366,outputRows=1456640,outputHeapSize=4.167 MB,partitions=2,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(7120)](n=1,totalCost=8832.124,scannedRows=4414062,outputRows=4414062,outputHeapSize=4.167 MB,partitions=2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200312_-834300420",
      "id": "20180201-123806_1712783827",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:24:10+0000",
      "dateFinished": "2018-06-06T20:24:10+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6965"
    },
    {
      "title": "Splice Machine Optimizer",
      "text": "%md\n## Optimizing Query Performance\n\nIn this section we'll look at optimizing the execution plan for TPCH Query 4. We'll:\n\n* Collect Statistics to Inform the Optimizer\n* Add Indexes to Further Optimize the Plan\n* Compare Execution Plans\n\nThe *Splice Machine Optimizer* is a cost-based optimizer that generates optimal execution plans for database queries. You use our `analyze` command to collect statistics from your database, which the optimizer uses when planning the execution of a query.\n\n<p class=\"noteIcon\">Cost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.</p>\n\nWhen creating a plan for a query, our optimizer performs a number of important and valuable actions, including:\n\n* It creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.\n* When joining tables, the optimizer evaluates the best *join order* and the *join strategy* to use.\n* The optimizer unrolls subqueries to reduce processing time\n\nThese metrics are usually extremely expensive but if approximate results are acceptable, there is a class of specialized algorithms, called streaming algorithms, or *sketches*, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the [Yahoo Sketches Library](https://datasketches.github.io/docs/TheChallenge.html) for its statistics gathering. \n\n### Collect Statistics\nOur first optimization is to collect statistics to inform the optimizer about our database. We use our `analyze` command to collect statistics on a schema (or table). This process requires a couple minutes.\n",
      "user": "splice",
      "dateUpdated": "2018-05-21T22:03:42+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Optimizing Query Performance</h2>\n<p>In this section we&rsquo;ll look at optimizing the execution plan for TPCH Query 4. We&rsquo;ll:</p>\n<ul>\n  <li>Collect Statistics to Inform the Optimizer</li>\n  <li>Add Indexes to Further Optimize the Plan</li>\n  <li>Compare Execution Plans</li>\n</ul>\n<p>The <em>Splice Machine Optimizer</em> is a cost-based optimizer that generates optimal execution plans for database queries. You use our <code>analyze</code> command to collect statistics from your database, which the optimizer uses when planning the execution of a query.</p>\n<p class=\"noteIcon\">Cost-based optimizers are powerful features of modern databases that enable query plans to change as the data profiles change. Optimizers make use of count distinct, quantiles, and most frequent item counts as heuristics.</p>\n<p>When creating a plan for a query, our optimizer performs a number of important and valuable actions, including:</p>\n<ul>\n  <li>It creates an access plan, which determine the best path for accessing the data the query will operate upon; for example, the access path might be to scan an entire table or to use an index.</li>\n  <li>When joining tables, the optimizer evaluates the best <em>join order</em> and the <em>join strategy</em> to use.</li>\n  <li>The optimizer unrolls subqueries to reduce processing time</li>\n</ul>\n<p>These metrics are usually extremely expensive but if approximate results are acceptable, there is a class of specialized algorithms, called streaming algorithms, or <em>sketches</em>, that can produce results orders-of magnitude faster and with mathematically proven error bounds. Splice Machine leverages the <a href=\"https://datasketches.github.io/docs/TheChallenge.html\">Yahoo Sketches Library</a> for its statistics gathering. </p>\n<h3>Collect Statistics</h3>\n<p>Our first optimization is to collect statistics to inform the optimizer about our database. We use our <code>analyze</code> command to collect statistics on a schema (or table). This process requires a couple minutes.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200312_-834300420",
      "id": "20180115-053838_672371514",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-05-21T22:03:42+0000",
      "dateFinished": "2018-05-21T22:03:42+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6966"
    },
    {
      "title": "Collect Statistics",
      "text": "%splicemachine\nanalyze schema TPCH1;\n",
      "user": "splice",
      "dateUpdated": "2018-07-25T20:06:57+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nTPCH1\tLINEITEM\t-All-\t6001215\t528106920\t2\t2\t0.0\nTPCH1\tORDERS\t-All-\t1500000\t150000000\t1\t2\t0.0\nTPCH1\tCUSTOMER\t-All-\t150000\t22950000\t1\t2\t0.0\nTPCH1\tPARTSUPP\t-All-\t800000\t112000000\t1\t2\t0.0\nTPCH1\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\nTPCH1\tPART\t-All-\t200000\t22000000\t1\t2\t0.0\nTPCH1\tREGION\t-All-\t5\t380\t1\t2\t0.0\nTPCH1\tNATION\t-All-\t25\t2225\t1\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200312_-834300420",
      "id": "20180115-053719_1393443514",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:24:45+0000",
      "dateFinished": "2018-06-06T20:26:03+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6967"
    },
    {
      "text": "%md\n### Rerun the Explain Plan After Collecting Statistics\n\nNow let's re-run the `explain` plan for Query 4 and see how the optimizer changed the plan after gathering statistics.\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Rerun the Explain Plan After Collecting Statistics</h3>\n<p>Now let&rsquo;s re-run the <code>explain</code> plan for Query 4 and see how the optimizer changed the plan after gathering statistics.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200313_-834685169",
      "id": "20180201-160453_2099057216",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6968"
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:26:11+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=13,rows=5,updateMode=,engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=67142.113,outputRows=5,outputHeapSize=127 B,partitions=2)\n    ->  OrderBy(n=11,totalCost=67142.01,outputRows=5,outputHeapSize=127 B,partitions=2)\n      ->  ProjectRestrict(n=10,totalCost=44761.166,outputRows=1604125,outputHeapSize=127 B,partitions=2)\n        ->  GroupBy(n=9,totalCost=7495.089,outputRows=1604125,outputHeapSize=39.056 MB,partitions=2)\n          ->  ProjectRestrict(n=8,totalCost=3004,outputRows=434563,outputHeapSize=39.056 MB,partitions=2)\n            ->  BroadcastJoin(n=7,totalCost=7495.089,outputRows=1604125,outputHeapSize=39.056 MB,partitions=2,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(7136)](n=6,totalCost=3004,scannedRows=1500000,outputRows=434563,outputHeapSize=39.056 MB,partitions=2,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2)\n                ->  Distinct(n=4,totalCost=5692.652,outputRows=1557719,outputHeapSize=24.512 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(7120)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200313_-834685169",
      "id": "20180115-071650_158099310",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:26:11+0000",
      "dateFinished": "2018-06-06T20:26:12+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6969"
    },
    {
      "text": "%md\n### Compare Execution Plans After Analyzing the Database\n\nNow let's compare the plans to see what changed. At a quick glance, you'll notice that a very large difference in the `totalCost` numbers for every operation in the plan:\n\n#### After Collecting Statistics\n```\nPlan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```\n\n#### Before Collecting Statistics\n```\nPlan\nCursor(n=13,rows=36753750,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=1576165.614,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n    ->  OrderBy(n=11,totalCost=838921.423,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=400696.835,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n        ->  GroupBy(n=9,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=75629,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=75629,scannedRows=37812500,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=6717.476,outputRows=45375000,outputHeapSize=129.819 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=275004,scannedRows=137500000,outputRows=137500000,outputHeapSize=129.819 MB,partitions=41)\n```\n",
      "user": "splice",
      "dateUpdated": "2018-05-21T22:10:43+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Compare Execution Plans After Analyzing the Database</h3>\n<p>Now let&rsquo;s compare the plans to see what changed. At a quick glance, you&rsquo;ll notice that a very large difference in the <code>totalCost</code> numbers for every operation in the plan:</p>\n<h4>After Collecting Statistics</h4>\n<pre><code>Plan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n<h4>Before Collecting Statistics</h4>\n<pre><code>Plan\nCursor(n=13,rows=36753750,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=1576165.614,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=838921.423,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=400696.835,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=75629,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=98186.501,outputRows=36753750,outputHeapSize=139.022 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=75629,scannedRows=37812500,outputRows=11837789,outputHeapSize=139.022 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=6717.476,outputRows=45375000,outputHeapSize=129.819 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=275416.5,outputRows=45375000,outputHeapSize=129.819 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=275004,scannedRows=137500000,outputRows=137500000,outputHeapSize=129.819 MB,partitions=41)\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200313_-834685169",
      "id": "20180201-160712_2000693903",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-05-21T22:10:43+0000",
      "dateFinished": "2018-05-21T22:10:43+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6970"
    },
    {
      "title": "Indexes",
      "text": "%md\n\n### Optimize by Adding Indexes\n\nSplice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.\n\n<div class=\"notePlain\" style=\"max-width:40%;\">The primary key is not optimal for all queries.</div>\n\nUnlike HBase and other key-value stores, Splice Machine can use *secondary indexes* to improve the performance of data manipulation statements. In addition, `UNIQUE` indexes provide a form of data integrity checking.\n\nJust as we did when creating new tables, we'll first drop the indexes we're going to create, in case they already exist.\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Optimize by Adding Indexes</h3>\n<p>Splice Machine tables have primary keys either implicit or explicitly defined. Data is stored in order of these keys.</p>\n<div class=\"notePlain\" style=\"max-width:40%;\">The primary key is not optimal for all queries.</div>\n<p>Unlike HBase and other key-value stores, Splice Machine can use <em>secondary indexes</em> to improve the performance of data manipulation statements. In addition, <code>UNIQUE</code> indexes provide a form of data integrity checking.</p>\n<p>Just as we did when creating new tables, we&rsquo;ll first drop the indexes we&rsquo;re going to create, in case they already exist.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200313_-834685169",
      "id": "20180115-055551_1473914744",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6971"
    },
    {
      "text": "%splicemachine\ndrop index TPCH1.O_CUST_IDX;\ndrop index TPCH1.O_DATE_PRI_KEY_IDX;\ndrop index TPCH1.L_SHIPDATE_IDX;\ndrop index TPCH1.L_PART_IDX;",
      "user": "splice",
      "dateUpdated": "2018-05-22T03:41:06+0000",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200314_-833530922",
      "id": "20180115-074728_655442192",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-05-22T03:41:06+0000",
      "dateFinished": "2018-05-22T03:41:08+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6972"
    },
    {
      "title": "Create Indexes",
      "text": "%splicemachine\ncreate index TPCH1.O_CUST_IDX on TPCH1.ORDERS(\n O_CUSTKEY,\n O_ORDERKEY\n );\n \n create index TPCH1.O_DATE_PRI_KEY_IDX on TPCH1.ORDERS(\n O_ORDERDATE,\n O_ORDERPRIORITY,\n O_ORDERKEY\n );\n \n create index TPCH1.L_SHIPDATE_IDX on TPCH1.LINEITEM(\n L_SHIPDATE,\n L_PARTKEY,\n L_EXTENDEDPRICE,\n L_DISCOUNT\n );\n \n create index TPCH1.L_PART_IDX on TPCH1.LINEITEM(\n L_PARTKEY,\n L_ORDERKEY,\n L_SUPPKEY,\n L_SHIPDATE,\n L_EXTENDEDPRICE,\n L_DISCOUNT,\n L_QUANTITY,\n L_SHIPMODE,\n L_SHIPINSTRUCT\n );",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:26:23+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          },
          {
            "type": "TEXT",
            "data": "Query executed successfully. Affected rows : 0"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200314_-833530922",
      "id": "20180115-055326_1726784632",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:26:23+0000",
      "dateFinished": "2018-06-06T20:27:47+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6973"
    },
    {
      "text": "%md\n### Re-analze and Re-run the Explain Plan After Indexing\n\nNow that we've added indexes to our database, let's re-analyze the database and then re-run the `explain` plan for Query 4 one more time to see how indexing has affected our execution plan.\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Re-analze and Re-run the Explain Plan After Indexing</h3>\n<p>Now that we&rsquo;ve added indexes to our database, let&rsquo;s re-analyze the database and then re-run the <code>explain</code> plan for Query 4 one more time to see how indexing has affected our execution plan.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200314_-833530922",
      "id": "20180125-203451_1030911184",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6974"
    },
    {
      "text": "%splicemachine\nanalyze schema TPCH1;",
      "user": "splice",
      "dateUpdated": "2018-03-05T05:58:20+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "schemaName\ttableName\tpartition\trowsCollected\tpartitionSize\tpartitionCount\tstatsType\tsampleFraction\nTPCH1\tLINEITEM\t-All-\t6001215\t528106920\t2\t2\t0.0\nTPCH1\tORDERS\t-All-\t1500000\t150000000\t1\t2\t0.0\nTPCH1\tCUSTOMER\t-All-\t150000\t22950000\t1\t2\t0.0\nTPCH1\tPARTSUPP\t-All-\t800000\t112000000\t1\t2\t0.0\nTPCH1\tSUPPLIER\t-All-\t10000\t1340000\t1\t2\t0.0\nTPCH1\tPART\t-All-\t200000\t22000000\t1\t2\t0.0\nTPCH1\tREGION\t-All-\t5\t380\t1\t2\t0.0\nTPCH1\tNATION\t-All-\t25\t2225\t1\t2\t0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200314_-833530922",
      "id": "20180115-075331_1211951910",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-03-05T05:58:20+0000",
      "dateFinished": "2018-03-05T05:59:36+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6975"
    },
    {
      "text": "%splicemachine\n-- QUERY 04\nexplain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\tTPCH1.orders\nwhere\n\to_orderdate >= date('1993-07-01')\n\tand o_orderdate < add_months('1993-07-01',3)\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tTPCH1.lineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority\n-- END OF QUERY",
      "user": "splice",
      "dateUpdated": "2018-06-06T20:28:03+0000",
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Plan\nCursor(n=14,rows=5,updateMode=,engine=Spark)\n  ->  ScrollInsensitive(n=13,totalCost=63851.66,outputRows=5,outputHeapSize=127 B,partitions=2)\n    ->  OrderBy(n=12,totalCost=63851.557,outputRows=5,outputHeapSize=127 B,partitions=2)\n      ->  ProjectRestrict(n=11,totalCost=42567.538,outputRows=1604125,outputHeapSize=127 B,partitions=2)\n        ->  GroupBy(n=10,totalCost=6032.67,outputRows=1604125,outputHeapSize=39.056 MB,partitions=2)\n          ->  ProjectRestrict(n=9,totalCost=6001884,outputRows=434563,outputHeapSize=39.056 MB,partitions=2)\n            ->  BroadcastJoin(n=8,totalCost=6032.67,outputRows=1604125,outputHeapSize=39.056 MB,partitions=2,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  ProjectRestrict(n=7,totalCost=6001884,outputRows=434563,outputHeapSize=39.056 MB,partitions=2)\n                ->  IndexScan[O_DATE_PRI_KEY_IDX(7265)](n=6,totalCost=1541.581,scannedRows=1156076,outputRows=434563,outputHeapSize=39.056 MB,partitions=2,baseTable=ORDERS(7136),preds=[(O_ORDERDATE[5:1] < dataTypeServices: DATE ),(O_ORDERDATE[5:1] >= 1993-07-01)])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2)\n                ->  Distinct(n=4,totalCost=5692.652,outputRows=1557719,outputHeapSize=24.512 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=2,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(7120)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=2)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200315_-833915671",
      "id": "20180115-064548_1062136708",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:28:03+0000",
      "dateFinished": "2018-06-06T20:28:03+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6976"
    },
    {
      "title": "Plan Comparison After Indexes",
      "text": "%md\n### Compare Execution Plans\n\nWe can now compare how the query will execute with indexing in place versus without indexes. You'll again notice that, among other differences, the `totalCost` values are lower for most operations because the optimizer was able to take advantage of the indexes we added.\n\n#### Query Plan After Indexing\n```\nPlan\nCursor(n=14,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=13,totalCost=15353.855,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=12,totalCost=15353.753,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=11,totalCost=14988.138,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=10,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=9,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=8,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  ProjectRestrict(n=7,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n                ->  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n=6,totalCost=1547.029,scannedRows=1160172,outputRows=435332,outputHeapSize=39.081 MB,partitions=41,baseTable=ORDERS(1616),preds=[(O_ORDERDATE[5:1] < dataTypeServices: DATE ),(O_ORDERDATE[5:1] >= 1993-07-01)])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```\n\n#### Query Plan Before Indexing\n```\nPlan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  ->  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    ->  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      ->  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        ->  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          ->  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            ->  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              ->  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] >= 1993-07-01),(O_ORDERDATE[5:2] < dataTypeServices: DATE )])\n              ->  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                ->  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  ->  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    ->  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] < L_RECEIPTDATE[0:3])])\n                      ->  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n```",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Compare Execution Plans</h3>\n<p>We can now compare how the query will execute with indexing in place versus without indexes. You&rsquo;ll again notice that, among other differences, the <code>totalCost</code> values are lower for most operations because the optimizer was able to take advantage of the indexes we added.</p>\n<h4>Query Plan After Indexing</h4>\n<pre><code>Plan\nCursor(n=14,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=13,totalCost=15353.855,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=12,totalCost=15353.753,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=11,totalCost=14988.138,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=10,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=9,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=8,totalCost=2463.089,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  ProjectRestrict(n=7,totalCost=6001884,outputRows=435332,outputHeapSize=39.081 MB,partitions=41)\n                -&gt;  IndexScan[O_DATE_PRI_KEY_IDX(1745)](n=6,totalCost=1547.029,scannedRows=1160172,outputRows=435332,outputHeapSize=39.081 MB,partitions=41,baseTable=ORDERS(1616),preds=[(O_ORDERDATE[5:1] &lt; dataTypeServices: DATE ),(O_ORDERDATE[5:1] &gt;= 1993-07-01)])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n<h4>Query Plan Before Indexing</h4>\n<pre><code>Plan\nCursor(n=13,rows=5,updateMode=READ_ONLY (1),engine=Spark)\n  -&gt;  ScrollInsensitive(n=12,totalCost=16920.058,outputRows=5,outputHeapSize=127 B,partitions=41)\n    -&gt;  OrderBy(n=11,totalCost=16919.956,outputRows=5,outputHeapSize=127 B,partitions=41)\n      -&gt;  ProjectRestrict(n=10,totalCost=16517.046,outputRows=1604125,outputHeapSize=127 B,partitions=41)\n        -&gt;  GroupBy(n=9,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41)\n          -&gt;  ProjectRestrict(n=8,totalCost=3004,outputRows=435327,outputHeapSize=39.081 MB,partitions=41)\n            -&gt;  MergeSortJoin(n=7,totalCost=3955.595,outputRows=1604125,outputHeapSize=39.081 MB,partitions=41,preds=[(ExistsFlatSubquery-0-1.L_ORDERKEY[7:1] = O_ORDERKEY[7:2])])\n              -&gt;  TableScan[ORDERS(1616)](n=6,totalCost=3004,scannedRows=1500000,outputRows=435327,outputHeapSize=39.081 MB,partitions=41,preds=[(O_ORDERDATE[5:2] &gt;= 1993-07-01),(O_ORDERDATE[5:2] &lt; dataTypeServices: DATE )])\n              -&gt;  ProjectRestrict(n=5,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                -&gt;  Distinct(n=4,totalCost=277.69,outputRows=1501009,outputHeapSize=23.619 MB,partitions=1)\n                  -&gt;  ProjectRestrict(n=3,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41)\n                    -&gt;  ProjectRestrict(n=2,totalCost=11385.304,outputRows=1980401,outputHeapSize=31.163 MB,partitions=41,preds=[(L_COMMITDATE[0:2] &lt; L_RECEIPTDATE[0:3])])\n                      -&gt;  TableScan[LINEITEM(1600)](n=1,totalCost=11286.284,scannedRows=6001215,outputRows=6001215,outputHeapSize=31.163 MB,partitions=41)\n</code></pre>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200315_-833915671",
      "id": "20180115-164324_663989920",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6977"
    },
    {
      "title": "Representative Micro-Benchmarks",
      "text": "%md\n## A Glimpse at Splice Machine Benchmark Results\n\nHere are some micro-results from Splice Machine running TPC-H benchmarks:\n\n- 2ms single record lookups on primary keys at petabyte scale\n- 20ms single record updates at petabyte scale\n- 40-way OLTP indexed joins return in <100ms\n- 150-way OLAP style joins execute in under 2 minutes\n- 440-way join executes where others can’t parse\n- Ingestion at 80MB/sec/node\n- Can run TPC-C and TPC-H simultaneously\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>A Glimpse at Splice Machine Benchmark Results</h2>\n<p>Here are some micro-results from Splice Machine running TPC-H benchmarks:</p>\n<ul>\n  <li>2ms single record lookups on primary keys at petabyte scale</li>\n  <li>20ms single record updates at petabyte scale</li>\n  <li>40-way OLTP indexed joins return in &lt;100ms</li>\n  <li>150-way OLAP style joins execute in under 2 minutes</li>\n  <li>440-way join executes where others can’t parse</li>\n  <li>Ingestion at 80MB/sec/node</li>\n  <li>Can run TPC-C and TPC-H simultaneously</li>\n</ul>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200316_-835839416",
      "id": "20180118-022657_414327443",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6978"
    },
    {
      "text": "%md\n### Running TPC-H Queries\n\nNow we'll run TPC-H Query 02, so you can see the database in action.",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>Running TPC-H Queries</h3>\n<p>Now we&rsquo;ll run TPC-H Query 02, so you can see the database in action.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200316_-835839416",
      "id": "20180125-204204_1935879463",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6979"
    },
    {
      "text": "%splicemachine\n-- QUERY 02\nselect\n\ts_acctbal,\n\ts_name,\n\tn_name,\n\tp_partkey,\n\tp_mfgr,\n\ts_address,\n\ts_phone,\n\ts_comment\nfrom\n\tTPCH1.part,\n\tTPCH1.supplier,\n\tTPCH1.partsupp,\n\tTPCH1.nation,\n\tTPCH1.region\nwhere\n\tp_partkey = ps_partkey\n\tand s_suppkey = ps_suppkey\n\tand p_size = 15\n\tand p_type like '%BRASS'\n\tand s_nationkey = n_nationkey\n\tand n_regionkey = r_regionkey\n\tand r_name = 'EUROPE'\n\tand ps_supplycost = (\n\t\tselect\n\t\t\tmin(ps_supplycost)\n\t\tfrom\n\t\t\tTPCH1.partsupp,\n\t\t\tTPCH1.supplier,\n\t\t\tTPCH1.nation,\n\t\t\tTPCH1.region\n\t\twhere\n\t\t\tp_partkey = ps_partkey\n\t\t\tand s_suppkey = ps_suppkey\n\t\t\tand s_nationkey = n_nationkey\n\t\t\tand n_regionkey = r_regionkey\n\t\t\tand r_name = 'EUROPE'\n\t)\norder by\n\ts_acctbal desc,\n\tn_name,\n\ts_name,\n\tp_partkey\n{limit 100}\n-- END OF QUERY\n",
      "user": "splice",
      "dateUpdated": "2018-07-27T16:47:48+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/sql",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "S_ACCTBAL\tS_NAME\tN_NAME\tP_PARTKEY\tP_MFGR\tS_ADDRESS\tS_PHONE\tS_COMMENT\n9938.53\tSupplier#000005359\tUNITED KINGDOM\t185358\tManufacturer#4\tQKuHYh,vZGiwu2FWEJoLDx04\t33-429-790-6131\turiously regular requests hag\n9937.84\tSupplier#000005969\tROMANIA\t108438\tManufacturer#1\tANDENSOSmk,miq23Xfb5RWt6dvUcvt6Qa\t29-520-692-3537\tefully express instructions. regular requests against the slyly fin\n9936.22\tSupplier#000005250\tUNITED KINGDOM\t249\tManufacturer#4\tB3rqp0xbSEim4Mpy2RH J\t33-320-228-2957\tetect about the furiously final accounts. slyly ironic pinto beans sleep inside the furiously\n9923.77\tSupplier#000002324\tGERMANY\t29821\tManufacturer#4\ty3OD9UywSTOk\t17-779-299-1839\tackages boost blithely. blithely regular deposits c\n9871.22\tSupplier#000006373\tGERMANY\t43868\tManufacturer#5\tJ8fcXWsTqM\t17-813-485-8637\tetect blithely bold asymptotes. fluffily ironic platelets wake furiously; blit\n9870.78\tSupplier#000001286\tGERMANY\t81285\tManufacturer#2\tYKA,E2fjiVd7eUrzp2Ef8j1QxGo2DFnosaTEH\t17-516-924-4574\t regular accounts. furiously unusual courts above the fi\n9870.78\tSupplier#000001286\tGERMANY\t181285\tManufacturer#4\tYKA,E2fjiVd7eUrzp2Ef8j1QxGo2DFnosaTEH\t17-516-924-4574\t regular accounts. furiously unusual courts above the fi\n9852.52\tSupplier#000008973\tRUSSIA\t18972\tManufacturer#2\tt5L67YdBYYH6o,Vz24jpDyQ9\t32-188-594-7038\trns wake final foxes. carefully unusual depende\n9847.83\tSupplier#000008097\tRUSSIA\t130557\tManufacturer#2\txMe97bpE69NzdwLoX\t32-375-640-3593\t the special excuses. silent sentiments serve carefully final ac\n9847.57\tSupplier#000006345\tFRANCE\t86344\tManufacturer#1\tVSt3rzk3qG698u6ld8HhOByvrTcSTSvQlDQDag\t16-886-766-7945\tges. slyly regular requests are. ruthless, express excuses cajole blithely across the unu\n9847.57\tSupplier#000006345\tFRANCE\t173827\tManufacturer#2\tVSt3rzk3qG698u6ld8HhOByvrTcSTSvQlDQDag\t16-886-766-7945\tges. slyly regular requests are. ruthless, express excuses cajole blithely across the unu\n9836.93\tSupplier#000007342\tRUSSIA\t4841\tManufacturer#4\tJOlK7C1,7xrEZSSOw\t32-399-414-5385\tblithely carefully bold theodolites. fur\n9817.10\tSupplier#000002352\tRUSSIA\t124815\tManufacturer#2\t4LfoHUZjgjEbAKw TgdKcgOc4D4uCYw\t32-551-831-1437\twake carefully alongside of the carefully final ex\n9817.10\tSupplier#000002352\tRUSSIA\t152351\tManufacturer#3\t4LfoHUZjgjEbAKw TgdKcgOc4D4uCYw\t32-551-831-1437\twake carefully alongside of the carefully final ex\n9739.86\tSupplier#000003384\tFRANCE\t138357\tManufacturer#2\to,Z3v4POifevE k9U1b 6J1ucX,I\t16-494-913-5925\ts after the furiously bold packages sleep fluffily idly final requests: quickly final\n9721.95\tSupplier#000008757\tUNITED KINGDOM\t156241\tManufacturer#3\tAtg6GnM4dT2\t33-821-407-2995\teep furiously sauternes; quickl\n9681.33\tSupplier#000008406\tRUSSIA\t78405\tManufacturer#1\t,qUuXcftUl\t32-139-873-8571\thaggle slyly regular excuses. quic\n9643.55\tSupplier#000005148\tROMANIA\t107617\tManufacturer#1\tkT4ciVFslx9z4s79p Js825\t29-252-617-4850\tfinal excuses. final ideas boost quickly furiously speci\n9624.82\tSupplier#000001816\tFRANCE\t34306\tManufacturer#3\te7vab91vLJPWxxZnewmnDBpDmxYHrb\t16-392-237-6726\te packages are around the special ideas. special, pending foxes us\n9624.78\tSupplier#000009658\tROMANIA\t189657\tManufacturer#1\toE9uBgEfSS4opIcepXyAYM,x\t29-748-876-2014\tronic asymptotes wake bravely final\n9612.94\tSupplier#000003228\tROMANIA\t120715\tManufacturer#2\tKDdpNKN3cWu7ZSrbdqp7AfSLxx,qWB\t29-325-784-8187\twarhorses. quickly even deposits sublate daringly ironic instructions. slyly blithe t\n9612.94\tSupplier#000003228\tROMANIA\t198189\tManufacturer#4\tKDdpNKN3cWu7ZSrbdqp7AfSLxx,qWB\t29-325-784-8187\twarhorses. quickly even deposits sublate daringly ironic instructions. slyly blithe t\n9571.83\tSupplier#000004305\tROMANIA\t179270\tManufacturer#2\tqNHZ7WmCzygwMPRDO9Ps\t29-973-481-1831\tkly carefully express asymptotes. furiou\n9558.10\tSupplier#000003532\tUNITED KINGDOM\t88515\tManufacturer#4\tEOeuiiOn21OVpTlGguufFDFsbN1p0lhpxHp\t33-152-301-2164\t foxes. quickly even excuses use. slyly special foxes nag bl\n9492.79\tSupplier#000005975\tGERMANY\t25974\tManufacturer#5\tS6mIiCTx82z7lV\t17-992-579-4839\tarefully pending accounts. blithely regular excuses boost carefully carefully ironic p\n9461.05\tSupplier#000002536\tUNITED KINGDOM\t20033\tManufacturer#1\t8mmGbyzaU 7ZS2wJumTibypncu9pNkDc4FYA\t33-556-973-5522\t. slyly regular deposits wake slyly. furiously regular warthogs are.\n9453.01\tSupplier#000000802\tROMANIA\t175767\tManufacturer#1\t,6HYXb4uaHITmtMBj4Ak57Pd\t29-342-882-6463\tgular frets. permanently special multipliers believe blithely alongs\n9408.65\tSupplier#000007772\tUNITED KINGDOM\t117771\tManufacturer#4\tAiC5YAH,gdu0i7\t33-152-491-1126\tnag against the final requests. furiously unusual packages cajole blit\n9359.61\tSupplier#000004856\tROMANIA\t62349\tManufacturer#5\tHYogcF3Jb yh1\t29-334-870-9731\ty ironic theodolites. blithely sile\n9357.45\tSupplier#000006188\tUNITED KINGDOM\t138648\tManufacturer#1\tg801,ssP8wpTk4Hm\t33-583-607-1633\tously always regular packages. fluffily even accounts beneath the furiously final pack\n9352.04\tSupplier#000003439\tGERMANY\t170921\tManufacturer#4\tqYPDgoiBGhCYxjgC\t17-128-996-4650\t according to the carefully bold ideas\n9312.97\tSupplier#000007807\tRUSSIA\t90279\tManufacturer#5\toGYMPCk9XHGB2PBfKRnHA\t32-673-872-5854\tecial packages among the pending, even requests use regula\n9312.97\tSupplier#000007807\tRUSSIA\t100276\tManufacturer#5\toGYMPCk9XHGB2PBfKRnHA\t32-673-872-5854\tecial packages among the pending, even requests use regula\n9280.27\tSupplier#000007194\tROMANIA\t47193\tManufacturer#3\tzhRUQkBSrFYxIAXTfInj vyGRQjeK\t29-318-454-2133\to beans haggle after the furiously unusual deposits. carefully silent dolphins cajole carefully\n9274.80\tSupplier#000008854\tRUSSIA\t76346\tManufacturer#3\t1xhLoOUM7I3mZ1mKnerw OSqdbb4QbGa\t32-524-148-5221\ty. courts do wake slyly. carefully ironic platelets haggle above the slyly regular the\n9249.35\tSupplier#000003973\tFRANCE\t26466\tManufacturer#1\td18GiDsL6Wm2IsGXM,RZf1jCsgZAOjNYVThTRP4\t16-722-866-1658\tuests are furiously. regular tithes through the regular, final accounts cajole furiously above the q\n9249.35\tSupplier#000003973\tFRANCE\t33972\tManufacturer#1\td18GiDsL6Wm2IsGXM,RZf1jCsgZAOjNYVThTRP4\t16-722-866-1658\tuests are furiously. regular tithes through the regular, final accounts cajole furiously above the q\n9208.70\tSupplier#000007769\tROMANIA\t40256\tManufacturer#5\trsimdze 5o9P Ht7xS\t29-964-424-9649\tlites was quickly above the furiously ironic requests. slyly even foxes against the blithely bold \n9201.47\tSupplier#000009690\tUNITED KINGDOM\t67183\tManufacturer#5\tCB BnUTlmi5zdeEl7R7\t33-121-267-9529\te even, even foxes. blithely ironic packages cajole regular packages. slyly final ide\n9192.10\tSupplier#000000115\tUNITED KINGDOM\t85098\tManufacturer#3\tnJ 2t0f7Ve,wL1,6WzGBJLNBUCKlsV\t33-597-248-1220\tes across the carefully express accounts boost caref\n9189.98\tSupplier#000001226\tGERMANY\t21225\tManufacturer#4\tqsLCqSvLyZfuXIpjz\t17-725-903-1381\t deposits. blithely bold excuses about the slyly bold forges wake \n9128.97\tSupplier#000004311\tRUSSIA\t146768\tManufacturer#5\tI8IjnXd7NSJRs594RxsRR0\t32-155-440-7120\trefully. blithely unusual asymptotes haggle \n9104.83\tSupplier#000008520\tGERMANY\t150974\tManufacturer#4\tRqRVDgD0ER J9 b41vR2,3\t17-728-804-1793\tly about the blithely ironic depths. slyly final theodolites among the fluffily bold ideas print\n9101.00\tSupplier#000005791\tROMANIA\t128254\tManufacturer#5\tzub2zCV,jhHPPQqi,P2INAjE1zI n66cOEoXFG\t29-549-251-5384\tts. notornis detect blithely above the carefully bold requests. blithely even package\n9094.57\tSupplier#000004582\tRUSSIA\t39575\tManufacturer#1\tWB0XkCSG3r,mnQ n,h9VIxjjr9ARHFvKgMDf\t32-587-577-1351\tjole. regular accounts sleep blithely frets. final pinto beans play furiously past the \n8996.87\tSupplier#000004702\tFRANCE\t102191\tManufacturer#5\t8XVcQK23akp\t16-811-269-8946\tickly final packages along the express plat\n8996.14\tSupplier#000009814\tROMANIA\t139813\tManufacturer#2\taf0O5pg83lPU4IDVmEylXZVqYZQzSDlYLAmR\t29-995-571-8781\t dependencies boost quickly across the furiously pending requests! unusual dolphins play sl\n8968.42\tSupplier#000010000\tROMANIA\t119999\tManufacturer#5\taTGLEusCiL4F PDBdv665XBJhPyCOB0i\t29-578-432-2146\tly regular foxes boost slyly. quickly special waters boost carefully ironi\n8936.82\tSupplier#000007043\tUNITED KINGDOM\t109512\tManufacturer#1\tFVajceZInZdbJE6Z9XsRUxrUEpiwHDrOXi,1Rz\t33-784-177-8208\tefully regular courts. furiousl\n8929.42\tSupplier#000008770\tFRANCE\t173735\tManufacturer#4\tR7cG26TtXrHAP9 HckhfRi\t16-242-746-9248\tcajole furiously unusual requests. quickly stealthy requests are. \n8920.59\tSupplier#000003967\tROMANIA\t26460\tManufacturer#1\teHoAXe62SY9\t29-194-731-3944\taters. express, pending instructions sleep. brave, r\n8920.59\tSupplier#000003967\tROMANIA\t173966\tManufacturer#2\teHoAXe62SY9\t29-194-731-3944\taters. express, pending instructions sleep. brave, r\n8913.96\tSupplier#000004603\tUNITED KINGDOM\t137063\tManufacturer#2\tOUzlvMUr7n,utLxmPNeYKSf3T24OXskxB5\t33-789-255-7342\t haggle slyly above the furiously regular pinto beans. even \n8877.82\tSupplier#000007967\tFRANCE\t167966\tManufacturer#5\tA3pi1BARM4nx6R,qrwFoRPU\t16-442-147-9345\tously foxes. express, ironic requests im\n8862.24\tSupplier#000003323\tROMANIA\t73322\tManufacturer#3\tW9 lYcsC9FwBqk3ItL\t29-736-951-3710\tly pending ideas sleep about the furiously unu\n8841.59\tSupplier#000005750\tROMANIA\t100729\tManufacturer#5\tErx3lAgu0g62iaHF9x50uMH4EgeN9hEG\t29-344-502-5481\tgainst the pinto beans. fluffily unusual dependencies affix slyly even deposits.\n8781.71\tSupplier#000003121\tROMANIA\t13120\tManufacturer#5\twNqTogx238ZYCamFb,50v,bj 4IbNFW9Bvw1xP\t29-707-291-5144\ts wake quickly ironic ideas\n8754.24\tSupplier#000009407\tUNITED KINGDOM\t179406\tManufacturer#4\tCHRCbkaWcf5B\t33-903-970-9604\te ironic requests. carefully even foxes above the furious\n8691.06\tSupplier#000004429\tUNITED KINGDOM\t126892\tManufacturer#2\tk,BQms5UhoAF1B2Asi,fLib\t33-964-337-5038\tefully express deposits kindle after the deposits. final \n8655.99\tSupplier#000006330\tRUSSIA\t193810\tManufacturer#2\tUozlaENr0ytKe2w6CeIEWFWn iO3S8Rae7Ou\t32-561-198-3705\tsymptotes use about the express dolphins. requests use after the express platelets. final, ex\n8638.36\tSupplier#000002920\tRUSSIA\t75398\tManufacturer#1\tJe2a8bszf3L\t32-122-621-7549\tly quickly ironic requests. even requests whithout t\n8638.36\tSupplier#000002920\tRUSSIA\t170402\tManufacturer#3\tJe2a8bszf3L\t32-122-621-7549\tly quickly ironic requests. even requests whithout t\n8607.69\tSupplier#000006003\tUNITED KINGDOM\t76002\tManufacturer#2\tEH9wADcEiuenM0NR08zDwMidw,52Y2RyILEiA\t33-416-807-5206\tar, pending accounts. pending depende\n8569.52\tSupplier#000005936\tRUSSIA\t5935\tManufacturer#5\tjXaNZ6vwnEWJ2ksLZJpjtgt0bY2a3AU\t32-644-251-7916\t. regular foxes nag carefully atop the regular, silent deposits. quickly regular packages \n8564.12\tSupplier#000000033\tGERMANY\t110032\tManufacturer#1\tgfeKpYw3400L0SDywXA6Ya1Qmq1w6YB9f3R\t17-138-897-9374\tn sauternes along the regular asymptotes are regularly along the \n8553.82\tSupplier#000003979\tROMANIA\t143978\tManufacturer#4\tBfmVhCAnCMY3jzpjUMy4CNWs9 HzpdQR7INJU\t29-124-646-4897\tic requests wake against the blithely unusual accounts. fluffily r\n8517.23\tSupplier#000009529\tRUSSIA\t37025\tManufacturer#5\te44R8o7JAIS9iMcr\t32-565-297-8775\tove the even courts. furiously special platelets \n8517.23\tSupplier#000009529\tRUSSIA\t59528\tManufacturer#2\te44R8o7JAIS9iMcr\t32-565-297-8775\tove the even courts. furiously special platelets \n8503.70\tSupplier#000006830\tRUSSIA\t44325\tManufacturer#4\tBC4WFCYRUZyaIgchU 4S\t32-147-878-5069\tpades cajole. furious packages among the carefully express excuses boost furiously across th\n8457.09\tSupplier#000009456\tUNITED KINGDOM\t19455\tManufacturer#1\t7SBhZs8gP1cJjT0Qf433YBk\t33-858-440-4349\tcing requests along the furiously unusual deposits promise among the furiously unus\n8441.40\tSupplier#000003817\tFRANCE\t141302\tManufacturer#2\thU3fz3xL78\t16-339-356-5115\tely even ideas. ideas wake slyly furiously unusual instructions. pinto beans sleep ag\n8432.89\tSupplier#000003990\tRUSSIA\t191470\tManufacturer#1\twehBBp1RQbfxAYDASS75MsywmsKHRVdkrvNe6m\t32-839-509-9301\tep furiously. packages should have to haggle slyly across the deposits. furiously regu\n8431.40\tSupplier#000002675\tROMANIA\t5174\tManufacturer#1\tHJFStOu9R5NGPOegKhgbzBdyvrG2yh8w\t29-474-643-1443\tithely express pinto beans. blithely even foxes haggle. furiously regular theodol\n8407.04\tSupplier#000005406\tRUSSIA\t162889\tManufacturer#4\tj7 gYF5RW8DC5UrjKC\t32-626-152-4621\tr the blithely regular packages. slyly ironic theodoli\n8386.08\tSupplier#000008518\tFRANCE\t36014\tManufacturer#3\t2jqzqqAVe9crMVGP,n9nTsQXulNLTUYoJjEDcqWV\t16-618-780-7481\tblithely bold pains are carefully platelets. finally regular pinto beans sleep carefully special\n8376.52\tSupplier#000005306\tUNITED KINGDOM\t190267\tManufacturer#5\t9t8Y8 QqSIsoADPt6NLdk,TP5zyRx41oBUlgoGc9\t33-632-514-7931\tly final accounts sleep special, regular requests. furiously regular\n8348.74\tSupplier#000008851\tFRANCE\t66344\tManufacturer#4\tnWxi7GwEbjhw1\t16-796-240-2472\t boldly final deposits. regular, even instructions detect slyly. fluffily unusual pinto bea\n8338.58\tSupplier#000007269\tFRANCE\t17268\tManufacturer#4\tZwhJSwABUoiB04,3\t16-267-277-4365\tiously final accounts. even pinto beans cajole slyly regular\n8328.46\tSupplier#000001744\tROMANIA\t69237\tManufacturer#5\toLo3fV64q2,FKHa3p,qHnS7Yzv,ps8\t29-330-728-5873\tep carefully-- even, careful packages are slyly along t\n8307.93\tSupplier#000003142\tGERMANY\t18139\tManufacturer#1\tdqblvV8dCNAorGlJ\t17-595-447-6026\tolites wake furiously regular decoys. final requests nod \n8231.61\tSupplier#000009558\tRUSSIA\t192000\tManufacturer#2\tmcdgen,yT1iJDHDS5fV\t32-762-137-5858\t foxes according to the furi\n8152.61\tSupplier#000002731\tROMANIA\t15227\tManufacturer#4\t nluXJCuY1tu\t29-805-463-2030\t special requests. even, regular warhorses affix among the final gr\n8109.09\tSupplier#000009186\tFRANCE\t99185\tManufacturer#1\twgfosrVPexl9pEXWywaqlBMDYYf\t16-668-570-1402\ttions haggle slyly about the sil\n8102.62\tSupplier#000003347\tUNITED KINGDOM\t18344\tManufacturer#5\tm CtXS2S16i\t33-454-274-8532\tegrate with the slyly bold instructions. special foxes haggle silently among the\n8046.07\tSupplier#000008780\tFRANCE\t191222\tManufacturer#3\tAczzuE0UK9osj ,Lx0Jmh\t16-473-215-6395\tonic platelets cajole after the regular instructions. permanently bold excuses\n8042.09\tSupplier#000003245\tRUSSIA\t135705\tManufacturer#4\tDh8Ikg39onrbOL4DyTfGw8a9oKUX3d9Y\t32-836-132-8872\tosits. packages cajole slyly. furiously regular deposits cajole slyly. q\n8042.09\tSupplier#000003245\tRUSSIA\t150729\tManufacturer#1\tDh8Ikg39onrbOL4DyTfGw8a9oKUX3d9Y\t32-836-132-8872\tosits. packages cajole slyly. furiously regular deposits cajole slyly. q\n7992.40\tSupplier#000006108\tFRANCE\t118574\tManufacturer#1\t8tBydnTDwUqfBfFV4l3\t16-974-998-8937\t ironic ideas? fluffily even instructions wake. blithel\n7980.65\tSupplier#000001288\tFRANCE\t13784\tManufacturer#4\tzE,7HgVPrCn\t16-646-464-8247\tully bold courts. escapades nag slyly. furiously fluffy theodo\n7950.37\tSupplier#000008101\tGERMANY\t33094\tManufacturer#5\tkkYvL6IuvojJgTNG IKkaXQDYgx8ILohj\t17-627-663-8014\tarefully unusual requests x-ray above the quickly final deposits. \n7937.93\tSupplier#000009012\tROMANIA\t83995\tManufacturer#2\tiUiTziH,Ek3i4lwSgunXMgrcTzwdb\t29-250-925-9690\tto the blithely ironic deposits nag sly\n7914.45\tSupplier#000001013\tRUSSIA\t125988\tManufacturer#2\triRcntps4KEDtYScjpMIWeYF6mNnR\t32-194-698-3365\t busily bold packages are dolphi\n7912.91\tSupplier#000004211\tGERMANY\t159180\tManufacturer#5\t2wQRVovHrm3,v03IKzfTd,1PYsFXQFFOG\t17-266-947-7315\tay furiously regular platelets. cou\n7912.91\tSupplier#000004211\tGERMANY\t184210\tManufacturer#4\t2wQRVovHrm3,v03IKzfTd,1PYsFXQFFOG\t17-266-947-7315\tay furiously regular platelets. cou\n7894.56\tSupplier#000007981\tGERMANY\t85472\tManufacturer#4\tNSJ96vMROAbeXP\t17-963-404-3760\tic platelets affix after the furiously\n7887.08\tSupplier#000009792\tGERMANY\t164759\tManufacturer#3\tY28ITVeYriT3kIGdV2K8fSZ V2UqT5H1Otz\t17-988-938-4296\tckly around the carefully fluffy theodolites. slyly ironic pack\n7871.50\tSupplier#000007206\tRUSSIA\t104695\tManufacturer#1\t3w fNCnrVmvJjE95sgWZzvW\t32-432-452-7731\tironic requests. furiously final theodolites cajole. final, express packages sleep. quickly reg\n7852.45\tSupplier#000005864\tRUSSIA\t8363\tManufacturer#4\tWCNfBPZeSXh3h,c\t32-454-883-3821\tusly unusual pinto beans. brave ideas sleep carefully quickly ironi\n7850.66\tSupplier#000001518\tUNITED KINGDOM\t86501\tManufacturer#1\tONda3YJiHKJOC\t33-730-383-3892\tifts haggle fluffily pending pai\n7843.52\tSupplier#000006683\tFRANCE\t11680\tManufacturer#4\t2Z0JGkiv01Y00oCFwUGfviIbhzCdy\t16-464-517-8943\t express, final pinto beans x-ray slyly asymptotes. unusual, unusual\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200316_-835839416",
      "id": "20180115-083845_542565773",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "dateStarted": "2018-06-06T20:28:25+0000",
      "dateFinished": "2018-06-06T20:28:46+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6980"
    },
    {
      "text": "%md\n## Where to Go Next\n\nThe next notebook in this presentation introduces you to the <a href=\"/#/notebook/2D93Y56QJ\">Splice Machine Database Console,</a> which you can use to monitor and control your currently running queries.",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Where to Go Next</h2>\n<p>The next notebook in this presentation introduces you to the <a href=\"/#/notebook/2D93Y56QJ\">Splice Machine Database Console,</a> which you can use to monitor and control your currently running queries.</p>\n</div>"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520184200317_-836224164",
      "id": "20180122-173624_509126525",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6981"
    },
    {
      "text": "%md\n",
      "dateUpdated": "2018-03-04T17:23:20+0000",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1520184200317_-836224164",
      "id": "20180125-142959_1101825868",
      "dateCreated": "2018-03-04T17:23:20+0000",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:6982"
    }
  ],
  "name": "3. Splice Deep Dive / 2. The Life of a Query",
  "id": "2D6ZFHE9U",
  "angularObjects": {
    "2DKZDNHV8:shared_process": [],
    "2DJTPJBES:shared_process": [],
    "2DM13S4RB:shared_process": [],
    "2DNKHFPM9:shared_process": [],
    "2DK21JBKV:shared_process": [],
    "2DM8PBKA1:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}
